{
  "0x700c600045483d38ff06d8294858221f877b3575560c14a21ad95ba26a612349": {
    "name": "StrikeSelectionETHCall",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "DeltaStrikeSelection",
      "sourceName": "contracts/utils/DeltaStrikeSelection.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_optionsPremiumPricer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_delta",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_step",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldDelta",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newDelta",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "DeltaSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldStep",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newStep",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "StepSet",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "delta",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPut",
              "type": "bool"
            }
          ],
          "name": "getStrikePrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "newStrikePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newDelta",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "optionsPremiumPricer",
          "outputs": [
            {
              "internalType": "contract IOptionsPremiumPricer",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newDelta",
              "type": "uint256"
            }
          ],
          "name": "setDelta",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newStep",
              "type": "uint256"
            }
          ],
          "name": "setStep",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "step",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "volatilityOracle",
          "outputs": [
            {
              "internalType": "contract IVolatilityOracle",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x60e06040523480156200001157600080fd5b50604051620011db380380620011db8339810160408190526200003491620003e0565b6200003f336200033f565b6001600160a01b0383166200009b5760405162461bcd60e51b815260206004820152601660248201527f215f6f7074696f6e735072656d69756d5072696365720000000000000000000060448201526064015b60405180910390fd5b60008211620000d75760405162461bcd60e51b8152602060048201526007602482015266215f64656c746160c81b604482015260640162000092565b6127108211156200012b5760405162461bcd60e51b815260206004820152601e60248201527f6e657744656c74612063616e6e6f74206265206d6f7265207468616e20310000604482015260640162000092565b60008111620001665760405162461bcd60e51b81526020600482015260066024820152650215f737465760d41b604482015260640162000092565b826001600160a01b03166080816001600160a01b031660601b81525050826001600160a01b03166355b13a4f6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001bd57600080fd5b505afa158015620001d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f89190620003c3565b6001600160a01b031660a0816001600160a01b031660601b81525050816001819055506000836001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200025757600080fd5b505afa1580156200026c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002929190620003c3565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620002cb57600080fd5b505afa158015620002e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000306919062000417565b6200031390600a62000479565b90506200032f81836200038f60201b6200091b1790919060201c565b60025560c052506200056d915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006200039d828462000535565b90505b92915050565b80516001600160a01b0381168114620003be57600080fd5b919050565b600060208284031215620003d5578081fd5b6200039d82620003a6565b600080600060608486031215620003f5578182fd5b6200040084620003a6565b925060208401519150604084015190509250925092565b60006020828403121562000429578081fd5b5051919050565b600181815b808511156200047157816000190482111562000455576200045562000557565b808516156200046357918102915b93841c939080029062000435565b509250929050565b60006200039d83836000826200049257506001620003a0565b81620004a157506000620003a0565b8160018114620004ba5760028114620004c557620004e5565b6001915050620003a0565b60ff841115620004d957620004d962000557565b50506001821b620003a0565b5060208310610133831016604e8410600b84101617156200050a575081810a620003a0565b62000516838362000430565b80600019048211156200052d576200052d62000557565b029392505050565b600081600019048311821515161562000552576200055262000557565b500290565b634e487b7160e01b600052601160045260246000fd5b60805160601c60a05160601c60c051610c0f620005cc600039600081816105d20152818161073a01526108bc01526000818160d901526103dd0152600081816101310152818161033f0152818161040c01526105a80152610c0f6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063afa6626411610066578063afa662641461012c578063e25fe17514610153578063e436b8911461015c578063f2fde38b14610184578063f8dcbddb1461019757600080fd5b8063025ff0a5146100a357806312b495a8146100b857806355b13a4f146100d4578063715018a6146101135780638da5cb5b1461011b575b600080fd5b6100b66100b1366004610a8a565b6101aa565b005b6100c160015481565b6040519081526020015b60405180910390f35b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100cb565b6100b66102b3565b6000546001600160a01b03166100fb565b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6100c160025481565b61016f61016a366004610aba565b6102e9565b604080519283526020830191909152016100cb565b6100b6610192366004610a52565b6107b3565b6100b66101a5366004610a8a565b61084e565b6000546001600160a01b031633146101dd5760405162461bcd60e51b81526004016101d490610aed565b60405180910390fd5b600081116102195760405162461bcd60e51b8152602060048201526009602482015268216e657744656c746160b81b60448201526064016101d4565b61271081111561026b5760405162461bcd60e51b815260206004820152601e60248201527f6e657744656c74612063616e6e6f74206265206d6f7265207468616e2031000060448201526064016101d4565b6001805490829055604080518281526020810184905233917f760f0242cb96fbbbd0cf6647501a2763dfd1ee22287ca1a688cb1d5f1ca6026d91015b60405180910390a25050565b6000546001600160a01b031633146102dd5760405162461bcd60e51b81526004016101d490610aed565b6102e7600061092e565b565b60008042841161033b5760405162461bcd60e51b815260206004820152601d60248201527f457870697279206d75737420626520696e20746865206675747572652100000060448201526064016101d4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468f02d26040518163ffffffff1660e01b815260040160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610aa2565b905060006105186402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663950ed82c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190610a6e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156104da57600080fd5b505afa1580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190610aa2565b9061091b565b90506000856105545760025461054f906105496105358287610b84565b6002546105429190610b6d565b869061097e565b9061097e565b610575565b6002546105759061056f6105688287610b84565b869061098a565b9061098a565b905060008661058657600154610596565b600154610596906127109061098a565b90506127105b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639380576f6106057f00000000000000000000000000000000000000000000000000000000000000006105ff8a6305f5e10061091b565b90610996565b6040516001600160e01b031960e084901b16815260048101919091526024810187905260448101889052606481018d905260840160206040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190610aa2565b90506000896106a7578284111580156106a25750818410155b6106b7565b8284101580156106b75750818411155b9050801561077a5760006106cd8484878e6109a2565b905060006106dd8286898f610a1c565b90508b6106ed57888110156106f2565b888111155b6107355760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420737472696b6520707269636560601b60448201526064016101d4565b6107677f00000000000000000000000000000000000000000000000000000000000000006105ff836305f5e10061091b565b829a509a505050505050505050506107ac565b896107925760025461078d90869061097e565b6107a0565b6002546107a090869061098a565b9450819250505061059c565b9250929050565b6000546001600160a01b031633146107dd5760405162461bcd60e51b81526004016101d490610aed565b6001600160a01b0381166108425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101d4565b61084b8161092e565b50565b6000546001600160a01b031633146108785760405162461bcd60e51b81526004016101d490610aed565b600081116108b35760405162461bcd60e51b81526020600482015260086024820152670216e6577537465760c41b60448201526064016101d4565b6002546108e0827f000000000000000000000000000000000000000000000000000000000000000061091b565b600255604080518281526020810184905233917f08e332c6ae0c42d16506516b7ec987c8101ae8c5e930012ecd0c23142930518c91016102a7565b60006109278284610b4e565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006109278284610b22565b60006109278284610b6d565b60006109278284610b3a565b60008082156109e05760006109b7868661098a565b905060006109c5868961098a565b9050818111156109d557866109d7565b875b92505050610a11565b60006109ec878661098a565b905060006109fa868861098a565b905081811115610a0a5787610a0c565b865b925050505b90505b949350505050565b6000838514610a2c575081610a14565b81610a4457600254610a3f90849061098a565b610a11565b600254610a1190849061097e565b600060208284031215610a63578081fd5b813561092781610bc4565b600060208284031215610a7f578081fd5b815161092781610bc4565b600060208284031215610a9b578081fd5b5035919050565b600060208284031215610ab3578081fd5b5051919050565b60008060408385031215610acc578081fd5b8235915060208301358015158114610ae2578182fd5b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b3557610b35610b98565b500190565b600082610b4957610b49610bae565b500490565b6000816000190483118215151615610b6857610b68610b98565b500290565b600082821015610b7f57610b7f610b98565b500390565b600082610b9357610b93610bae565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461084b57600080fdfea26469706673582212201443c82f5078287ff9257c6b77c34a9b44efe298e74847dae4ddd6e44afe63e064736f6c63430008040033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063afa6626411610066578063afa662641461012c578063e25fe17514610153578063e436b8911461015c578063f2fde38b14610184578063f8dcbddb1461019757600080fd5b8063025ff0a5146100a357806312b495a8146100b857806355b13a4f146100d4578063715018a6146101135780638da5cb5b1461011b575b600080fd5b6100b66100b1366004610a8a565b6101aa565b005b6100c160015481565b6040519081526020015b60405180910390f35b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100cb565b6100b66102b3565b6000546001600160a01b03166100fb565b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6100c160025481565b61016f61016a366004610aba565b6102e9565b604080519283526020830191909152016100cb565b6100b6610192366004610a52565b6107b3565b6100b66101a5366004610a8a565b61084e565b6000546001600160a01b031633146101dd5760405162461bcd60e51b81526004016101d490610aed565b60405180910390fd5b600081116102195760405162461bcd60e51b8152602060048201526009602482015268216e657744656c746160b81b60448201526064016101d4565b61271081111561026b5760405162461bcd60e51b815260206004820152601e60248201527f6e657744656c74612063616e6e6f74206265206d6f7265207468616e2031000060448201526064016101d4565b6001805490829055604080518281526020810184905233917f760f0242cb96fbbbd0cf6647501a2763dfd1ee22287ca1a688cb1d5f1ca6026d91015b60405180910390a25050565b6000546001600160a01b031633146102dd5760405162461bcd60e51b81526004016101d490610aed565b6102e7600061092e565b565b60008042841161033b5760405162461bcd60e51b815260206004820152601d60248201527f457870697279206d75737420626520696e20746865206675747572652100000060448201526064016101d4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468f02d26040518163ffffffff1660e01b815260040160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610aa2565b905060006105186402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663950ed82c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190610a6e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156104da57600080fd5b505afa1580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190610aa2565b9061091b565b90506000856105545760025461054f906105496105358287610b84565b6002546105429190610b6d565b869061097e565b9061097e565b610575565b6002546105759061056f6105688287610b84565b869061098a565b9061098a565b905060008661058657600154610596565b600154610596906127109061098a565b90506127105b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639380576f6106057f00000000000000000000000000000000000000000000000000000000000000006105ff8a6305f5e10061091b565b90610996565b6040516001600160e01b031960e084901b16815260048101919091526024810187905260448101889052606481018d905260840160206040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190610aa2565b90506000896106a7578284111580156106a25750818410155b6106b7565b8284101580156106b75750818411155b9050801561077a5760006106cd8484878e6109a2565b905060006106dd8286898f610a1c565b90508b6106ed57888110156106f2565b888111155b6107355760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420737472696b6520707269636560601b60448201526064016101d4565b6107677f00000000000000000000000000000000000000000000000000000000000000006105ff836305f5e10061091b565b829a509a505050505050505050506107ac565b896107925760025461078d90869061097e565b6107a0565b6002546107a090869061098a565b9450819250505061059c565b9250929050565b6000546001600160a01b031633146107dd5760405162461bcd60e51b81526004016101d490610aed565b6001600160a01b0381166108425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101d4565b61084b8161092e565b50565b6000546001600160a01b031633146108785760405162461bcd60e51b81526004016101d490610aed565b600081116108b35760405162461bcd60e51b81526020600482015260086024820152670216e6577537465760c41b60448201526064016101d4565b6002546108e0827f000000000000000000000000000000000000000000000000000000000000000061091b565b600255604080518281526020810184905233917f08e332c6ae0c42d16506516b7ec987c8101ae8c5e930012ecd0c23142930518c91016102a7565b60006109278284610b4e565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006109278284610b22565b60006109278284610b6d565b60006109278284610b3a565b60008082156109e05760006109b7868661098a565b905060006109c5868961098a565b9050818111156109d557866109d7565b875b92505050610a11565b60006109ec878661098a565b905060006109fa868861098a565b905081811115610a0a5787610a0c565b865b925050505b90505b949350505050565b6000838514610a2c575081610a14565b81610a4457600254610a3f90849061098a565b610a11565b600254610a1190849061097e565b600060208284031215610a63578081fd5b813561092781610bc4565b600060208284031215610a7f578081fd5b815161092781610bc4565b600060208284031215610a9b578081fd5b5035919050565b600060208284031215610ab3578081fd5b5051919050565b60008060408385031215610acc578081fd5b8235915060208301358015158114610ae2578182fd5b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b3557610b35610b98565b500190565b600082610b4957610b49610bae565b500490565b6000816000190483118215151615610b6857610b68610b98565b500290565b600082821015610b7f57610b7f610b98565b500390565b600082610b9357610b93610bae565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461084b57600080fdfea26469706673582212201443c82f5078287ff9257c6b77c34a9b44efe298e74847dae4ddd6e44afe63e064736f6c63430008040033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getStrikePrice(uint256,bool)": {
            "params": {
              "expiryTimestamp": "is the unix timestamp of expiration",
              "isPut": "is whether option is put or call"
            },
            "returns": {
              "newDelta": "is the delta of the option given its parameters",
              "newStrikePrice": "is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)"
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "setDelta(uint256)": {
            "params": {
              "newDelta": "is the new delta value"
            }
          },
          "setStep(uint256)": {
            "params": {
              "newStep": "is the new step value"
            }
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:4018:65",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:65",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "74:117:65",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "84:22:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "99:6:65"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "93:5:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "93:13:65"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "84:5:65"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "169:16:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "178:1:65",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "181:1:65",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "171:6:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "171:12:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "171:12:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "128:5:65"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "139:5:65"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "154:3:65",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "159:1:65",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "150:3:65"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "150:11:65"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "163:1:65",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "146:3:65"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "146:19:65"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "135:3:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "135:31:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "125:2:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "125:42:65"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "118:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "118:50:65"
                          },
                          "nodeType": "YulIf",
                          "src": "115:2:65"
                        }
                      ]
                    },
                    "name": "abi_decode_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "53:6:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "64:5:65",
                        "type": ""
                      }
                    ],
                    "src": "14:177:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "277:137:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "323:26:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "332:6:65"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "340:6:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "325:6:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "325:22:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "325:22:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "298:7:65"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "307:9:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "294:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "294:23:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "319:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "290:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "290:32:65"
                          },
                          "nodeType": "YulIf",
                          "src": "287:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "358:50:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "398:9:65"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "368:29:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "368:40:65"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "358:6:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "243:9:65",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "254:7:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "266:6:65",
                        "type": ""
                      }
                    ],
                    "src": "196:218:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "534:225:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "580:26:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "589:6:65"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "597:6:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "582:6:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "582:22:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "582:22:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "555:7:65"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "564:9:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "551:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "551:23:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "576:2:65",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "547:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "547:32:65"
                          },
                          "nodeType": "YulIf",
                          "src": "544:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "615:50:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "655:9:65"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "625:29:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "625:40:65"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "615:6:65"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "674:35:65",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "694:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "705:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "690:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "690:18:65"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "684:5:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "684:25:65"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "674:6:65"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "718:35:65",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "738:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "749:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "734:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "734:18:65"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "728:5:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "728:25:65"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "718:6:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "484:9:65",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "495:7:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "507:6:65",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "515:6:65",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "523:6:65",
                        "type": ""
                      }
                    ],
                    "src": "419:340:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "845:113:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "891:26:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "900:6:65"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "908:6:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "893:6:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "893:22:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "893:22:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "866:7:65"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "875:9:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "862:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "862:23:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "887:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "858:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "858:32:65"
                          },
                          "nodeType": "YulIf",
                          "src": "855:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "926:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "942:9:65"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "936:5:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "936:16:65"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "926:6:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "811:9:65",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "822:7:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "834:6:65",
                        "type": ""
                      }
                    ],
                    "src": "764:194:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1137:156:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1154:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1165:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1147:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1147:21:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1147:21:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1188:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1199:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1184:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1184:18:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1204:1:65",
                                "type": "",
                                "value": "7"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1177:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1177:29:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1177:29:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1226:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1237:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1222:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1222:18:65"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1242:9:65",
                                "type": "",
                                "value": "!_delta"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1215:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1215:37:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1215:37:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1261:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1273:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1284:2:65",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1269:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1269:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1261:4:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b544d6e859456a0870588d41af66a582276e8e656aebb9f3ae5e7bd5d2c51cff__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1114:9:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1128:4:65",
                        "type": ""
                      }
                    ],
                    "src": "963:330:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1472:172:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1489:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1500:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1482:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1482:21:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1482:21:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1523:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1534:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1519:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1519:18:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1539:2:65",
                                "type": "",
                                "value": "22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1512:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1512:30:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1512:30:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1562:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1573:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1558:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1558:18:65"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1578:24:65",
                                "type": "",
                                "value": "!_optionsPremiumPricer"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1551:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1551:52:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1551:52:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1612:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1624:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1635:2:65",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1620:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1620:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1612:4:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b8a202ef5253a72380d63ff6e86599961ae76a9d06bae416994ef4518488f07d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1449:9:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1463:4:65",
                        "type": ""
                      }
                    ],
                    "src": "1298:346:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1823:155:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1840:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1851:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1833:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1833:21:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1833:21:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1874:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1885:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1870:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1870:18:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1890:1:65",
                                "type": "",
                                "value": "6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1863:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1863:29:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1863:29:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1912:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1923:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1908:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1908:18:65"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1928:8:65",
                                "type": "",
                                "value": "!_step"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1901:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1901:36:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1901:36:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1946:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1958:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1969:2:65",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1954:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1954:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1946:4:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_bb668b2d9a6986bdfa3cee1b8f8c9963f15011ad6bf3ee21453b6ef38d41acce__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1800:9:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1814:4:65",
                        "type": ""
                      }
                    ],
                    "src": "1649:329:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2157:180:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2174:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2185:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2167:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2167:21:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2167:21:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2208:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2219:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2204:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2204:18:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2224:2:65",
                                "type": "",
                                "value": "30"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2197:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2197:30:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2197:30:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2247:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2258:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2243:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2243:18:65"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2263:32:65",
                                "type": "",
                                "value": "newDelta cannot be more than 1"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2236:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2236:60:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2236:60:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2305:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2317:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2328:2:65",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2313:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2313:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2305:4:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f2a3067f84ba5ad3ad696d873652e7e74062725aef4bba0e74a26d8ab9a3c4be__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2134:9:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2148:4:65",
                        "type": ""
                      }
                    ],
                    "src": "1983:354:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2406:358:65",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2416:16:65",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2431:1:65",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "power_1",
                              "nodeType": "YulTypedName",
                              "src": "2420:7:65",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2441:16:65",
                          "value": {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "2450:7:65"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "2441:5:65"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2466:13:65",
                          "value": {
                            "name": "_base",
                            "nodeType": "YulIdentifier",
                            "src": "2474:5:65"
                          },
                          "variableNames": [
                            {
                              "name": "base",
                              "nodeType": "YulIdentifier",
                              "src": "2466:4:65"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2530:228:65",
                            "statements": [
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "2575:22:65",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nodeType": "YulIdentifier",
                                          "src": "2577:16:65"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2577:18:65"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "2577:18:65"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "2550:4:65"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2564:1:65",
                                              "type": "",
                                              "value": "0"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "2560:3:65"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2560:6:65"
                                        },
                                        {
                                          "name": "base",
                                          "nodeType": "YulIdentifier",
                                          "src": "2568:4:65"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "div",
                                        "nodeType": "YulIdentifier",
                                        "src": "2556:3:65"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2556:17:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "2547:2:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2547:27:65"
                                },
                                "nodeType": "YulIf",
                                "src": "2544:2:65"
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "2636:29:65",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2638:25:65",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "power",
                                            "nodeType": "YulIdentifier",
                                            "src": "2651:5:65"
                                          },
                                          {
                                            "name": "base",
                                            "nodeType": "YulIdentifier",
                                            "src": "2658:4:65"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nodeType": "YulIdentifier",
                                          "src": "2647:3:65"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2647:16:65"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "power",
                                          "nodeType": "YulIdentifier",
                                          "src": "2638:5:65"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "2617:8:65"
                                    },
                                    {
                                      "name": "power_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2627:7:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "2613:3:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2613:22:65"
                                },
                                "nodeType": "YulIf",
                                "src": "2610:2:65"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2678:23:65",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "2690:4:65"
                                    },
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "2696:4:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mul",
                                    "nodeType": "YulIdentifier",
                                    "src": "2686:3:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2686:15:65"
                                },
                                "variableNames": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "2678:4:65"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2714:34:65",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "power_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2730:7:65"
                                    },
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "2739:8:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2726:3:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2726:22:65"
                                },
                                "variableNames": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "2714:8:65"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "2499:8:65"
                              },
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "2509:7:65"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2496:2:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2496:21:65"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "2518:3:65",
                            "statements": []
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "2492:3:65",
                            "statements": []
                          },
                          "src": "2488:270:65"
                        }
                      ]
                    },
                    "name": "checked_exp_helper",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "_base",
                        "nodeType": "YulTypedName",
                        "src": "2370:5:65",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "2377:8:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "2390:5:65",
                        "type": ""
                      },
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "2397:4:65",
                        "type": ""
                      }
                    ],
                    "src": "2342:422:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2839:61:65",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2849:45:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "2879:4:65"
                              },
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "2885:8:65"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_unsigned",
                              "nodeType": "YulIdentifier",
                              "src": "2858:20:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2858:36:65"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "2849:5:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_t_uint256_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "2810:4:65",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "2816:8:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "2829:5:65",
                        "type": ""
                      }
                    ],
                    "src": "2769:131:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2964:747:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3002:52:65",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3016:10:65",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3025:1:65",
                                  "type": "",
                                  "value": "1"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "3016:5:65"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "3039:5:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "2984:8:65"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2977:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2977:16:65"
                          },
                          "nodeType": "YulIf",
                          "src": "2974:2:65"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3087:52:65",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3101:10:65",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3110:1:65",
                                  "type": "",
                                  "value": "0"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "3101:5:65"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "3124:5:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "3073:4:65"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3066:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3066:12:65"
                          },
                          "nodeType": "YulIf",
                          "src": "3063:2:65"
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3175:52:65",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3189:10:65",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3198:1:65",
                                      "type": "",
                                      "value": "1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "3189:5:65"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "3212:5:65"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "3168:59:65",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3173:1:65",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3243:123:65",
                                "statements": [
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "3278:22:65",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "panic_error_0x11",
                                              "nodeType": "YulIdentifier",
                                              "src": "3280:16:65"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3280:18:65"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "3280:18:65"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "3263:8:65"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3273:3:65",
                                          "type": "",
                                          "value": "255"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nodeType": "YulIdentifier",
                                        "src": "3260:2:65"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3260:17:65"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "3257:2:65"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3313:25:65",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "3326:8:65"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3336:1:65",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "3322:3:65"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3322:16:65"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "3313:5:65"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "3351:5:65"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "3236:130:65",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3241:1:65",
                                "type": "",
                                "value": "2"
                              }
                            }
                          ],
                          "expression": {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "3155:4:65"
                          },
                          "nodeType": "YulSwitch",
                          "src": "3148:218:65"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3464:70:65",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3478:28:65",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "3491:4:65"
                                    },
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "3497:8:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "exp",
                                    "nodeType": "YulIdentifier",
                                    "src": "3487:3:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3487:19:65"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "3478:5:65"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "3519:5:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "3388:4:65"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3394:2:65",
                                        "type": "",
                                        "value": "11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "3385:2:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3385:12:65"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "3402:8:65"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3412:2:65",
                                        "type": "",
                                        "value": "78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "3399:2:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3399:16:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3381:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3381:35:65"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "3425:4:65"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3431:3:65",
                                        "type": "",
                                        "value": "307"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "3422:2:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3422:13:65"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "3440:8:65"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3450:2:65",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "3437:2:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3437:16:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3418:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3418:36:65"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "3378:2:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3378:77:65"
                          },
                          "nodeType": "YulIf",
                          "src": "3375:2:65"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3543:57:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "3585:4:65"
                              },
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "3591:8:65"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_helper",
                              "nodeType": "YulIdentifier",
                              "src": "3566:18:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3566:34:65"
                          },
                          "variables": [
                            {
                              "name": "power_1",
                              "nodeType": "YulTypedName",
                              "src": "3547:7:65",
                              "type": ""
                            },
                            {
                              "name": "base_1",
                              "nodeType": "YulTypedName",
                              "src": "3556:6:65",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3645:22:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "3647:16:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3647:18:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3647:18:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "3615:7:65"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3632:1:65",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "3628:3:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3628:6:65"
                                  },
                                  {
                                    "name": "base_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3636:6:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "3624:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3624:19:65"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3612:2:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3612:32:65"
                          },
                          "nodeType": "YulIf",
                          "src": "3609:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3676:29:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "3689:7:65"
                              },
                              {
                                "name": "base_1",
                                "nodeType": "YulIdentifier",
                                "src": "3698:6:65"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "3685:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3685:20:65"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "3676:5:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_unsigned",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "2935:4:65",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "2941:8:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "2954:5:65",
                        "type": ""
                      }
                    ],
                    "src": "2905:806:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3768:116:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3827:22:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "3829:16:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3829:18:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3829:18:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "3799:1:65"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "3792:6:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3792:9:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3785:6:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3785:17:65"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "3807:1:65"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3818:1:65",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "3814:3:65"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3814:6:65"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "3822:1:65"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "3810:3:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3810:14:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3804:2:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3804:21:65"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3781:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3781:45:65"
                          },
                          "nodeType": "YulIf",
                          "src": "3778:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3858:20:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "3873:1:65"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "3876:1:65"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "3869:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3869:9:65"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "3858:7:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "3747:1:65",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "3750:1:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "3756:7:65",
                        "type": ""
                      }
                    ],
                    "src": "3716:168:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3921:95:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3938:1:65",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3945:3:65",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3950:10:65",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "3941:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3941:20:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3931:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3931:31:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3931:31:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3978:1:65",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3981:4:65",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3971:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3971:15:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3971:15:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4002:1:65",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4005:4:65",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "3995:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3995:15:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3995:15:65"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3889:127:65"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value1, value1) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_b544d6e859456a0870588d41af66a582276e8e656aebb9f3ae5e7bd5d2c51cff__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 7)\n        mstore(add(headStart, 64), \"!_delta\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b8a202ef5253a72380d63ff6e86599961ae76a9d06bae416994ef4518488f07d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"!_optionsPremiumPricer\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_bb668b2d9a6986bdfa3cee1b8f8c9963f15011ad6bf3ee21453b6ef38d41acce__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 6)\n        mstore(add(headStart, 64), \"!_step\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f2a3067f84ba5ad3ad696d873652e7e74062725aef4bba0e74a26d8ab9a3c4be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"newDelta cannot be more than 1\")\n        tail := add(headStart, 96)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
              "id": 65,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60e06040523480156200001157600080fd5b50604051620011db380380620011db8339810160408190526200003491620003e0565b6200003f336200033f565b6001600160a01b0383166200009b5760405162461bcd60e51b815260206004820152601660248201527f215f6f7074696f6e735072656d69756d5072696365720000000000000000000060448201526064015b60405180910390fd5b60008211620000d75760405162461bcd60e51b8152602060048201526007602482015266215f64656c746160c81b604482015260640162000092565b6127108211156200012b5760405162461bcd60e51b815260206004820152601e60248201527f6e657744656c74612063616e6e6f74206265206d6f7265207468616e20310000604482015260640162000092565b60008111620001665760405162461bcd60e51b81526020600482015260066024820152650215f737465760d41b604482015260640162000092565b826001600160a01b03166080816001600160a01b031660601b81525050826001600160a01b03166355b13a4f6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001bd57600080fd5b505afa158015620001d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f89190620003c3565b6001600160a01b031660a0816001600160a01b031660601b81525050816001819055506000836001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200025757600080fd5b505afa1580156200026c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002929190620003c3565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620002cb57600080fd5b505afa158015620002e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000306919062000417565b6200031390600a62000479565b90506200032f81836200038f60201b6200091b1790919060201c565b60025560c052506200056d915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006200039d828462000535565b90505b92915050565b80516001600160a01b0381168114620003be57600080fd5b919050565b600060208284031215620003d5578081fd5b6200039d82620003a6565b600080600060608486031215620003f5578182fd5b6200040084620003a6565b925060208401519150604084015190509250925092565b60006020828403121562000429578081fd5b5051919050565b600181815b808511156200047157816000190482111562000455576200045562000557565b808516156200046357918102915b93841c939080029062000435565b509250929050565b60006200039d83836000826200049257506001620003a0565b81620004a157506000620003a0565b8160018114620004ba5760028114620004c557620004e5565b6001915050620003a0565b60ff841115620004d957620004d962000557565b50506001821b620003a0565b5060208310610133831016604e8410600b84101617156200050a575081810a620003a0565b62000516838362000430565b80600019048211156200052d576200052d62000557565b029392505050565b600081600019048311821515161562000552576200055262000557565b500290565b634e487b7160e01b600052601160045260246000fd5b60805160601c60a05160601c60c051610c0f620005cc600039600081816105d20152818161073a01526108bc01526000818160d901526103dd0152600081816101310152818161033f0152818161040c01526105a80152610c0f6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063afa6626411610066578063afa662641461012c578063e25fe17514610153578063e436b8911461015c578063f2fde38b14610184578063f8dcbddb1461019757600080fd5b8063025ff0a5146100a357806312b495a8146100b857806355b13a4f146100d4578063715018a6146101135780638da5cb5b1461011b575b600080fd5b6100b66100b1366004610a8a565b6101aa565b005b6100c160015481565b6040519081526020015b60405180910390f35b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100cb565b6100b66102b3565b6000546001600160a01b03166100fb565b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6100c160025481565b61016f61016a366004610aba565b6102e9565b604080519283526020830191909152016100cb565b6100b6610192366004610a52565b6107b3565b6100b66101a5366004610a8a565b61084e565b6000546001600160a01b031633146101dd5760405162461bcd60e51b81526004016101d490610aed565b60405180910390fd5b600081116102195760405162461bcd60e51b8152602060048201526009602482015268216e657744656c746160b81b60448201526064016101d4565b61271081111561026b5760405162461bcd60e51b815260206004820152601e60248201527f6e657744656c74612063616e6e6f74206265206d6f7265207468616e2031000060448201526064016101d4565b6001805490829055604080518281526020810184905233917f760f0242cb96fbbbd0cf6647501a2763dfd1ee22287ca1a688cb1d5f1ca6026d91015b60405180910390a25050565b6000546001600160a01b031633146102dd5760405162461bcd60e51b81526004016101d490610aed565b6102e7600061092e565b565b60008042841161033b5760405162461bcd60e51b815260206004820152601d60248201527f457870697279206d75737420626520696e20746865206675747572652100000060448201526064016101d4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468f02d26040518163ffffffff1660e01b815260040160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610aa2565b905060006105186402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663950ed82c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190610a6e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156104da57600080fd5b505afa1580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190610aa2565b9061091b565b90506000856105545760025461054f906105496105358287610b84565b6002546105429190610b6d565b869061097e565b9061097e565b610575565b6002546105759061056f6105688287610b84565b869061098a565b9061098a565b905060008661058657600154610596565b600154610596906127109061098a565b90506127105b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639380576f6106057f00000000000000000000000000000000000000000000000000000000000000006105ff8a6305f5e10061091b565b90610996565b6040516001600160e01b031960e084901b16815260048101919091526024810187905260448101889052606481018d905260840160206040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190610aa2565b90506000896106a7578284111580156106a25750818410155b6106b7565b8284101580156106b75750818411155b9050801561077a5760006106cd8484878e6109a2565b905060006106dd8286898f610a1c565b90508b6106ed57888110156106f2565b888111155b6107355760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420737472696b6520707269636560601b60448201526064016101d4565b6107677f00000000000000000000000000000000000000000000000000000000000000006105ff836305f5e10061091b565b829a509a505050505050505050506107ac565b896107925760025461078d90869061097e565b6107a0565b6002546107a090869061098a565b9450819250505061059c565b9250929050565b6000546001600160a01b031633146107dd5760405162461bcd60e51b81526004016101d490610aed565b6001600160a01b0381166108425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101d4565b61084b8161092e565b50565b6000546001600160a01b031633146108785760405162461bcd60e51b81526004016101d490610aed565b600081116108b35760405162461bcd60e51b81526020600482015260086024820152670216e6577537465760c41b60448201526064016101d4565b6002546108e0827f000000000000000000000000000000000000000000000000000000000000000061091b565b600255604080518281526020810184905233917f08e332c6ae0c42d16506516b7ec987c8101ae8c5e930012ecd0c23142930518c91016102a7565b60006109278284610b4e565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006109278284610b22565b60006109278284610b6d565b60006109278284610b3a565b60008082156109e05760006109b7868661098a565b905060006109c5868961098a565b9050818111156109d557866109d7565b875b92505050610a11565b60006109ec878661098a565b905060006109fa868861098a565b905081811115610a0a5787610a0c565b865b925050505b90505b949350505050565b6000838514610a2c575081610a14565b81610a4457600254610a3f90849061098a565b610a11565b600254610a1190849061097e565b600060208284031215610a63578081fd5b813561092781610bc4565b600060208284031215610a7f578081fd5b815161092781610bc4565b600060208284031215610a9b578081fd5b5035919050565b600060208284031215610ab3578081fd5b5051919050565b60008060408385031215610acc578081fd5b8235915060208301358015158114610ae2578182fd5b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b3557610b35610b98565b500190565b600082610b4957610b49610bae565b500490565b6000816000190483118215151615610b6857610b68610b98565b500290565b600082821015610b7f57610b7f610b98565b500390565b600082610b9357610b93610bae565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461084b57600080fdfea26469706673582212201443c82f5078287ff9257c6b77c34a9b44efe298e74847dae4ddd6e44afe63e064736f6c63430008040033",
          "opcodes": "PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x11DB CODESIZE SUB DUP1 PUSH3 0x11DB DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x3E0 JUMP JUMPDEST PUSH3 0x3F CALLER PUSH3 0x33F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH3 0x9B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x215F6F7074696F6E735072656D69756D50726963657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 GT PUSH3 0xD7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x215F64656C7461 PUSH1 0xC8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x92 JUMP JUMPDEST PUSH2 0x2710 DUP3 GT ISZERO PUSH3 0x12B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E657744656C74612063616E6E6F74206265206D6F7265207468616E20310000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x92 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH3 0x166 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x215F7374657 PUSH1 0xD4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x92 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x55B13A4F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x1F8 SWAP2 SWAP1 PUSH3 0x3C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2630C12F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x26C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x292 SWAP2 SWAP1 PUSH3 0x3C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x2CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x2E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x306 SWAP2 SWAP1 PUSH3 0x417 JUMP JUMPDEST PUSH3 0x313 SWAP1 PUSH1 0xA PUSH3 0x479 JUMP JUMPDEST SWAP1 POP PUSH3 0x32F DUP2 DUP4 PUSH3 0x38F PUSH1 0x20 SHL PUSH3 0x91B OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0xC0 MSTORE POP PUSH3 0x56D SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x39D DUP3 DUP5 PUSH3 0x535 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x3D5 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x39D DUP3 PUSH3 0x3A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x3F5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x400 DUP5 PUSH3 0x3A6 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x429 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 0x471 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x455 JUMPI PUSH3 0x455 PUSH3 0x557 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 0x463 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 0x435 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x39D DUP4 DUP4 PUSH1 0x0 DUP3 PUSH3 0x492 JUMPI POP PUSH1 0x1 PUSH3 0x3A0 JUMP JUMPDEST DUP2 PUSH3 0x4A1 JUMPI POP PUSH1 0x0 PUSH3 0x3A0 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x4BA JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x4C5 JUMPI PUSH3 0x4E5 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x3A0 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x4D9 JUMPI PUSH3 0x4D9 PUSH3 0x557 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH3 0x3A0 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x50A JUMPI POP DUP2 DUP2 EXP PUSH3 0x3A0 JUMP JUMPDEST PUSH3 0x516 DUP4 DUP4 PUSH3 0x430 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x52D JUMPI PUSH3 0x52D PUSH3 0x557 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x552 JUMPI PUSH3 0x552 PUSH3 0x557 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH2 0xC0F PUSH3 0x5CC PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x5D2 ADD MSTORE DUP2 DUP2 PUSH2 0x73A ADD MSTORE PUSH2 0x8BC ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH1 0xD9 ADD MSTORE PUSH2 0x3DD ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x131 ADD MSTORE DUP2 DUP2 PUSH2 0x33F ADD MSTORE DUP2 DUP2 PUSH2 0x40C ADD MSTORE PUSH2 0x5A8 ADD MSTORE PUSH2 0xC0F PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFA66264 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xAFA66264 EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0xE25FE175 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0xE436B891 EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0xF8DCBDDB EQ PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x25FF0A5 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x12B495A8 EQ PUSH2 0xB8 JUMPI DUP1 PUSH4 0x55B13A4F EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x11B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0xB1 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x1AA JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC1 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFB PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCB JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2B3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFB JUMP JUMPDEST PUSH2 0xFB PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xC1 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0xABA JUMP JUMPDEST PUSH2 0x2E9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0xCB JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0xA52 JUMP JUMPDEST PUSH2 0x7B3 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x1A5 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x84E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP1 PUSH2 0xAED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x219 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x216E657744656C7461 PUSH1 0xB8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D4 JUMP JUMPDEST PUSH2 0x2710 DUP2 GT ISZERO PUSH2 0x26B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E657744656C74612063616E6E6F74206265206D6F7265207468616E20310000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D4 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x760F0242CB96FBBBD0CF6647501A2763DFD1EE22287CA1A688CB1D5F1CA6026D SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP1 PUSH2 0xAED JUMP JUMPDEST PUSH2 0x2E7 PUSH1 0x0 PUSH2 0x92E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 TIMESTAMP DUP5 GT PUSH2 0x33B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x457870697279206D75737420626520696E207468652066757475726521000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D4 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x468F02D2 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x396 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3CE SWAP2 SWAP1 PUSH2 0xAA2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x518 PUSH5 0x2540BE400 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x950ED82C PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x16F0115B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x477 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49B SWAP2 SWAP1 PUSH2 0xA6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x512 SWAP2 SWAP1 PUSH2 0xAA2 JUMP JUMPDEST SWAP1 PUSH2 0x91B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH2 0x554 JUMPI PUSH1 0x2 SLOAD PUSH2 0x54F SWAP1 PUSH2 0x549 PUSH2 0x535 DUP3 DUP8 PUSH2 0xB84 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x542 SWAP2 SWAP1 PUSH2 0xB6D JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x97E JUMP JUMPDEST SWAP1 PUSH2 0x97E JUMP JUMPDEST PUSH2 0x575 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x575 SWAP1 PUSH2 0x56F PUSH2 0x568 DUP3 DUP8 PUSH2 0xB84 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x98A JUMP JUMPDEST SWAP1 PUSH2 0x98A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 PUSH2 0x586 JUMPI PUSH1 0x1 SLOAD PUSH2 0x596 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x596 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x98A JUMP JUMPDEST SWAP1 POP PUSH2 0x2710 JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH4 0x9380576F PUSH2 0x605 PUSH32 0x0 PUSH2 0x5FF DUP11 PUSH4 0x5F5E100 PUSH2 0x91B JUMP JUMPDEST SWAP1 PUSH2 0x996 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP14 SWAP1 MSTORE PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x665 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x689 SWAP2 SWAP1 PUSH2 0xAA2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP10 PUSH2 0x6A7 JUMPI DUP3 DUP5 GT ISZERO DUP1 ISZERO PUSH2 0x6A2 JUMPI POP DUP2 DUP5 LT ISZERO JUMPDEST PUSH2 0x6B7 JUMP JUMPDEST DUP3 DUP5 LT ISZERO DUP1 ISZERO PUSH2 0x6B7 JUMPI POP DUP2 DUP5 GT ISZERO JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x77A JUMPI PUSH1 0x0 PUSH2 0x6CD DUP5 DUP5 DUP8 DUP15 PUSH2 0x9A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6DD DUP3 DUP7 DUP10 DUP16 PUSH2 0xA1C JUMP JUMPDEST SWAP1 POP DUP12 PUSH2 0x6ED JUMPI DUP9 DUP2 LT ISZERO PUSH2 0x6F2 JUMP JUMPDEST DUP9 DUP2 GT ISZERO JUMPDEST PUSH2 0x735 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E76616C696420737472696B65207072696365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D4 JUMP JUMPDEST PUSH2 0x767 PUSH32 0x0 PUSH2 0x5FF DUP4 PUSH4 0x5F5E100 PUSH2 0x91B JUMP JUMPDEST DUP3 SWAP11 POP SWAP11 POP POP POP POP POP POP POP POP POP POP PUSH2 0x7AC JUMP JUMPDEST DUP10 PUSH2 0x792 JUMPI PUSH1 0x2 SLOAD PUSH2 0x78D SWAP1 DUP7 SWAP1 PUSH2 0x97E JUMP JUMPDEST PUSH2 0x7A0 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x7A0 SWAP1 DUP7 SWAP1 PUSH2 0x98A JUMP JUMPDEST SWAP5 POP DUP2 SWAP3 POP POP POP PUSH2 0x59C JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP1 PUSH2 0xAED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1D4 JUMP JUMPDEST PUSH2 0x84B DUP2 PUSH2 0x92E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x878 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP1 PUSH2 0xAED JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x8B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x216E65775374657 PUSH1 0xC4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D4 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x8E0 DUP3 PUSH32 0x0 PUSH2 0x91B JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x8E332C6AE0C42D16506516B7EC987C8101AE8C5E930012ECD0C23142930518C SWAP2 ADD PUSH2 0x2A7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x927 DUP3 DUP5 PUSH2 0xB4E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x927 DUP3 DUP5 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x927 DUP3 DUP5 PUSH2 0xB6D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x927 DUP3 DUP5 PUSH2 0xB3A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 PUSH2 0x9B7 DUP7 DUP7 PUSH2 0x98A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9C5 DUP7 DUP10 PUSH2 0x98A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x9D5 JUMPI DUP7 PUSH2 0x9D7 JUMP JUMPDEST DUP8 JUMPDEST SWAP3 POP POP POP PUSH2 0xA11 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9EC DUP8 DUP7 PUSH2 0x98A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9FA DUP7 DUP9 PUSH2 0x98A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xA0A JUMPI DUP8 PUSH2 0xA0C JUMP JUMPDEST DUP7 JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP6 EQ PUSH2 0xA2C JUMPI POP DUP2 PUSH2 0xA14 JUMP JUMPDEST DUP2 PUSH2 0xA44 JUMPI PUSH1 0x2 SLOAD PUSH2 0xA3F SWAP1 DUP5 SWAP1 PUSH2 0x98A JUMP JUMPDEST PUSH2 0xA11 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0xA11 SWAP1 DUP5 SWAP1 PUSH2 0x97E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA63 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x927 DUP2 PUSH2 0xBC4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA7F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x927 DUP2 PUSH2 0xBC4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA9B JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAB3 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xACC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xAE2 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xB35 JUMPI PUSH2 0xB35 PUSH2 0xB98 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB49 JUMPI PUSH2 0xB49 PUSH2 0xBAE JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xB68 JUMPI PUSH2 0xB68 PUSH2 0xB98 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xB7F JUMPI PUSH2 0xB7F PUSH2 0xB98 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB93 JUMPI PUSH2 0xB93 PUSH2 0xBAE JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x84B JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ NUMBER 0xC8 0x2F POP PUSH25 0x287FF9257C6B77C34A9B44EFE298E74847DAE4DDD6E44AFE63 0xE0 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
          "sourceMap": "496:7813:50:-:0;;;1504:970;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;867:23:7;666:10:13;867:9:7;:23::i;:::-;-1:-1:-1;;;;;1626:35:50;;1618:70;;;;-1:-1:-1;;;1618:70:50;;1500:2:65;1618:70:50;;;1482:21:65;1539:2;1519:18;;;1512:30;1578:24;1558:18;;;1551:52;1620:18;;1618:70:50;;;;;;;;;1715:1;1706:6;:10;1698:30;;;;-1:-1:-1;;;1698:30:50;;1165:2:65;1698:30:50;;;1147:21:65;1204:1;1184:18;;;1177:29;-1:-1:-1;;;1222:18:65;;;1215:37;1269:18;;1698:30:50;1137:156:65;1698:30:50;1201:5;1746:6;:26;;1738:69;;;;-1:-1:-1;;;1738:69:50;;2185:2:65;1738:69:50;;;2167:21:65;2224:2;2204:18;;;2197:30;2263:32;2243:18;;;2236:60;2313:18;;1738:69:50;2157:180:65;1738:69:50;1833:1;1825:5;:9;1817:28;;;;-1:-1:-1;;;1817:28:50;;1851:2:65;1817:28:50;;;1833:21:65;1890:1;1870:18;;;1863:29;-1:-1:-1;;;1908:18:65;;;1901:36;1954:18;;1817:28:50;1823:155:65;1817:28:50;1900:21;-1:-1:-1;;;;;1855:67:50;;;-1:-1:-1;;;;;1855:67:50;;;;;;;2004:21;-1:-1:-1;;;;;1982:61:50;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1932:123:50;;;-1:-1:-1;;;;;1932:123:50;;;;;;;2107:6;2099:5;:14;;;;2123:30;2246:21;-1:-1:-1;;;;;2224:56:50;;:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2190:140:50;;:142;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2168:164;;:2;:164;:::i;:::-;2123:209;;2377:33;2387:22;2377:5;:9;;;;;;:33;;;;:::i;:::-;2370:4;:40;2421:46;;-1:-1:-1;496:7813:50;;-1:-1:-1;;496:7813:50;2041:169:7;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:7;;;-1:-1:-1;;;;;;2131:17:7;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2041:169;;:::o;3382:96:15:-;3440:7;3466:5;3470:1;3466;:5;:::i;:::-;3459:12;;3382:96;;;;;:::o;14:177:65:-;93:13;;-1:-1:-1;;;;;135:31:65;;125:42;;115:2;;181:1;178;171:12;115:2;74:117;;;:::o;196:218::-;266:6;319:2;307:9;298:7;294:23;290:32;287:2;;;340:6;332;325:22;287:2;368:40;398:9;368:40;:::i;419:340::-;507:6;515;523;576:2;564:9;555:7;551:23;547:32;544:2;;;597:6;589;582:22;544:2;625:40;655:9;625:40;:::i;:::-;615:50;;705:2;694:9;690:18;684:25;674:35;;749:2;738:9;734:18;728:25;718:35;;534:225;;;;;:::o;764:194::-;834:6;887:2;875:9;866:7;862:23;858:32;855:2;;;908:6;900;893:22;855:2;-1:-1:-1;936:16:65;;845:113;-1:-1:-1;845:113:65:o;2342:422::-;2431:1;2474:5;2431:1;2488:270;2509:7;2499:8;2496:21;2488:270;;;2568:4;2564:1;2560:6;2556:17;2550:4;2547:27;2544:2;;;2577:18;;:::i;:::-;2627:7;2617:8;2613:22;2610:2;;;2647:16;;;;2610:2;2726:22;;;;2686:15;;;;2488:270;;;2492:3;2406:358;;;;;:::o;2769:131::-;2829:5;2858:36;2885:8;2879:4;2954:5;2984:8;2974:2;;-1:-1:-1;3025:1:65;3039:5;;2974:2;3073:4;3063:2;;-1:-1:-1;3110:1:65;3124:5;;3063:2;3155:4;3173:1;3168:59;;;;3241:1;3236:130;;;;3148:218;;3168:59;3198:1;3189:10;;3212:5;;;3236:130;3273:3;3263:8;3260:17;3257:2;;;3280:18;;:::i;:::-;-1:-1:-1;;3336:1:65;3322:16;;3351:5;;3148:218;;3450:2;3440:8;3437:16;3431:3;3425:4;3422:13;3418:36;3412:2;3402:8;3399:16;3394:2;3388:4;3385:12;3381:35;3378:77;3375:2;;;-1:-1:-1;3487:19:65;;;3519:5;;3375:2;3566:34;3591:8;3585:4;3566:34;:::i;:::-;3636:6;3632:1;3628:6;3624:19;3615:7;3612:32;3609:2;;;3647:18;;:::i;:::-;3685:20;;2964:747;-1:-1:-1;;;2964:747:65:o;3716:168::-;3756:7;3822:1;3818;3814:6;3810:14;3807:1;3804:21;3799:1;3792:9;3785:17;3781:45;3778:2;;;3829:18;;:::i;:::-;-1:-1:-1;3869:9:65;;3768:116::o;3889:127::-;3950:10;3945:3;3941:20;3938:1;3931:31;3981:4;3978:1;3971:15;4005:4;4002:1;3995:15;3921:95;496:7813:50;;;;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:6395:65",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:65",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "84:187:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "130:26:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "139:6:65"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "147:6:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "132:6:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "132:22:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "132:22:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "105:7:65"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "114:9:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "101:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "101:23:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "126:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "97:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "97:32:65"
                          },
                          "nodeType": "YulIf",
                          "src": "94:2:65"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "165:36:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "191:9:65"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "178:12:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "178:23:65"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "169:5:65",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "235:5:65"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "210:24:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "210:31:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "210:31:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "250:15:65",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "260:5:65"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "250:6:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "50:9:65",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "61:7:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "73:6:65",
                        "type": ""
                      }
                    ],
                    "src": "14:257:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "357:180:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "403:26:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "412:6:65"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "420:6:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "405:6:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "405:22:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "405:22:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "378:7:65"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "387:9:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "374:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "374:23:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "399:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "370:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "370:32:65"
                          },
                          "nodeType": "YulIf",
                          "src": "367:2:65"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "438:29:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "457:9:65"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "451:5:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "451:16:65"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "442:5:65",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "501:5:65"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "476:24:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "476:31:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "476:31:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "516:15:65",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "526:5:65"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "516:6:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "323:9:65",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "334:7:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "346:6:65",
                        "type": ""
                      }
                    ],
                    "src": "276:261:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "612:120:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "658:26:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "667:6:65"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "675:6:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "660:6:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "660:22:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "660:22:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "633:7:65"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "642:9:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "629:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "629:23:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "654:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "625:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "625:32:65"
                          },
                          "nodeType": "YulIf",
                          "src": "622:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "693:33:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "716:9:65"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "703:12:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "703:23:65"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "693:6:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "578:9:65",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "589:7:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "601:6:65",
                        "type": ""
                      }
                    ],
                    "src": "542:190:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "818:113:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "864:26:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "873:6:65"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "881:6:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "866:6:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "866:22:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "866:22:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "839:7:65"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "848:9:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "835:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "835:23:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "860:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "831:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "831:32:65"
                          },
                          "nodeType": "YulIf",
                          "src": "828:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "899:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "915:9:65"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "909:5:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "909:16:65"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "899:6:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "784:9:65",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "795:7:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "807:6:65",
                        "type": ""
                      }
                    ],
                    "src": "737:194:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1020:277:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1066:26:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1075:6:65"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1083:6:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1068:6:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1068:22:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1068:22:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1041:7:65"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1050:9:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1037:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1037:23:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1062:2:65",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1033:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1033:32:65"
                          },
                          "nodeType": "YulIf",
                          "src": "1030:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1101:33:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1124:9:65"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1111:12:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1111:23:65"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1101:6:65"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1143:45:65",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1173:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1184:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1169:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1169:18:65"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1156:12:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1156:32:65"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1147:5:65",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1241:26:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1250:6:65"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1258:6:65"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1243:6:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1243:22:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1243:22:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1210:5:65"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "1231:5:65"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "1224:6:65"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1224:13:65"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "1217:6:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1217:21:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1207:2:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1207:32:65"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1200:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1200:40:65"
                          },
                          "nodeType": "YulIf",
                          "src": "1197:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1276:15:65",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1286:5:65"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1276:6:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "978:9:65",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "989:7:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1001:6:65",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1009:6:65",
                        "type": ""
                      }
                    ],
                    "src": "936:361:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1403:102:65",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1413:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1425:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1436:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1421:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1421:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1413:4:65"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1455:9:65"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1470:6:65"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1486:3:65",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1491:1:65",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1482:3:65"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1482:11:65"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1495:1:65",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1478:3:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1478:19:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1466:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1466:32:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1448:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1448:51:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1448:51:65"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1372:9:65",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1383:6:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1394:4:65",
                        "type": ""
                      }
                    ],
                    "src": "1302:203:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1641:102:65",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1651:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1663:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1674:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1659:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1659:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1651:4:65"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1693:9:65"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1708:6:65"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1724:3:65",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1729:1:65",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1720:3:65"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1720:11:65"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1733:1:65",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1716:3:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1716:19:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1704:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1704:32:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1686:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1686:51:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1686:51:65"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IOptionsPremiumPricer_$3169__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1610:9:65",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1621:6:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1632:4:65",
                        "type": ""
                      }
                    ],
                    "src": "1510:233:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1875:102:65",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1885:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1897:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1908:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1893:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1893:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1885:4:65"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1927:9:65"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1942:6:65"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1958:3:65",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1963:1:65",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1954:3:65"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1954:11:65"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1967:1:65",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1950:3:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1950:19:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1938:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1938:32:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1920:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1920:51:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1920:51:65"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IVolatilityOracle_$2686__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1844:9:65",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1855:6:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1866:4:65",
                        "type": ""
                      }
                    ],
                    "src": "1748:229:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2156:157:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2173:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2184:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2166:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2166:21:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2166:21:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2207:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2218:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2203:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2203:18:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2223:1:65",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2196:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2196:29:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2196:29:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2245:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2256:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2241:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2241:18:65"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2261:10:65",
                                "type": "",
                                "value": "!newStep"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2234:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2234:38:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2234:38:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2281:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2293:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2304:2:65",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2289:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2289:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2281:4:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_02896e7ad7f074c4392d166c569aef4981690a00f04408f97e4e6e4072a37545__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2133:9:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2147:4:65",
                        "type": ""
                      }
                    ],
                    "src": "1982:331:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2492:228:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2509:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2520:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2502:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2502:21:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2502:21:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2543:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2554:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2539:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2539:18:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2559:2:65",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2532:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2532:30:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2532:30:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2582:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2593:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2578:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2578:18:65"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2598:34:65",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2571:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2571:62:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2571:62:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2653:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2664:2:65",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2649:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2649:18:65"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2669:8:65",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2642:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2642:36:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2642:36:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2687:27:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2699:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2710:3:65",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2695:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2695:19:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2687:4:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2469:9:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2483:4:65",
                        "type": ""
                      }
                    ],
                    "src": "2318:402:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2899:182:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2916:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2927:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2909:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2909:21:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2909:21:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2950:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2961:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2946:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2946:18:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2966:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2939:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2939:30:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2939:30:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2989:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3000:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2985:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2985:18:65"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3005:34:65",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2978:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2978:62:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2978:62:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3049:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3061:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3072:2:65",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3057:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3057:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3049:4:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2876:9:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2890:4:65",
                        "type": ""
                      }
                    ],
                    "src": "2725:356:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3260:170:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3277:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3288:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3270:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3270:21:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3270:21:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3311:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3322:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3307:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3307:18:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3327:2:65",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3300:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3300:30:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3300:30:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3350:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3361:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3346:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3346:18:65"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3366:22:65",
                                "type": "",
                                "value": "Invalid strike price"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3339:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3339:50:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3339:50:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3398:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3410:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3421:2:65",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3406:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3406:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3398:4:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_acda14d1a86d27b6218c3fd52dfac3567ae736804884ebaf055a8af7a05f1e63__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3237:9:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3251:4:65",
                        "type": ""
                      }
                    ],
                    "src": "3086:344:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3609:179:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3626:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3637:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3619:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3619:21:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3619:21:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3660:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3671:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3656:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3656:18:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3676:2:65",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3649:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3649:30:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3649:30:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3699:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3710:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3695:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3695:18:65"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3715:31:65",
                                "type": "",
                                "value": "Expiry must be in the future!"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3688:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3688:59:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3688:59:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3756:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3768:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3779:2:65",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3764:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3764:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3756:4:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_bc5cbd1c6f8907714072c2739978cbc7ac0a6ef9f3b263faefad4784bca9ceee__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3586:9:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3600:4:65",
                        "type": ""
                      }
                    ],
                    "src": "3435:353:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3967:158:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3984:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3995:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3977:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3977:21:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3977:21:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4018:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4029:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4014:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4014:18:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4034:1:65",
                                "type": "",
                                "value": "9"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4007:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4007:29:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4007:29:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4056:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4067:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4052:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4052:18:65"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4072:11:65",
                                "type": "",
                                "value": "!newDelta"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4045:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4045:39:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4045:39:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4093:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4105:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4116:2:65",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4101:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4101:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4093:4:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_dd80565814d0abe461940f5c787a31f0f8b350a08ce19c096d47f0e9906051e4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3944:9:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3958:4:65",
                        "type": ""
                      }
                    ],
                    "src": "3793:332:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4304:180:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4321:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4332:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4314:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4314:21:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4314:21:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4355:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4366:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4351:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4351:18:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4371:2:65",
                                "type": "",
                                "value": "30"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4344:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4344:30:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4344:30:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4394:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4405:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4390:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4390:18:65"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4410:32:65",
                                "type": "",
                                "value": "newDelta cannot be more than 1"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4383:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4383:60:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4383:60:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4452:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4464:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4475:2:65",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4460:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4460:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4452:4:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f2a3067f84ba5ad3ad696d873652e7e74062725aef4bba0e74a26d8ab9a3c4be__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4281:9:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4295:4:65",
                        "type": ""
                      }
                    ],
                    "src": "4130:354:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4590:76:65",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4600:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4612:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4623:2:65",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4608:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4608:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4600:4:65"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4642:9:65"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4653:6:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4635:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4635:25:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4635:25:65"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4559:9:65",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4570:6:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4581:4:65",
                        "type": ""
                      }
                    ],
                    "src": "4489:177:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4800:119:65",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4810:26:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4822:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4833:2:65",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4818:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4818:18:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4810:4:65"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4852:9:65"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4863:6:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4845:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4845:25:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4845:25:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4890:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4901:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4886:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4886:18:65"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "4906:6:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4879:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4879:34:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4879:34:65"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4761:9:65",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4772:6:65",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4780:6:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4791:4:65",
                        "type": ""
                      }
                    ],
                    "src": "4671:248:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5109:206:65",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5119:27:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5131:9:65"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5142:3:65",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5127:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5127:19:65"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5119:4:65"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5162:9:65"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5173:6:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5155:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5155:25:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5155:25:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5200:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5211:2:65",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5196:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5196:18:65"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "5216:6:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5189:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5189:34:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5189:34:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5243:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5254:2:65",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5239:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5239:18:65"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "5259:6:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5232:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5232:34:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5232:34:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5286:9:65"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5297:2:65",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5282:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5282:18:65"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "5302:6:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5275:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5275:34:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5275:34:65"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5054:9:65",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "5065:6:65",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5073:6:65",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5081:6:65",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5089:6:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5100:4:65",
                        "type": ""
                      }
                    ],
                    "src": "4924:391:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5368:80:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5395:22:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "5397:16:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5397:18:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5397:18:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "5384:1:65"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "5391:1:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "5387:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5387:6:65"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5381:2:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5381:13:65"
                          },
                          "nodeType": "YulIf",
                          "src": "5378:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5426:16:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "5437:1:65"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5440:1:65"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5433:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5433:9:65"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "5426:3:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "5351:1:65",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "5354:1:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "5360:3:65",
                        "type": ""
                      }
                    ],
                    "src": "5320:128:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5499:74:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5522:22:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "5524:16:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5524:18:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5524:18:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5519:1:65"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5512:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5512:9:65"
                          },
                          "nodeType": "YulIf",
                          "src": "5509:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5553:14:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "5562:1:65"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5565:1:65"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "5558:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5558:9:65"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "5553:1:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "5484:1:65",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "5487:1:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "5493:1:65",
                        "type": ""
                      }
                    ],
                    "src": "5453:120:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5630:116:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5689:22:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "5691:16:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5691:18:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5691:18:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "5661:1:65"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "5654:6:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5654:9:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "5647:6:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5647:17:65"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "5669:1:65"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5680:1:65",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "5676:3:65"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5676:6:65"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "5684:1:65"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "5672:3:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5672:14:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5666:2:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5666:21:65"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5643:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5643:45:65"
                          },
                          "nodeType": "YulIf",
                          "src": "5640:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5720:20:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "5735:1:65"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5738:1:65"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "5731:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5731:9:65"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "5720:7:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "5609:1:65",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "5612:1:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "5618:7:65",
                        "type": ""
                      }
                    ],
                    "src": "5578:168:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5800:76:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5822:22:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "5824:16:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5824:18:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5824:18:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "5816:1:65"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5819:1:65"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "5813:2:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5813:8:65"
                          },
                          "nodeType": "YulIf",
                          "src": "5810:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5853:17:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "5865:1:65"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5868:1:65"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5861:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5861:9:65"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "5853:4:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "5782:1:65",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "5785:1:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "5791:4:65",
                        "type": ""
                      }
                    ],
                    "src": "5751:125:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5919:74:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5942:22:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "5944:16:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5944:18:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5944:18:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5939:1:65"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5932:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5932:9:65"
                          },
                          "nodeType": "YulIf",
                          "src": "5929:2:65"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5973:14:65",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "5982:1:65"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5985:1:65"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "5978:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5978:9:65"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "5973:1:65"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "5904:1:65",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "5907:1:65",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "5913:1:65",
                        "type": ""
                      }
                    ],
                    "src": "5881:112:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6030:95:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6047:1:65",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6054:3:65",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6059:10:65",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "6050:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6050:20:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6040:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6040:31:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6040:31:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6087:1:65",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6090:4:65",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6080:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6080:15:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6080:15:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6111:1:65",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6114:4:65",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "6104:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6104:15:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6104:15:65"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "5998:127:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6162:95:65",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6179:1:65",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6186:3:65",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6191:10:65",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "6182:3:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6182:20:65"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6172:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6172:31:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6172:31:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6219:1:65",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6222:4:65",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6212:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6212:15:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6212:15:65"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6243:1:65",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6246:4:65",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "6236:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6236:15:65"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6236:15:65"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "6130:127:65"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6307:86:65",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6371:16:65",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6380:1:65",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6383:1:65",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6373:6:65"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6373:12:65"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6373:12:65"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6330:5:65"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "6341:5:65"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "6356:3:65",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "6361:1:65",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "6352:3:65"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "6352:11:65"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6365:1:65",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "6348:3:65"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6348:19:65"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "6337:3:65"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6337:31:65"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "6327:2:65"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6327:42:65"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "6320:6:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6320:50:65"
                          },
                          "nodeType": "YulIf",
                          "src": "6317:2:65"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "6296:5:65",
                        "type": ""
                      }
                    ],
                    "src": "6262:131:65"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value1, value1) }\n        value1 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IOptionsPremiumPricer_$3169__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IVolatilityOracle_$2686__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_02896e7ad7f074c4392d166c569aef4981690a00f04408f97e4e6e4072a37545__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 8)\n        mstore(add(headStart, 64), \"!newStep\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_acda14d1a86d27b6218c3fd52dfac3567ae736804884ebaf055a8af7a05f1e63__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Invalid strike price\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_bc5cbd1c6f8907714072c2739978cbc7ac0a6ef9f3b263faefad4784bca9ceee__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Expiry must be in the future!\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_dd80565814d0abe461940f5c787a31f0f8b350a08ce19c096d47f0e9906051e4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"!newDelta\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f2a3067f84ba5ad3ad696d873652e7e74062725aef4bba0e74a26d8ab9a3c4be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"newDelta cannot be more than 1\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
              "id": 65,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {
            "11258": [
              {
                "length": 32,
                "start": 305
              },
              {
                "length": 32,
                "start": 831
              },
              {
                "length": 32,
                "start": 1036
              },
              {
                "length": 32,
                "start": 1448
              }
            ],
            "11261": [
              {
                "length": 32,
                "start": 217
              },
              {
                "length": 32,
                "start": 989
              }
            ],
            "11267": [
              {
                "length": 32,
                "start": 1490
              },
              {
                "length": 32,
                "start": 1850
              },
              {
                "length": 32,
                "start": 2236
              }
            ]
          },
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b506004361061009e5760003560e01c8063afa6626411610066578063afa662641461012c578063e25fe17514610153578063e436b8911461015c578063f2fde38b14610184578063f8dcbddb1461019757600080fd5b8063025ff0a5146100a357806312b495a8146100b857806355b13a4f146100d4578063715018a6146101135780638da5cb5b1461011b575b600080fd5b6100b66100b1366004610a8a565b6101aa565b005b6100c160015481565b6040519081526020015b60405180910390f35b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100cb565b6100b66102b3565b6000546001600160a01b03166100fb565b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6100c160025481565b61016f61016a366004610aba565b6102e9565b604080519283526020830191909152016100cb565b6100b6610192366004610a52565b6107b3565b6100b66101a5366004610a8a565b61084e565b6000546001600160a01b031633146101dd5760405162461bcd60e51b81526004016101d490610aed565b60405180910390fd5b600081116102195760405162461bcd60e51b8152602060048201526009602482015268216e657744656c746160b81b60448201526064016101d4565b61271081111561026b5760405162461bcd60e51b815260206004820152601e60248201527f6e657744656c74612063616e6e6f74206265206d6f7265207468616e2031000060448201526064016101d4565b6001805490829055604080518281526020810184905233917f760f0242cb96fbbbd0cf6647501a2763dfd1ee22287ca1a688cb1d5f1ca6026d91015b60405180910390a25050565b6000546001600160a01b031633146102dd5760405162461bcd60e51b81526004016101d490610aed565b6102e7600061092e565b565b60008042841161033b5760405162461bcd60e51b815260206004820152601d60248201527f457870697279206d75737420626520696e20746865206675747572652100000060448201526064016101d4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468f02d26040518163ffffffff1660e01b815260040160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610aa2565b905060006105186402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663950ed82c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190610a6e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156104da57600080fd5b505afa1580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190610aa2565b9061091b565b90506000856105545760025461054f906105496105358287610b84565b6002546105429190610b6d565b869061097e565b9061097e565b610575565b6002546105759061056f6105688287610b84565b869061098a565b9061098a565b905060008661058657600154610596565b600154610596906127109061098a565b90506127105b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639380576f6106057f00000000000000000000000000000000000000000000000000000000000000006105ff8a6305f5e10061091b565b90610996565b6040516001600160e01b031960e084901b16815260048101919091526024810187905260448101889052606481018d905260840160206040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190610aa2565b90506000896106a7578284111580156106a25750818410155b6106b7565b8284101580156106b75750818411155b9050801561077a5760006106cd8484878e6109a2565b905060006106dd8286898f610a1c565b90508b6106ed57888110156106f2565b888111155b6107355760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420737472696b6520707269636560601b60448201526064016101d4565b6107677f00000000000000000000000000000000000000000000000000000000000000006105ff836305f5e10061091b565b829a509a505050505050505050506107ac565b896107925760025461078d90869061097e565b6107a0565b6002546107a090869061098a565b9450819250505061059c565b9250929050565b6000546001600160a01b031633146107dd5760405162461bcd60e51b81526004016101d490610aed565b6001600160a01b0381166108425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101d4565b61084b8161092e565b50565b6000546001600160a01b031633146108785760405162461bcd60e51b81526004016101d490610aed565b600081116108b35760405162461bcd60e51b81526020600482015260086024820152670216e6577537465760c41b60448201526064016101d4565b6002546108e0827f000000000000000000000000000000000000000000000000000000000000000061091b565b600255604080518281526020810184905233917f08e332c6ae0c42d16506516b7ec987c8101ae8c5e930012ecd0c23142930518c91016102a7565b60006109278284610b4e565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006109278284610b22565b60006109278284610b6d565b60006109278284610b3a565b60008082156109e05760006109b7868661098a565b905060006109c5868961098a565b9050818111156109d557866109d7565b875b92505050610a11565b60006109ec878661098a565b905060006109fa868861098a565b905081811115610a0a5787610a0c565b865b925050505b90505b949350505050565b6000838514610a2c575081610a14565b81610a4457600254610a3f90849061098a565b610a11565b600254610a1190849061097e565b600060208284031215610a63578081fd5b813561092781610bc4565b600060208284031215610a7f578081fd5b815161092781610bc4565b600060208284031215610a9b578081fd5b5035919050565b600060208284031215610ab3578081fd5b5051919050565b60008060408385031215610acc578081fd5b8235915060208301358015158114610ae2578182fd5b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b3557610b35610b98565b500190565b600082610b4957610b49610bae565b500490565b6000816000190483118215151615610b6857610b68610b98565b500290565b600082821015610b7f57610b7f610b98565b500390565b600082610b9357610b93610bae565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461084b57600080fdfea26469706673582212201443c82f5078287ff9257c6b77c34a9b44efe298e74847dae4ddd6e44afe63e064736f6c63430008040033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFA66264 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xAFA66264 EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0xE25FE175 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0xE436B891 EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0xF8DCBDDB EQ PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x25FF0A5 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x12B495A8 EQ PUSH2 0xB8 JUMPI DUP1 PUSH4 0x55B13A4F EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x11B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0xB1 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x1AA JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC1 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFB PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCB JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2B3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFB JUMP JUMPDEST PUSH2 0xFB PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xC1 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x16F PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0xABA JUMP JUMPDEST PUSH2 0x2E9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0xCB JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0xA52 JUMP JUMPDEST PUSH2 0x7B3 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x1A5 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x84E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP1 PUSH2 0xAED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x219 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x216E657744656C7461 PUSH1 0xB8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D4 JUMP JUMPDEST PUSH2 0x2710 DUP2 GT ISZERO PUSH2 0x26B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E657744656C74612063616E6E6F74206265206D6F7265207468616E20310000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D4 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x760F0242CB96FBBBD0CF6647501A2763DFD1EE22287CA1A688CB1D5F1CA6026D SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP1 PUSH2 0xAED JUMP JUMPDEST PUSH2 0x2E7 PUSH1 0x0 PUSH2 0x92E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 TIMESTAMP DUP5 GT PUSH2 0x33B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x457870697279206D75737420626520696E207468652066757475726521000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D4 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x468F02D2 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x396 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3CE SWAP2 SWAP1 PUSH2 0xAA2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x518 PUSH5 0x2540BE400 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x950ED82C PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x16F0115B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x477 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49B SWAP2 SWAP1 PUSH2 0xA6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x512 SWAP2 SWAP1 PUSH2 0xAA2 JUMP JUMPDEST SWAP1 PUSH2 0x91B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH2 0x554 JUMPI PUSH1 0x2 SLOAD PUSH2 0x54F SWAP1 PUSH2 0x549 PUSH2 0x535 DUP3 DUP8 PUSH2 0xB84 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x542 SWAP2 SWAP1 PUSH2 0xB6D JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x97E JUMP JUMPDEST SWAP1 PUSH2 0x97E JUMP JUMPDEST PUSH2 0x575 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x575 SWAP1 PUSH2 0x56F PUSH2 0x568 DUP3 DUP8 PUSH2 0xB84 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x98A JUMP JUMPDEST SWAP1 PUSH2 0x98A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 PUSH2 0x586 JUMPI PUSH1 0x1 SLOAD PUSH2 0x596 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x596 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x98A JUMP JUMPDEST SWAP1 POP PUSH2 0x2710 JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH4 0x9380576F PUSH2 0x605 PUSH32 0x0 PUSH2 0x5FF DUP11 PUSH4 0x5F5E100 PUSH2 0x91B JUMP JUMPDEST SWAP1 PUSH2 0x996 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP14 SWAP1 MSTORE PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x665 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x689 SWAP2 SWAP1 PUSH2 0xAA2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP10 PUSH2 0x6A7 JUMPI DUP3 DUP5 GT ISZERO DUP1 ISZERO PUSH2 0x6A2 JUMPI POP DUP2 DUP5 LT ISZERO JUMPDEST PUSH2 0x6B7 JUMP JUMPDEST DUP3 DUP5 LT ISZERO DUP1 ISZERO PUSH2 0x6B7 JUMPI POP DUP2 DUP5 GT ISZERO JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x77A JUMPI PUSH1 0x0 PUSH2 0x6CD DUP5 DUP5 DUP8 DUP15 PUSH2 0x9A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6DD DUP3 DUP7 DUP10 DUP16 PUSH2 0xA1C JUMP JUMPDEST SWAP1 POP DUP12 PUSH2 0x6ED JUMPI DUP9 DUP2 LT ISZERO PUSH2 0x6F2 JUMP JUMPDEST DUP9 DUP2 GT ISZERO JUMPDEST PUSH2 0x735 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E76616C696420737472696B65207072696365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D4 JUMP JUMPDEST PUSH2 0x767 PUSH32 0x0 PUSH2 0x5FF DUP4 PUSH4 0x5F5E100 PUSH2 0x91B JUMP JUMPDEST DUP3 SWAP11 POP SWAP11 POP POP POP POP POP POP POP POP POP POP PUSH2 0x7AC JUMP JUMPDEST DUP10 PUSH2 0x792 JUMPI PUSH1 0x2 SLOAD PUSH2 0x78D SWAP1 DUP7 SWAP1 PUSH2 0x97E JUMP JUMPDEST PUSH2 0x7A0 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x7A0 SWAP1 DUP7 SWAP1 PUSH2 0x98A JUMP JUMPDEST SWAP5 POP DUP2 SWAP3 POP POP POP PUSH2 0x59C JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP1 PUSH2 0xAED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1D4 JUMP JUMPDEST PUSH2 0x84B DUP2 PUSH2 0x92E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x878 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP1 PUSH2 0xAED JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x8B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x216E65775374657 PUSH1 0xC4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D4 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x8E0 DUP3 PUSH32 0x0 PUSH2 0x91B JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x8E332C6AE0C42D16506516B7EC987C8101AE8C5E930012ECD0C23142930518C SWAP2 ADD PUSH2 0x2A7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x927 DUP3 DUP5 PUSH2 0xB4E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x927 DUP3 DUP5 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x927 DUP3 DUP5 PUSH2 0xB6D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x927 DUP3 DUP5 PUSH2 0xB3A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 PUSH2 0x9B7 DUP7 DUP7 PUSH2 0x98A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9C5 DUP7 DUP10 PUSH2 0x98A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x9D5 JUMPI DUP7 PUSH2 0x9D7 JUMP JUMPDEST DUP8 JUMPDEST SWAP3 POP POP POP PUSH2 0xA11 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9EC DUP8 DUP7 PUSH2 0x98A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9FA DUP7 DUP9 PUSH2 0x98A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xA0A JUMPI DUP8 PUSH2 0xA0C JUMP JUMPDEST DUP7 JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP6 EQ PUSH2 0xA2C JUMPI POP DUP2 PUSH2 0xA14 JUMP JUMPDEST DUP2 PUSH2 0xA44 JUMPI PUSH1 0x2 SLOAD PUSH2 0xA3F SWAP1 DUP5 SWAP1 PUSH2 0x98A JUMP JUMPDEST PUSH2 0xA11 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0xA11 SWAP1 DUP5 SWAP1 PUSH2 0x97E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA63 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x927 DUP2 PUSH2 0xBC4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA7F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x927 DUP2 PUSH2 0xBC4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA9B JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAB3 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xACC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xAE2 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xB35 JUMPI PUSH2 0xB35 PUSH2 0xB98 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB49 JUMPI PUSH2 0xB49 PUSH2 0xBAE JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xB68 JUMPI PUSH2 0xB68 PUSH2 0xB98 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xB7F JUMPI PUSH2 0xB7F PUSH2 0xB98 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB93 JUMPI PUSH2 0xB93 PUSH2 0xBAE JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x84B JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ NUMBER 0xC8 0x2F POP PUSH25 0x287FF9257C6B77C34A9B44EFE298E74847DAE4DDD6E44AFE63 0xE0 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
          "sourceMap": "496:7813:50:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7667:302;;;;;;:::i;:::-;;:::i;:::-;;802:20;;;;;;;;;4635:25:65;;;4623:2;4608:18;802:20:50;;;;;;;;676:51;;;;;;;;-1:-1:-1;;;;;1466:32:65;;;1448:51;;1436:2;1421:18;676:51:50;1403:102:65;1605:92:7;;;:::i;973:85::-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:7;973:85;;610:59:50;;;;;978:19;;;;;;2923:2786;;;;;;:::i;:::-;;:::i;:::-;;;;4845:25:65;;;4901:2;4886:18;;4879:34;;;;4818:18;2923:2786:50;4800:119:65;1846:189:7;;;;;;:::i;:::-;;:::i;8070:237:50:-;;;;;;:::i;:::-;;:::i;7667:302::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:13;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;;;;;;;;;7751:1:50::1;7740:8;:12;7732:34;;;::::0;-1:-1:-1;;;7732:34:50;;3995:2:65;7732:34:50::1;::::0;::::1;3977:21:65::0;4034:1;4014:18;;;4007:29;-1:-1:-1;;;4052:18:65;;;4045:39;4101:18;;7732:34:50::1;3967:158:65::0;7732:34:50::1;1201:5;7784:8;:28;;7776:71;;;::::0;-1:-1:-1;;;7776:71:50;;4332:2:65;7776:71:50::1;::::0;::::1;4314:21:65::0;4371:2;4351:18;;;4344:30;4410:32;4390:18;;;4383:60;4460:18;;7776:71:50::1;4304:180:65::0;7776:71:50::1;7876:5;::::0;;7891:16;;;;7922:40:::1;::::0;;4845:25:65;;;4901:2;4886:18;;4879:34;;;7951:10:50::1;::::0;7922:40:::1;::::0;4818:18:65;7922:40:50::1;;;;;;;;1255:1:7;7667:302:50::0;:::o;1605:92:7:-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:13;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;1669:21:::1;1687:1;1669:9;:21::i;:::-;1605:92::o:0;2923:2786:50:-;3031:22;3055:16;3126:15;3108;:33;3087:109;;;;-1:-1:-1;;;3087:109:50;;3637:2:65;3087:109:50;;;3619:21:65;3676:2;3656:18;;;3649:30;3715:31;3695:18;;;3688:59;3764:18;;3087:109:50;3609:179:65;3087:109:50;3230:18;3251:20;-1:-1:-1;;;;;3251:39:50;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3230:62;;3344:21;3380:101;3461:6;3380:16;-1:-1:-1;;;;;3380:30:50;;3411:20;-1:-1:-1;;;;;3411:25:50;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3380:59;;-1:-1:-1;;;;;;3380:59:50;;;;;;;-1:-1:-1;;;;;1466:32:65;;;3380:59:50;;;1448:51:65;1421:18;;3380:59:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:63;;:101::i;:::-;3344:137;;3766:14;3795:5;:138;;3928:4;;3881:52;;:42;3904:17;3928:4;3904:10;:17;:::i;:::-;3896:4;;:26;;;;:::i;:::-;3881:10;;:14;:42::i;:::-;:46;;:52::i;:::-;3795:138;;;3857:4;;3819:43;;:33;3834:17;3857:4;3834:10;:17;:::i;:::-;3819:10;;:14;:33::i;:::-;:37;;:43::i;:::-;3766:167;;3943:19;3965:5;:43;;4003:5;;3965:43;;;3994:5;;3973:27;;1201:5;;3973:20;:27::i;:::-;3943:65;-1:-1:-1;1201:5:50;4065:1638;4092:17;-1:-1:-1;;;;;4128:20:50;:35;;4185:112;4254:21;4185:39;:10;1336:5;4185:14;:39::i;:::-;:43;;:112::i;:::-;4128:287;;-1:-1:-1;;;;;;4128:287:50;;;;;;;;;;5155:25:65;;;;5196:18;;;5189:34;;;5239:18;;;5232:34;;;5282:18;;;5275:34;;;5127:19;;4128:287:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4092:323;;4589:27;4635:5;:155;;4753:9;4738:11;:24;;:52;;;;;4781:9;4766:11;:24;;4738:52;4635:155;;;4678:9;4663:11;:24;;:52;;;;;4706:9;4691:11;:24;;4663:52;4589:201;;4809:22;4805:785;;;4851:18;4892:55;4906:9;4917;4928:11;4941:5;4892:13;:55::i;:::-;4851:96;;4965:19;5007:52;5022:10;5034:9;5045:6;5053:5;5007:14;:52::i;:::-;4965:94;;5106:5;:109;;5205:10;5190:11;:25;;5106:109;;;5153:10;5138:11;:25;;5106:109;5077:200;;;;-1:-1:-1;;;5077:200:50;;3288:2:65;5077:200:50;;;3270:21:65;3327:2;3307:18;;;3300:30;-1:-1:-1;;;3346:18:65;;;3339:50;3406:18;;5077:200:50;3260:170:65;5077:200:50;5412:113;5482:21;5412:40;:11;1336:5;5412:15;:40::i;:113::-;5547:10;5383:192;;;;;;;;;;;;;;;4805:785;5613:5;:43;;5651:4;;5640:16;;:6;;:10;:16::i;:::-;5613:43;;;5632:4;;5621:16;;:6;;:10;:16::i;:::-;5604:52;;5683:9;5671:21;;4065:1638;;;;2923:2786;;;;;;:::o;1846:189:7:-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:13;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;-1:-1:-1;;;;;1934:22:7;::::1;1926:73;;;::::0;-1:-1:-1;;;1926:73:7;;2520:2:65;1926:73:7::1;::::0;::::1;2502:21:65::0;2559:2;2539:18;;;2532:30;2598:34;2578:18;;;2571:62;-1:-1:-1;;;2649:18:65;;;2642:36;2695:19;;1926:73:7::1;2492:228:65::0;1926:73:7::1;2009:19;2019:8;2009:9;:19::i;:::-;1846:189:::0;:::o;8070:237:50:-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:13;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;8151:1:50::1;8141:7;:11;8133:32;;;::::0;-1:-1:-1;;;8133:32:50;;2184:2:65;8133:32:50::1;::::0;::::1;2166:21:65::0;2223:1;2203:18;;;2196:29;-1:-1:-1;;;2241:18:65;;;2234:38;2289:18;;8133:32:50::1;2156:157:65::0;8133:32:50::1;8193:4;::::0;8214:34:::1;:7:::0;8226:21:::1;8214:11;:34::i;:::-;8207:4;:41:::0;8263:37:::1;::::0;;4845:25:65;;;4901:2;4886:18;;4879:34;;;8289:10:50::1;::::0;8263:37:::1;::::0;4818:18:65;8263:37:50::1;4800:119:65::0;3382:96:15;3440:7;3466:5;3470:1;3466;:5;:::i;:::-;3459:12;3382:96;-1:-1:-1;;;3382:96:15:o;2041:169:7:-;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:7;;;-1:-1:-1;;;;;;2131:17:7;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2041:169;;:::o;2672:96:15:-;2730:7;2756:5;2760:1;2756;:5;:::i;3039:96::-;3097:7;3123:5;3127:1;3123;:5;:::i;3767:96::-;3825:7;3851:5;3855:1;3851;:5;:::i;6033:910:50:-;6187:7;6206:18;6384:5;6380:529;;;6405:22;6430:26;:9;6444:11;6430:13;:26::i;:::-;6405:51;-1:-1:-1;6470:22:50;6495:26;:11;6511:9;6495:15;:26::i;:::-;6470:51;;6566:14;6548;:32;;:88;;6627:9;6548:88;;;6599:9;6548:88;6535:101;;6380:529;;;;;6667:22;6692:26;:9;6706:11;6692:13;:26::i;:::-;6667:51;-1:-1:-1;6732:22:50;6757:26;:11;6773:9;6757:15;:26::i;:::-;6732:51;;6828:14;6810;:32;;:88;;6889:9;6810:88;;;6861:9;6810:88;6797:101;;6380:529;;;6926:10;-1:-1:-1;6033:910:50;;;;;;;:::o;7260:303::-;7411:7;7448:9;7434:10;:23;7430:67;;-1:-1:-1;7480:6:50;7473:13;;7430:67;7513:5;:43;;7551:4;;7540:16;;:6;;:10;:16::i;:::-;7513:43;;;7532:4;;7521:16;;:6;;:10;:16::i;14:257:65:-;73:6;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;191:9;178:23;210:31;235:5;210:31;:::i;276:261::-;346:6;399:2;387:9;378:7;374:23;370:32;367:2;;;420:6;412;405:22;367:2;457:9;451:16;476:31;501:5;476:31;:::i;542:190::-;601:6;654:2;642:9;633:7;629:23;625:32;622:2;;;675:6;667;660:22;622:2;-1:-1:-1;703:23:65;;612:120;-1:-1:-1;612:120:65:o;737:194::-;807:6;860:2;848:9;839:7;835:23;831:32;828:2;;;881:6;873;866:22;828:2;-1:-1:-1;909:16:65;;818:113;-1:-1:-1;818:113:65:o;936:361::-;1001:6;1009;1062:2;1050:9;1041:7;1037:23;1033:32;1030:2;;;1083:6;1075;1068:22;1030:2;1124:9;1111:23;1101:33;;1184:2;1173:9;1169:18;1156:32;1231:5;1224:13;1217:21;1210:5;1207:32;1197:2;;1258:6;1250;1243:22;1197:2;1286:5;1276:15;;;1020:277;;;;;:::o;2725:356::-;2927:2;2909:21;;;2946:18;;;2939:30;3005:34;3000:2;2985:18;;2978:62;3072:2;3057:18;;2899:182::o;5320:128::-;5360:3;5391:1;5387:6;5384:1;5381:13;5378:2;;;5397:18;;:::i;:::-;-1:-1:-1;5433:9:65;;5368:80::o;5453:120::-;5493:1;5519;5509:2;;5524:18;;:::i;:::-;-1:-1:-1;5558:9:65;;5499:74::o;5578:168::-;5618:7;5684:1;5680;5676:6;5672:14;5669:1;5666:21;5661:1;5654:9;5647:17;5643:45;5640:2;;;5691:18;;:::i;:::-;-1:-1:-1;5731:9:65;;5630:116::o;5751:125::-;5791:4;5819:1;5816;5813:8;5810:2;;;5824:18;;:::i;:::-;-1:-1:-1;5861:9:65;;5800:76::o;5881:112::-;5913:1;5939;5929:2;;5944:18;;:::i;:::-;-1:-1:-1;5978:9:65;;5919:74::o;5998:127::-;6059:10;6054:3;6050:20;6047:1;6040:31;6090:4;6087:1;6080:15;6114:4;6111:1;6104:15;6130:127;6191:10;6186:3;6182:20;6179:1;6172:31;6222:4;6219:1;6212:15;6246:4;6243:1;6236:15;6262:131;-1:-1:-1;;;;;6337:31:65;;6327:42;;6317:2;;6383:1;6380;6373:12"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "617400",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "delta()": "1007",
            "getStrikePrice(uint256,bool)": "infinite",
            "optionsPremiumPricer()": "infinite",
            "owner()": "1120",
            "renounceOwnership()": "23481",
            "setDelta(uint256)": "23645",
            "setStep(uint256)": "infinite",
            "step()": "1006",
            "transferOwnership(address)": "infinite",
            "volatilityOracle()": "infinite"
          },
          "internal": {
            "_getBestDelta(uint256,uint256,uint256,bool)": "infinite",
            "_getBestStrike(uint256,uint256,uint256,bool)": "993"
          }
        },
        "methodIdentifiers": {
          "delta()": "12b495a8",
          "getStrikePrice(uint256,bool)": "e436b891",
          "optionsPremiumPricer()": "afa66264",
          "owner()": "8da5cb5b",
          "renounceOwnership()": "715018a6",
          "setDelta(uint256)": "025ff0a5",
          "setStep(uint256)": "f8dcbddb",
          "step()": "e25fe175",
          "transferOwnership(address)": "f2fde38b",
          "volatilityOracle()": "55b13a4f"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optionsPremiumPricer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_step\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DeltaSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStep\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"StepSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"}],\"name\":\"getStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newStrikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionsPremiumPricer\",\"outputs\":[{\"internalType\":\"contract IOptionsPremiumPricer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"}],\"name\":\"setDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStep\",\"type\":\"uint256\"}],\"name\":\"setStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volatilityOracle\",\"outputs\":[{\"internalType\":\"contract IVolatilityOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStrikePrice(uint256,bool)\":{\"params\":{\"expiryTimestamp\":\"is the unix timestamp of expiration\",\"isPut\":\"is whether option is put or call\"},\"returns\":{\"newDelta\":\"is the delta of the option given its parameters\",\"newStrikePrice\":\"is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDelta(uint256)\":{\"params\":{\"newDelta\":\"is the new delta value\"}},\"setStep(uint256)\":{\"params\":{\"newStep\":\"is the new step value\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStrikePrice(uint256,bool)\":{\"notice\":\"Gets the strike price satisfying the delta value given the expiry timestamp and whether option is call or put\"},\"optionsPremiumPricer()\":{\"notice\":\"Immutables\"},\"setDelta(uint256)\":{\"notice\":\"Sets new delta value\"},\"setStep(uint256)\":{\"notice\":\"Sets new step value\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/DeltaStrikeSelection.sol\":\"DeltaStrikeSelection\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity >0.6.0 <0.8.7;\\n\\ninterface IPriceOracle {\\n    function decimals() external view returns (uint256 _decimals);\\n\\n    function latestAnswer() external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0xabed5bf667e5c972fbfd9b2f06a8169b10dcaf4841bcc91caf937ed3c27eea1f\",\"license\":\"GPL-3.0\"},\"@ribbon-finance/rvol/contracts/interfaces/IVolatilityOracle.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity >0.6.0 <0.8.7;\\n\\ninterface IVolatilityOracle {\\n    function commit(address pool) external;\\n\\n    function twap(address pool) external returns (uint256 price);\\n\\n    function vol(address pool)\\n        external\\n        view\\n        returns (uint256 standardDeviation);\\n\\n    function annualizedVol(address pool)\\n        external\\n        view\\n        returns (uint256 annualStdev);\\n}\\n\",\"keccak256\":\"0xd7fc2a4845ebd140a45795d891a754d6aaaf456e908ca04ef20d32518903c108\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getPremiumInStables(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x11e656f1aedf911fb2ef73b7b9ff4386d879e4cecebdc801b208f8b290dfc289\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\n\\n    // Otokens have 8 decimal places.\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Amount locked for scheduled withdrawals;\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\",\"keccak256\":\"0x462aa30f83c322d3129ded8da0d5f8430425a04c8c2d87787f33d7d5c41c1571\",\"license\":\"MIT\"},\"contracts/utils/DeltaStrikeSelection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {\\n    IPriceOracle\\n} from \\\"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {\\n    IVolatilityOracle\\n} from \\\"@ribbon-finance/rvol/contracts/interfaces/IVolatilityOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ncontract DeltaStrikeSelection is Ownable {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * Immutables\\n     */\\n    IOptionsPremiumPricer public immutable optionsPremiumPricer;\\n\\n    IVolatilityOracle public immutable volatilityOracle;\\n\\n    // delta for options strike price selection. 1 is 10000 (10**4)\\n    uint256 public delta;\\n\\n    // step in absolute terms at which we will increment\\n    // (ex: 100 * 10 ** assetOracleDecimals means we will move at increments of 100 points)\\n    uint256 public step;\\n\\n    // multiplier to shift asset prices\\n    uint256 private immutable assetOracleMultiplier;\\n\\n    // Delta are in 4 decimal places. 1 * 10**4 = 1 delta.\\n    uint256 private constant DELTA_MULTIPLIER = 10**4;\\n\\n    // ChainLink's USD Price oracles return results in 8 decimal places\\n    uint256 private constant ORACLE_PRICE_MULTIPLIER = 10**8;\\n\\n    event DeltaSet(uint256 oldDelta, uint256 newDelta, address indexed owner);\\n    event StepSet(uint256 oldStep, uint256 newStep, address indexed owner);\\n\\n    constructor(\\n        address _optionsPremiumPricer,\\n        uint256 _delta,\\n        uint256 _step\\n    ) {\\n        require(_optionsPremiumPricer != address(0), \\\"!_optionsPremiumPricer\\\");\\n        require(_delta > 0, \\\"!_delta\\\");\\n        require(_delta <= DELTA_MULTIPLIER, \\\"newDelta cannot be more than 1\\\");\\n        require(_step > 0, \\\"!_step\\\");\\n        optionsPremiumPricer = IOptionsPremiumPricer(_optionsPremiumPricer);\\n        volatilityOracle = IVolatilityOracle(\\n            IOptionsPremiumPricer(_optionsPremiumPricer).volatilityOracle()\\n        );\\n        // ex: delta = 7500 (.75)\\n        delta = _delta;\\n        uint256 _assetOracleMultiplier =\\n            10 **\\n                IPriceOracle(\\n                    IOptionsPremiumPricer(_optionsPremiumPricer).priceOracle()\\n                )\\n                    .decimals();\\n\\n        // ex: step = 1000\\n        step = _step.mul(_assetOracleMultiplier);\\n\\n        assetOracleMultiplier = _assetOracleMultiplier;\\n    }\\n\\n    /**\\n     * @notice Gets the strike price satisfying the delta value\\n     * given the expiry timestamp and whether option is call or put\\n     * @param expiryTimestamp is the unix timestamp of expiration\\n     * @param isPut is whether option is put or call\\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\\n     * @return newDelta is the delta of the option given its parameters\\n     */\\n\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256 newStrikePrice, uint256 newDelta)\\n    {\\n        require(\\n            expiryTimestamp > block.timestamp,\\n            \\\"Expiry must be in the future!\\\"\\n        );\\n\\n        // asset price\\n        uint256 assetPrice = optionsPremiumPricer.getUnderlyingPrice();\\n\\n        // asset's annualized volatility\\n        uint256 annualizedVol =\\n            volatilityOracle.annualizedVol(optionsPremiumPricer.pool()).mul(\\n                10**10\\n            );\\n\\n        // For each asset prices with step of 'step' (down if put, up if call)\\n        //   if asset's getOptionDelta(currStrikePrice, spotPrice, annualizedVol, t) == (isPut ? 1 - delta:delta)\\n        //   with certain margin of error\\n        //        return strike price\\n\\n        uint256 strike =\\n            isPut\\n                ? assetPrice.sub(assetPrice % step).sub(step)\\n                : assetPrice.add(step - (assetPrice % step)).add(step);\\n        uint256 targetDelta = isPut ? DELTA_MULTIPLIER.sub(delta) : delta;\\n        uint256 prevDelta = DELTA_MULTIPLIER;\\n\\n        while (true) {\\n            uint256 currDelta =\\n                optionsPremiumPricer.getOptionDelta(\\n                    assetPrice.mul(ORACLE_PRICE_MULTIPLIER).div(\\n                        assetOracleMultiplier\\n                    ),\\n                    strike,\\n                    annualizedVol,\\n                    expiryTimestamp\\n                );\\n            //  If the current delta is between the previous\\n            //  strike price delta and current strike price delta\\n            //  then we are done\\n            bool foundTargetStrikePrice =\\n                isPut\\n                    ? targetDelta >= prevDelta && targetDelta <= currDelta\\n                    : targetDelta <= prevDelta && targetDelta >= currDelta;\\n\\n            if (foundTargetStrikePrice) {\\n                uint256 finalDelta =\\n                    _getBestDelta(prevDelta, currDelta, targetDelta, isPut);\\n                uint256 finalStrike =\\n                    _getBestStrike(finalDelta, prevDelta, strike, isPut);\\n                require(\\n                    isPut\\n                        ? finalStrike <= assetPrice\\n                        : finalStrike >= assetPrice,\\n                    \\\"Invalid strike price\\\"\\n                );\\n                // make decimals consistent with oToken strike price decimals (10 ** 8)\\n                return (\\n                    finalStrike.mul(ORACLE_PRICE_MULTIPLIER).div(\\n                        assetOracleMultiplier\\n                    ),\\n                    finalDelta\\n                );\\n            }\\n\\n            strike = isPut ? strike.sub(step) : strike.add(step);\\n\\n            prevDelta = currDelta;\\n        }\\n    }\\n\\n    /**\\n     * @notice Rounds to best delta value\\n     * @param prevDelta is the delta of the previous strike price\\n     * @param currDelta is delta of the current strike price\\n     * @param targetDelta is the delta we are targeting\\n     * @param isPut is whether its a put\\n     * @return the best delta value\\n     */\\n    function _getBestDelta(\\n        uint256 prevDelta,\\n        uint256 currDelta,\\n        uint256 targetDelta,\\n        bool isPut\\n    ) private pure returns (uint256) {\\n        uint256 finalDelta;\\n\\n        // for tie breaks (ex: 0.05 <= 0.1 <= 0.15) round to higher strike price\\n        // for calls and lower strike price for puts for deltas\\n        if (isPut) {\\n            uint256 upperBoundDiff = currDelta.sub(targetDelta);\\n            uint256 lowerBoundDiff = targetDelta.sub(prevDelta);\\n            finalDelta = lowerBoundDiff <= upperBoundDiff\\n                ? prevDelta\\n                : currDelta;\\n        } else {\\n            uint256 upperBoundDiff = prevDelta.sub(targetDelta);\\n            uint256 lowerBoundDiff = targetDelta.sub(currDelta);\\n            finalDelta = lowerBoundDiff <= upperBoundDiff\\n                ? currDelta\\n                : prevDelta;\\n        }\\n\\n        return finalDelta;\\n    }\\n\\n    /**\\n     * @notice Rounds to best delta value\\n     * @param finalDelta is the best delta value we found\\n     * @param prevDelta is delta of the previous strike price\\n     * @param strike is the strike of the previous iteration\\n     * @param isPut is whether its a put\\n     * @return the best strike\\n     */\\n    function _getBestStrike(\\n        uint256 finalDelta,\\n        uint256 prevDelta,\\n        uint256 strike,\\n        bool isPut\\n    ) private view returns (uint256) {\\n        if (finalDelta != prevDelta) {\\n            return strike;\\n        }\\n        return isPut ? strike.add(step) : strike.sub(step);\\n    }\\n\\n    /**\\n     * @notice Sets new delta value\\n     * @param newDelta is the new delta value\\n     */\\n    function setDelta(uint256 newDelta) external onlyOwner {\\n        require(newDelta > 0, \\\"!newDelta\\\");\\n        require(newDelta <= DELTA_MULTIPLIER, \\\"newDelta cannot be more than 1\\\");\\n        uint256 oldDelta = delta;\\n        delta = newDelta;\\n        emit DeltaSet(oldDelta, newDelta, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets new step value\\n     * @param newStep is the new step value\\n     */\\n    function setStep(uint256 newStep) external onlyOwner {\\n        require(newStep > 0, \\\"!newStep\\\");\\n        uint256 oldStep = step;\\n        step = newStep.mul(assetOracleMultiplier);\\n        emit StepSet(oldStep, newStep, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x8812f1be9efdf7d2f908e82a6e80054117a5a61c8dc343acaa011fe356e59433\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 956,
            "contract": "contracts/utils/DeltaStrikeSelection.sol:DeltaStrikeSelection",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11263,
            "contract": "contracts/utils/DeltaStrikeSelection.sol:DeltaStrikeSelection",
            "label": "delta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11265,
            "contract": "contracts/utils/DeltaStrikeSelection.sol:DeltaStrikeSelection",
            "label": "step",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "getStrikePrice(uint256,bool)": {
            "notice": "Gets the strike price satisfying the delta value given the expiry timestamp and whether option is call or put"
          },
          "optionsPremiumPricer()": {
            "notice": "Immutables"
          },
          "setDelta(uint256)": {
            "notice": "Sets new delta value"
          },
          "setStep(uint256)": {
            "notice": "Sets new step value"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/interfaces/GammaInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary GammaTypes {\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\\n        // in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n}\\n\\ninterface IOtoken {\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n}\\n\\ninterface IOtokenFactory {\\n    function getOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    function createOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external returns (address);\\n\\n    function getTargetOtokenAddress(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    event OtokenCreated(\\n        address tokenAddress,\\n        address creator,\\n        address indexed underlying,\\n        address indexed strike,\\n        address indexed collateral,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    );\\n}\\n\\ninterface IController {\\n    // possible actions that can be performed\\n    enum ActionType {\\n        OpenVault,\\n        MintShortOption,\\n        BurnShortOption,\\n        DepositLongOption,\\n        WithdrawLongOption,\\n        DepositCollateral,\\n        WithdrawCollateral,\\n        SettleVault,\\n        Redeem,\\n        Call,\\n        Liquidate\\n    }\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        ActionType actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // each vault can hold multiple short / long / collateral assets\\n        // but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n\\n    struct RedeemArgs {\\n        // address to which we pay out the oToken proceeds\\n        address receiver;\\n        // oToken that is to be redeemed\\n        address otoken;\\n        // amount of oTokens that is to be redeemed\\n        uint256 amount;\\n    }\\n\\n    function getPayout(address _otoken, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function operate(ActionArgs[] calldata _actions) external;\\n\\n    function getAccountVaultCounter(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function getVault(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (GammaTypes.Vault memory);\\n\\n    function getProceed(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isSettlementAllowed(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        uint256 _expiry\\n    ) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/libraries/VaultLifecycleYearn.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {VaultLifecycle} from \\\"./VaultLifecycle.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\nimport {IYearnVault} from \\\"../interfaces/IYearn.sol\\\";\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\nimport {IStrikeSelection} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {GnosisAuction} from \\\"./GnosisAuction.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    IOtoken,\\n    IController,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\n\\nlibrary VaultLifecycleYearn {\\n    using SafeMath for uint256;\\n    using SupportsNonCompliantERC20 for IERC20;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\\n     * @param strikeSelection is the address of the contract with strike selection logic\\n     * @param optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param premiumDiscount is the vault's discount applied to the premium\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @param collateralAsset is the address of the collateral asset\\n     * @return otokenAddress is the address of the new option\\n     * @return premium is the premium of the new option\\n     * @return strikePrice is the strike price of the new option\\n     * @return delta is the delta of the new option\\n     */\\n    function commitAndClose(\\n        address strikeSelection,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount,\\n        VaultLifecycle.CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        Vault.VaultState storage vaultState,\\n        address collateralAsset\\n    )\\n        external\\n        returns (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        )\\n    {\\n        uint256 expiry =\\n            VaultLifecycle.getNextExpiry(closeParams.currentOption);\\n\\n        bool isPut = vaultParams.isPut;\\n\\n        IStrikeSelection selection = IStrikeSelection(strikeSelection);\\n\\n        // calculate strike and delta\\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\\n            vaultState.round\\n            ? (closeParams.overriddenStrikePrice, selection.delta())\\n            : selection.getStrikePrice(expiry, isPut);\\n\\n        require(strikePrice != 0, \\\"!strikePrice\\\");\\n\\n        // retrieve address if option already exists, or deploy it\\n        otokenAddress = VaultLifecycle.getOrDeployOtoken(\\n            closeParams,\\n            vaultParams,\\n            vaultParams.underlying,\\n            collateralAsset,\\n            strikePrice,\\n            expiry,\\n            isPut\\n        );\\n\\n        // get the black scholes premium of the option and adjust premium based on\\n        // collateral asset <-> asset exchange rate\\n        premium = DSMath.wmul(\\n            GnosisAuction.getOTokenPremium(\\n                otokenAddress,\\n                optionsPremiumPricer,\\n                premiumDiscount\\n            ),\\n            IYearnVault(collateralAsset).pricePerShare().mul(\\n                decimalShift(collateralAsset)\\n            )\\n        );\\n\\n        require(premium > 0, \\\"!premium\\\");\\n\\n        return (otokenAddress, premium, strikePrice, delta);\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param currentShareSupply is the total supply of shares\\n     * @param currentBalance is the total balance of the vault\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     */\\n    function rollover(\\n        uint256 currentShareSupply,\\n        uint256 currentBalance,\\n        Vault.VaultParams calldata vaultParams,\\n        Vault.VaultState calldata vaultState\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares\\n        )\\n    {\\n        uint256 pendingAmount = uint256(vaultState.totalPending);\\n        uint256 _decimals = vaultParams.decimals;\\n\\n        newPricePerShare = ShareMath.pricePerShare(\\n            currentShareSupply,\\n            currentBalance,\\n            pendingAmount,\\n            _decimals\\n        );\\n\\n        // After closing the short, if the options expire in-the-money\\n        // vault pricePerShare would go down because vault's asset balance decreased.\\n        // This ensures that the newly-minted shares do not take on the loss.\\n        uint256 _mintShares =\\n            ShareMath.assetToShares(pendingAmount, newPricePerShare, _decimals);\\n\\n        uint256 newSupply = currentShareSupply.add(_mintShares);\\n\\n        uint256 queuedAmount =\\n            newSupply > 0\\n                ? ShareMath.sharesToAsset(\\n                    vaultState.queuedWithdrawShares,\\n                    newPricePerShare,\\n                    _decimals\\n                )\\n                : 0;\\n\\n        return (\\n            currentBalance.sub(queuedAmount),\\n            queuedAmount,\\n            newPricePerShare,\\n            _mintShares\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraws yvWETH + WETH (if necessary) from vault using vault shares\\n     * @param weth is the weth address\\n     * @param asset is the vault asset address\\n     * @param collateralToken is the address of the collateral token\\n     * @param recipient is the recipient\\n     * @param amount is the withdraw amount in `asset`\\n     * @return withdrawAmount is the withdraw amount in `collateralToken`\\n     */\\n    function withdrawYieldAndBaseToken(\\n        address weth,\\n        address asset,\\n        address collateralToken,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (uint256) {\\n        uint256 pricePerYearnShare =\\n            IYearnVault(collateralToken).pricePerShare();\\n        uint256 withdrawAmount =\\n            DSMath.wdiv(\\n                amount,\\n                pricePerYearnShare.mul(decimalShift(collateralToken))\\n            );\\n        uint256 yieldTokenBalance =\\n            withdrawYieldToken(collateralToken, recipient, withdrawAmount);\\n\\n        // If there is not enough yvWETH in the vault, it withdraws as much as possible and\\n        // transfers the rest in `asset`\\n        if (withdrawAmount > yieldTokenBalance) {\\n            withdrawBaseToken(\\n                weth,\\n                asset,\\n                collateralToken,\\n                recipient,\\n                withdrawAmount,\\n                yieldTokenBalance,\\n                pricePerYearnShare\\n            );\\n        }\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @notice Withdraws yvWETH from vault\\n     * @param collateralToken is the address of the collateral token\\n     * @param recipient is the recipient\\n     * @param withdrawAmount is the withdraw amount in terms of yearn tokens\\n     * @return yieldTokenBalance is the balance of the yield token\\n     */\\n    function withdrawYieldToken(\\n        address collateralToken,\\n        address recipient,\\n        uint256 withdrawAmount\\n    ) internal returns (uint256) {\\n        IERC20 collateral = IERC20(collateralToken);\\n\\n        uint256 yieldTokenBalance = collateral.balanceOf(address(this));\\n        uint256 yieldTokensToWithdraw =\\n            DSMath.min(yieldTokenBalance, withdrawAmount);\\n        if (yieldTokensToWithdraw > 0) {\\n            collateral.safeTransfer(recipient, yieldTokensToWithdraw);\\n        }\\n\\n        return yieldTokenBalance;\\n    }\\n\\n    /**\\n     * @notice Withdraws `asset` from vault\\n     * @param weth is the weth address\\n     * @param asset is the vault asset address\\n     * @param collateralToken is the address of the collateral token\\n     * @param recipient is the recipient\\n     * @param withdrawAmount is the withdraw amount in terms of yearn tokens\\n     * @param yieldTokenBalance is the collateral token (yvWETH) balance of the vault\\n     * @param pricePerYearnShare is the yvWETH<->WETH price ratio\\n     */\\n    function withdrawBaseToken(\\n        address weth,\\n        address asset,\\n        address collateralToken,\\n        address recipient,\\n        uint256 withdrawAmount,\\n        uint256 yieldTokenBalance,\\n        uint256 pricePerYearnShare\\n    ) internal {\\n        uint256 underlyingTokensToWithdraw =\\n            DSMath.wmul(\\n                withdrawAmount.sub(yieldTokenBalance),\\n                pricePerYearnShare.mul(decimalShift(collateralToken))\\n            );\\n        transferAsset(\\n            weth,\\n            asset,\\n            payable(recipient),\\n            underlyingTokensToWithdraw\\n        );\\n    }\\n\\n    /**\\n     * @notice Unwraps the necessary amount of the yield-bearing yearn token\\n     *         and transfers amount to vault\\n     * @param amount is the amount of `asset` to withdraw\\n     * @param asset is the vault asset address\\n     * @param collateralToken is the address of the collateral token\\n     * @param yearnWithdrawalBuffer is the buffer for withdrawals from yearn vault\\n     * @param yearnWithdrawalSlippage is the slippage for withdrawals from yearn vault\\n     */\\n    function unwrapYieldToken(\\n        uint256 amount,\\n        address asset,\\n        address collateralToken,\\n        uint256 yearnWithdrawalBuffer,\\n        uint256 yearnWithdrawalSlippage\\n    ) external {\\n        uint256 assetBalance = IERC20(asset).balanceOf(address(this));\\n        IYearnVault collateral = IYearnVault(collateralToken);\\n\\n        uint256 amountToUnwrap =\\n            DSMath.wdiv(\\n                DSMath.max(assetBalance, amount).sub(assetBalance),\\n                collateral.pricePerShare().mul(decimalShift(collateralToken))\\n            );\\n\\n        if (amountToUnwrap > 0) {\\n            amountToUnwrap = amountToUnwrap\\n                .add(amountToUnwrap.mul(yearnWithdrawalBuffer).div(10000))\\n                .sub(1);\\n\\n            collateral.withdraw(\\n                amountToUnwrap,\\n                address(this),\\n                yearnWithdrawalSlippage\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Wraps the necessary amount of the base token to the yield-bearing yearn token\\n     * @param asset is the vault asset address\\n     * @param collateralToken is the address of the collateral token\\n     */\\n    function wrapToYieldToken(address asset, address collateralToken) external {\\n        uint256 amountToWrap = IERC20(asset).balanceOf(address(this));\\n\\n        if (amountToWrap > 0) {\\n            IERC20(asset).safeApprove(collateralToken, amountToWrap);\\n\\n            // there is a slight imprecision with regards to calculating back from yearn token -> underlying\\n            // that stems from miscoordination between ytoken .deposit() amount wrapped and pricePerShare\\n            // at that point in time.\\n            // ex: if I have 1 eth, deposit 1 eth into yearn vault and calculate value of yearn token balance\\n            // denominated in eth (via balance(yearn token) * pricePerShare) we will get 1 eth - 1 wei.\\n            IYearnVault(collateralToken).deposit(amountToWrap, address(this));\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\\n     * @param weth is the weth address\\n     * @param asset is the vault asset address\\n     * @param recipient is the receiving address\\n     * @param amount is the transfer amount\\n     */\\n    function transferAsset(\\n        address weth,\\n        address asset,\\n        address recipient,\\n        uint256 amount\\n    ) public {\\n        if (asset == weth) {\\n            IWETH(weth).withdraw(amount);\\n            (bool success, ) = payable(recipient).call{value: amount}(\\\"\\\");\\n            require(success, \\\"!success\\\");\\n            return;\\n        }\\n        IERC20(asset).safeTransfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Returns the decimal shift between 18 decimals and asset tokens\\n     * @param collateralToken is the address of the collateral token\\n     */\\n    function decimalShift(address collateralToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            10**(uint256(18).sub(IERC20Detailed(collateralToken).decimals()));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/vendor/DSMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\nlibrary DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/VaultLifecycle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\nimport {IStrikeSelection} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {GnosisAuction} from \\\"./GnosisAuction.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    IOtoken,\\n    IController,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\nimport {UniswapRouter} from \\\"./UniswapRouter.sol\\\";\\n\\nlibrary VaultLifecycle {\\n    using SafeMath for uint256;\\n    using SupportsNonCompliantERC20 for IERC20;\\n\\n    struct CloseParams {\\n        address OTOKEN_FACTORY;\\n        address USDC;\\n        address currentOption;\\n        uint256 delay;\\n        uint16 lastStrikeOverrideRound;\\n        uint256 overriddenStrikePrice;\\n    }\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\\n     * @param strikeSelection is the address of the contract with strike selection logic\\n     * @param optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param premiumDiscount is the vault's discount applied to the premium\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @return otokenAddress is the address of the new option\\n     * @return premium is the premium of the new option\\n     * @return strikePrice is the strike price of the new option\\n     * @return delta is the delta of the new option\\n     */\\n    function commitAndClose(\\n        address strikeSelection,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount,\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        Vault.VaultState storage vaultState\\n    )\\n        external\\n        returns (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        )\\n    {\\n        uint256 expiry = getNextExpiry(closeParams.currentOption);\\n\\n        IStrikeSelection selection = IStrikeSelection(strikeSelection);\\n\\n        bool isPut = vaultParams.isPut;\\n        address underlying = vaultParams.underlying;\\n        address asset = vaultParams.asset;\\n\\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\\n            vaultState.round\\n            ? (closeParams.overriddenStrikePrice, selection.delta())\\n            : selection.getStrikePrice(expiry, isPut);\\n\\n        require(strikePrice != 0, \\\"!strikePrice\\\");\\n\\n        // retrieve address if option already exists, or deploy it\\n        otokenAddress = getOrDeployOtoken(\\n            closeParams,\\n            vaultParams,\\n            underlying,\\n            asset,\\n            strikePrice,\\n            expiry,\\n            isPut\\n        );\\n\\n        // get the black scholes premium of the option\\n        premium = GnosisAuction.getOTokenPremium(\\n            otokenAddress,\\n            optionsPremiumPricer,\\n            premiumDiscount\\n        );\\n\\n        require(premium > 0, \\\"!premium\\\");\\n\\n        return (otokenAddress, premium, strikePrice, delta);\\n    }\\n\\n    /**\\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\\n     * @param otokenAddress is the address of the otoken\\n     * @param vaultParams is the struct with vault general data\\n     * @param collateralAsset is the address of the collateral asset\\n     * @param USDC is the address of usdc\\n     * @param delay is the delay between commitAndClose and rollToNextOption\\n     */\\n    function verifyOtoken(\\n        address otokenAddress,\\n        Vault.VaultParams storage vaultParams,\\n        address collateralAsset,\\n        address USDC,\\n        uint256 delay\\n    ) private view {\\n        require(otokenAddress != address(0), \\\"!otokenAddress\\\");\\n\\n        IOtoken otoken = IOtoken(otokenAddress);\\n        require(otoken.isPut() == vaultParams.isPut, \\\"Type mismatch\\\");\\n        require(\\n            otoken.underlyingAsset() == vaultParams.underlying,\\n            \\\"Wrong underlyingAsset\\\"\\n        );\\n        require(\\n            otoken.collateralAsset() == collateralAsset,\\n            \\\"Wrong collateralAsset\\\"\\n        );\\n\\n        // we just assume all options use USDC as the strike\\n        require(otoken.strikeAsset() == USDC, \\\"strikeAsset != USDC\\\");\\n\\n        uint256 readyAt = block.timestamp.add(delay);\\n        require(otoken.expiryTimestamp() >= readyAt, \\\"Expiry before delay\\\");\\n    }\\n\\n    /**\\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\\n     * @param asset is the address of the vault's asset\\n     * @param decimals is the decimals of the asset\\n     * @param lastQueuedWithdrawAmount is the amount queued for withdrawals from last round\\n     * @param performanceFee is the perf fee percent to charge on premiums\\n     * @param managementFee is the management fee percent to charge on the AUM\\n     */\\n    struct RolloverParams {\\n        uint256 decimals;\\n        uint256 totalBalance;\\n        uint256 currentShareSupply;\\n        uint256 lastQueuedWithdrawAmount;\\n        uint256 performanceFee;\\n        uint256 managementFee;\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\\n     * @param params is the rollover parameters passed to compute the next state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     * @return performanceFeeInAsset is the performance fee charged by vault\\n     * @return totalVaultFee is the total amount of fee charged by vault\\n     */\\n    function rollover(\\n        Vault.VaultState storage vaultState,\\n        RolloverParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        )\\n    {\\n        uint256 currentBalance = params.totalBalance;\\n        uint256 pendingAmount = vaultState.totalPending;\\n        uint256 queuedWithdrawShares = vaultState.queuedWithdrawShares;\\n\\n        uint256 balanceForVaultFees;\\n        {\\n            uint256 pricePerShareBeforeFee =\\n                ShareMath.pricePerShare(\\n                    params.currentShareSupply,\\n                    currentBalance,\\n                    pendingAmount,\\n                    params.decimals\\n                );\\n\\n            uint256 queuedWithdrawBeforeFee =\\n                params.currentShareSupply > 0\\n                    ? ShareMath.sharesToAsset(\\n                        queuedWithdrawShares,\\n                        pricePerShareBeforeFee,\\n                        params.decimals\\n                    )\\n                    : 0;\\n\\n            // Deduct the difference between the newly scheduled withdrawals\\n            // and the older withdrawals\\n            // so we can charge them fees before they leave\\n            uint256 withdrawAmountDiff =\\n                queuedWithdrawBeforeFee > params.lastQueuedWithdrawAmount\\n                    ? queuedWithdrawBeforeFee.sub(\\n                        params.lastQueuedWithdrawAmount\\n                    )\\n                    : 0;\\n\\n            balanceForVaultFees = currentBalance\\n                .sub(queuedWithdrawBeforeFee)\\n                .add(withdrawAmountDiff);\\n        }\\n\\n        {\\n            (performanceFeeInAsset, , totalVaultFee) = VaultLifecycle\\n                .getVaultFees(\\n                balanceForVaultFees,\\n                vaultState.lastLockedAmount,\\n                vaultState.totalPending,\\n                params.performanceFee,\\n                params.managementFee\\n            );\\n        }\\n\\n        // Take into account the fee\\n        // so we can calculate the newPricePerShare\\n        currentBalance = currentBalance.sub(totalVaultFee);\\n\\n        {\\n            newPricePerShare = ShareMath.pricePerShare(\\n                params.currentShareSupply,\\n                currentBalance,\\n                pendingAmount,\\n                params.decimals\\n            );\\n\\n            // After closing the short, if the options expire in-the-money\\n            // vault pricePerShare would go down because vault's asset balance decreased.\\n            // This ensures that the newly-minted shares do not take on the loss.\\n            mintShares = ShareMath.assetToShares(\\n                pendingAmount,\\n                newPricePerShare,\\n                params.decimals\\n            );\\n\\n            uint256 newSupply = params.currentShareSupply.add(mintShares);\\n\\n            queuedWithdrawAmount = newSupply > 0\\n                ? ShareMath.sharesToAsset(\\n                    queuedWithdrawShares,\\n                    newPricePerShare,\\n                    params.decimals\\n                )\\n                : 0;\\n        }\\n\\n        return (\\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\\n            queuedWithdrawAmount,\\n            newPricePerShare,\\n            mintShares,\\n            performanceFeeInAsset,\\n            totalVaultFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\\n     * @param oTokenAddress is the address of the otoken to mint\\n     * @param depositAmount is the amount of collateral to deposit\\n     * @return the otoken mint amount\\n     */\\n    function createShort(\\n        address gammaController,\\n        address marginPool,\\n        address oTokenAddress,\\n        uint256 depositAmount\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n        uint256 newVaultID =\\n            (controller.getAccountVaultCounter(address(this))).add(1);\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IOtoken oToken = IOtoken(oTokenAddress);\\n        address collateralAsset = oToken.collateralAsset();\\n\\n        uint256 collateralDecimals =\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\n        uint256 mintAmount;\\n\\n        if (oToken.isPut()) {\\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\\n            // This is because of an issue with precision.\\n            //\\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\\n            //\\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\\n            // We retain the dust in the vault so the calling contract can withdraw the\\n            // actual locked amount + dust at settlement.\\n            //\\n            // To test this behavior, we can console.log\\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\\n            // to see how much dust (or excess collateral) is left behind.\\n            mintAmount = depositAmount\\n                .mul(10**Vault.OTOKEN_DECIMALS)\\n                .mul(10**18) // we use 10**18 to give extra precision\\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\\n        } else {\\n            mintAmount = depositAmount;\\n\\n            if (collateralDecimals > 8) {\\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\\n                if (mintAmount > scaleBy) {\\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\\n                }\\n            }\\n        }\\n\\n        // double approve to fix non-compliant ERC20s\\n        IERC20 collateralToken = IERC20(collateralAsset);\\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](3);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.OpenVault,\\n            address(this), // owner\\n            address(this), // receiver\\n            address(0), // asset, otoken\\n            newVaultID, // vaultId\\n            0, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.DepositCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            collateralAsset, // deposited asset\\n            newVaultID, // vaultId\\n            depositAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[2] = IController.ActionArgs(\\n            IController.ActionType.MintShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            oTokenAddress, // option address\\n            newVaultID, // vaultId\\n            mintAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        return mintAmount;\\n    }\\n\\n    /**\\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\\n     calling SettleVault action, this assumption should hold.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @return amount of collateral redeemed from the vault\\n     */\\n    function settleShort(address gammaController) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        // The short position has been previously closed, or all the otokens have been burned.\\n        // So we return early.\\n        if (address(collateralToken) == address(0)) {\\n            return 0;\\n        }\\n\\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // If it is after expiry, we need to settle the short position using the normal way\\n        // Delete the vault and withdraw all remaining collateral from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.SettleVault,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(0), // not used\\n            vaultID, // vaultId\\n            0, // not used\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\\n     * It calls the `Redeem` action to claim the payout.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param oldOption is the address of the old option\\n     * @param asset is the address of the vault's asset\\n     * @return amount of asset received by exercising the option\\n     */\\n    function settleLong(\\n        address gammaController,\\n        address oldOption,\\n        address asset\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\\n\\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\\n            return 0;\\n        }\\n\\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        // If it is after expiry, we need to redeem the profits\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.Redeem,\\n            address(0), // not used\\n            address(this), // address to send profits to\\n            oldOption, // address of otoken\\n            0, // not used\\n            oldOptionBalance, // otoken balance\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        return endAssetBalance.sub(startAssetBalance);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param currentOption is the address of the current option\\n     * @return amount of collateral redeemed by burning otokens\\n     */\\n    function burnOtokens(address gammaController, address currentOption)\\n        external\\n        returns (uint256)\\n    {\\n        uint256 numOTokensToBurn =\\n            IERC20(currentOption).balanceOf(address(this));\\n\\n        require(numOTokensToBurn > 0, \\\"No oTokens to burn\\\");\\n\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // Burning `amount` of oTokens from the ribbon vault,\\n        // then withdrawing the corresponding collateral amount from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](2);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.BurnShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            address(vault.shortOtokens[0]), // otoken address\\n            vaultID, // vaultId\\n            numOTokensToBurn, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.WithdrawCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(collateralToken), // withdrawn asset\\n            vaultID, // vaultId\\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\\n                vault.shortAmounts[0]\\n            ), // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Calculates the performance and management fee for this week's round\\n     * @param currentBalance is the balance of funds held on the vault after closing short\\n     * @param lastLockedAmount is the amount of funds locked from the previous round\\n     * @param pendingAmount is the pending deposit amount\\n     * @param performanceFeePercent is the performance fee pct.\\n     * @param managementFeePercent is the management fee pct.\\n     * @return performanceFeeInAsset is the performance fee\\n     * @return managementFeeInAsset is the management fee\\n     * @return vaultFee is the total fees\\n     */\\n    function getVaultFees(\\n        uint256 currentBalance,\\n        uint256 lastLockedAmount,\\n        uint256 pendingAmount,\\n        uint256 performanceFeePercent,\\n        uint256 managementFeePercent\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 performanceFeeInAsset,\\n            uint256 managementFeeInAsset,\\n            uint256 vaultFee\\n        )\\n    {\\n        // At the first round, currentBalance=0, pendingAmount>0\\n        // so we just do not charge anything on the first round\\n        uint256 lockedBalanceSansPending =\\n            currentBalance > pendingAmount\\n                ? currentBalance.sub(pendingAmount)\\n                : 0;\\n\\n        uint256 _performanceFeeInAsset;\\n        uint256 _managementFeeInAsset;\\n        uint256 _vaultFee;\\n\\n        // Take performance fee and management fee ONLY if difference between\\n        // last week and this week's vault deposits, taking into account pending\\n        // deposits and withdrawals, is positive. If it is negative, last week's\\n        // option expired ITM past breakeven, and the vault took a loss so we\\n        // do not collect performance fee for last week\\n        if (lockedBalanceSansPending > lastLockedAmount) {\\n            _performanceFeeInAsset = performanceFeePercent > 0\\n                ? lockedBalanceSansPending\\n                    .sub(lastLockedAmount)\\n                    .mul(performanceFeePercent)\\n                    .div(100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n            _managementFeeInAsset = managementFeePercent > 0\\n                ? lockedBalanceSansPending.mul(managementFeePercent).div(\\n                    100 * Vault.FEE_MULTIPLIER\\n                )\\n                : 0;\\n\\n            _vaultFee = _performanceFeeInAsset.add(_managementFeeInAsset);\\n        }\\n\\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\\n    }\\n\\n    /**\\n     * @notice Either retrieves the option token if it already exists, or deploy it\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param underlying is the address of the underlying asset of the option\\n     * @param collateralAsset is the address of the collateral asset of the option\\n     * @param strikePrice is the strike price of the option\\n     * @param expiry is the expiry timestamp of the option\\n     * @param isPut is whether the option is a put\\n     * @return the address of the option\\n     */\\n    function getOrDeployOtoken(\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        address underlying,\\n        address collateralAsset,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    ) internal returns (address) {\\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\\n\\n        address otokenFromFactory =\\n            factory.getOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        if (otokenFromFactory != address(0)) {\\n            return otokenFromFactory;\\n        }\\n\\n        address otoken =\\n            factory.createOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        verifyOtoken(\\n            otoken,\\n            vaultParams,\\n            collateralAsset,\\n            closeParams.USDC,\\n            closeParams.delay\\n        );\\n\\n        return otoken;\\n    }\\n\\n    /**\\n     * @notice Starts the gnosis auction\\n     * @param auctionDetails is the struct with all the custom parameters of the auction\\n     * @return the auction id of the newly created auction\\n     */\\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\\n        external\\n        returns (uint256)\\n    {\\n        return GnosisAuction.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Settles the gnosis auction\\n     * @param gnosisEasyAuction is the contract address of Gnosis easy auction protocol\\n     * @param auctionID is the auction ID of the gnosis easy auction\\n     */\\n    function settleAuction(address gnosisEasyAuction, uint256 auctionID)\\n        internal\\n    {\\n        IGnosisAuction(gnosisEasyAuction).settleAuction(auctionID);\\n    }\\n\\n    /**\\n     * @notice Swaps tokens using UniswapV3 router\\n     * @param tokenIn is the token address to swap\\n     * @param minAmountOut is the minimum acceptable amount of tokenOut received from swap\\n     * @param router is the contract address of UniswapV3 router\\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\\n     */\\n    function swap(\\n        address tokenIn,\\n        uint256 minAmountOut,\\n        address router,\\n        bytes calldata swapPath\\n    ) external {\\n        uint256 balance = IERC20(tokenIn).balanceOf(address(this));\\n\\n        if (balance > 0) {\\n            UniswapRouter.swap(\\n                address(this),\\n                tokenIn,\\n                balance,\\n                minAmountOut,\\n                router,\\n                swapPath\\n            );\\n        }\\n    }\\n\\n    function checkPath(\\n        bytes calldata swapPath,\\n        address validTokenIn,\\n        address validTokenOut,\\n        address uniswapFactory\\n    ) external view returns (bool isValidPath) {\\n        return\\n            UniswapRouter.checkPath(\\n                swapPath,\\n                validTokenIn,\\n                validTokenOut,\\n                uniswapFactory\\n            );\\n    }\\n\\n    /**\\n     * @notice Places a bid in an auction\\n     * @param bidDetails is the struct with all the details of the\\n      bid including the auction's id and how much to bid\\n     */\\n    function placeBid(GnosisAuction.BidDetails calldata bidDetails)\\n        external\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        return GnosisAuction.placeBid(bidDetails);\\n    }\\n\\n    /**\\n     * @notice Claims the oTokens belonging to the vault\\n     * @param auctionSellOrder is the sell order of the bid\\n     * @param gnosisEasyAuction is the address of the gnosis auction contract\\n     holding custody to the funds\\n     * @param counterpartyThetaVault is the address of the counterparty theta\\n     vault of this delta vault\\n     */\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) external {\\n        GnosisAuction.claimAuctionOtokens(\\n            auctionSellOrder,\\n            gnosisEasyAuction,\\n            counterpartyThetaVault\\n        );\\n    }\\n\\n    /**\\n     * @notice Verify the constructor params satisfy requirements\\n     * @param owner is the owner of the vault with critical permissions\\n     * @param feeRecipient is the address to recieve vault performance and management fees\\n     * @param performanceFee is the perfomance fee pct.\\n     * @param tokenName is the name of the token\\n     * @param tokenSymbol is the symbol of the token\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function verifyInitializerParams(\\n        address owner,\\n        address keeper,\\n        address feeRecipient,\\n        uint256 performanceFee,\\n        uint256 managementFee,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external pure {\\n        require(owner != address(0), \\\"!owner\\\");\\n        require(keeper != address(0), \\\"!keeper\\\");\\n        require(feeRecipient != address(0), \\\"!feeRecipient\\\");\\n        require(\\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"performanceFee >= 100%\\\"\\n        );\\n        require(\\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"managementFee >= 100%\\\"\\n        );\\n        require(bytes(tokenName).length > 0, \\\"!tokenName\\\");\\n        require(bytes(tokenSymbol).length > 0, \\\"!tokenSymbol\\\");\\n\\n        require(_vaultParams.asset != address(0), \\\"!asset\\\");\\n        require(_vaultParams.underlying != address(0), \\\"!underlying\\\");\\n        require(_vaultParams.minimumSupply > 0, \\\"!minimumSupply\\\");\\n        require(_vaultParams.cap > 0, \\\"!cap\\\");\\n        require(\\n            _vaultParams.cap > _vaultParams.minimumSupply,\\n            \\\"cap has to be higher than minimumSupply\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the next option expiry timestamp\\n     * @param currentOption is the otoken address that the vault is currently writing\\n     */\\n    function getNextExpiry(address currentOption)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // uninitialized state\\n        if (currentOption == address(0)) {\\n            return getNextFriday(block.timestamp);\\n        }\\n        uint256 currentExpiry = IOtoken(currentOption).expiryTimestamp();\\n\\n        // After options expiry if no options are written for >1 week\\n        // We need to give the ability continue writing options\\n        if (block.timestamp > currentExpiry + 7 days) {\\n            return getNextFriday(block.timestamp);\\n        }\\n        return getNextFriday(currentExpiry);\\n    }\\n\\n    /**\\n     * @notice Gets the next options expiry timestamp\\n     * @param timestamp is the expiry timestamp of the current option\\n     * Reference: https://codereview.stackexchange.com/a/33532\\n     * Examples:\\n     * getNextFriday(week 1 thursday) -> week 1 friday\\n     * getNextFriday(week 1 friday) -> week 2 friday\\n     * getNextFriday(week 1 saturday) -> week 2 friday\\n     */\\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\\n        uint256 dayOfWeek = ((timestamp / 1 days) + 4) % 7;\\n        uint256 nextFriday = timestamp + ((7 + 5 - dayOfWeek) % 7) * 1 days;\\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\\n\\n        // If the passed timestamp is day=Friday hour>8am, we simply increment it by a week to next Friday\\n        if (timestamp >= friday8am) {\\n            friday8am += 7 days;\\n        }\\n        return friday8am;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/Vault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\n\\n    // Otokens have 8 decimal places.\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Amount locked for scheduled withdrawals;\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/ShareMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\nlibrary ShareMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    function assetToShares(\\n        uint256 assetAmount,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return assetAmount.mul(10**decimals).div(assetPerShare);\\n    }\\n\\n    function sharesToAsset(\\n        uint256 shares,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return shares.mul(assetPerShare).div(10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\\n     * @param depositReceipt is the user's deposit receipt\\n     * @param currentRound is the `round` stored on the vault\\n     * @param assetPerShare is the price in asset per share\\n     * @param decimals is the number of decimals the asset/shares use\\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\\n     */\\n    function getSharesFromReceipt(\\n        Vault.DepositReceipt memory depositReceipt,\\n        uint256 currentRound,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256 unredeemedShares) {\\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\n            uint256 sharesFromRound =\\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\\n\\n            return\\n                uint256(depositReceipt.unredeemedShares).add(sharesFromRound);\\n        }\\n        return depositReceipt.unredeemedShares;\\n    }\\n\\n    function pricePerShare(\\n        uint256 totalSupply,\\n        uint256 totalBalance,\\n        uint256 pendingAmount,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        uint256 singleShare = 10**decimals;\\n        return\\n            totalSupply > 0\\n                ? singleShare.mul(totalBalance.sub(pendingAmount)).div(\\n                    totalSupply\\n                )\\n                : singleShare;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IYearn.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IYearnVault {\\n    function pricePerShare() external view returns (uint256);\\n\\n    function deposit(uint256 _amount, address _recipient)\\n        external\\n        returns (uint256);\\n\\n    function withdraw(\\n        uint256 _maxShares,\\n        address _recipient,\\n        uint256 _maxLoss\\n    ) external returns (uint256);\\n\\n    function approve(address _recipient, uint256 _amount)\\n        external\\n        returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\ninterface IYearnRegistry {\\n    function latestVault(address token) external returns (address);\\n}\\n\\ninterface IYearnPricer {\\n    function setExpiryPriceInOracle(uint256 _expiryTimestamp) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IWETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/IRibbon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getPremiumInStables(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function pool() external view returns (address);\\n}\\n\"\n    },\n    \"contracts/libraries/GnosisAuction.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {IOtoken} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {IRibbonThetaVault} from \\\"../interfaces/IRibbonThetaVault.sol\\\";\\n\\nlibrary GnosisAuction {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    event PlaceAuctionBid(\\n        uint256 auctionId,\\n        address indexed auctioningToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        address indexed bidder\\n    );\\n\\n    struct AuctionDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 oTokenPremium;\\n        uint256 duration;\\n    }\\n\\n    struct BidDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 auctionId;\\n        uint256 lockedBalance;\\n        uint256 optionAllocation;\\n        uint256 optionPremium;\\n        address bidder;\\n    }\\n\\n    function startAuction(AuctionDetails calldata auctionDetails)\\n        internal\\n        returns (uint256 auctionID)\\n    {\\n        uint256 oTokenSellAmount =\\n            getOTokenSellAmount(auctionDetails.oTokenAddress);\\n\\n        IERC20(auctionDetails.oTokenAddress).safeApprove(\\n            auctionDetails.gnosisEasyAuction,\\n            IERC20(auctionDetails.oTokenAddress).balanceOf(address(this))\\n        );\\n\\n        // minBidAmount is total oTokens to sell * premium per oToken\\n        // shift decimals to correspond to decimals of USDC for puts\\n        // and underlying for calls\\n        uint256 minBidAmount =\\n            DSMath.wmul(\\n                oTokenSellAmount.mul(10**10),\\n                auctionDetails.oTokenPremium\\n            );\\n\\n        minBidAmount = auctionDetails.assetDecimals > 18\\n            ? minBidAmount.mul(10**(auctionDetails.assetDecimals.sub(18)))\\n            : minBidAmount.div(\\n                10**(uint256(18).sub(auctionDetails.assetDecimals))\\n            );\\n\\n        require(\\n            minBidAmount <= type(uint96).max,\\n            \\\"optionPremium * oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        uint256 auctionEnd = block.timestamp.add(auctionDetails.duration);\\n\\n        auctionID = IGnosisAuction(auctionDetails.gnosisEasyAuction)\\n            .initiateAuction(\\n            // address of oToken we minted and are selling\\n            auctionDetails.oTokenAddress,\\n            // address of asset we want in exchange for oTokens. Should match vault `asset`\\n            auctionDetails.asset,\\n            // orders can be cancelled at any time during the auction\\n            auctionEnd,\\n            // order will last for `duration`\\n            auctionEnd,\\n            // we are selling all of the otokens minus a fee taken by gnosis\\n            uint96(oTokenSellAmount),\\n            // the minimum we are willing to sell all the oTokens for. A discount is applied on black-scholes price\\n            uint96(minBidAmount),\\n            // the minimum bidding amount must be 1 * 10 ** -assetDecimals\\n            1,\\n            // the min funding threshold\\n            0,\\n            // no atomic closure\\n            false,\\n            // access manager contract\\n            address(0),\\n            // bytes for storing info like a whitelist for who can bid\\n            bytes(\\\"\\\")\\n        );\\n\\n        emit InitiateGnosisAuction(\\n            auctionDetails.oTokenAddress,\\n            auctionDetails.asset,\\n            auctionID,\\n            msg.sender\\n        );\\n    }\\n\\n    function placeBid(BidDetails calldata bidDetails)\\n        internal\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        // calculate how much to allocate\\n        sellAmount = bidDetails\\n            .lockedBalance\\n            .mul(bidDetails.optionAllocation)\\n            .div(100 * Vault.OPTION_ALLOCATION_MULTIPLIER);\\n\\n        // divide the `asset` sellAmount by the target premium per oToken to\\n        // get the number of oTokens to buy (8 decimals)\\n        buyAmount = sellAmount\\n            .mul(10**(bidDetails.assetDecimals.add(Vault.OTOKEN_DECIMALS)))\\n            .div(bidDetails.optionPremium)\\n            .div(10**bidDetails.assetDecimals);\\n\\n        require(\\n            sellAmount <= type(uint96).max,\\n            \\\"sellAmount > type(uint96) max value!\\\"\\n        );\\n        require(\\n            buyAmount <= type(uint96).max,\\n            \\\"buyAmount > type(uint96) max value!\\\"\\n        );\\n\\n        // approve that amount\\n        IERC20(bidDetails.asset).safeApprove(\\n            bidDetails.gnosisEasyAuction,\\n            sellAmount\\n        );\\n\\n        uint96[] memory _minBuyAmounts = new uint96[](1);\\n        uint96[] memory _sellAmounts = new uint96[](1);\\n        bytes32[] memory _prevSellOrders = new bytes32[](1);\\n        _minBuyAmounts[0] = uint96(buyAmount);\\n        _sellAmounts[0] = uint96(sellAmount);\\n        _prevSellOrders[\\n            0\\n        ] = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n        // place sell order with that amount\\n        userId = IGnosisAuction(bidDetails.gnosisEasyAuction).placeSellOrders(\\n            bidDetails.auctionId,\\n            _minBuyAmounts,\\n            _sellAmounts,\\n            _prevSellOrders,\\n            \\\"0x\\\"\\n        );\\n\\n        emit PlaceAuctionBid(\\n            bidDetails.auctionId,\\n            bidDetails.oTokenAddress,\\n            sellAmount,\\n            buyAmount,\\n            bidDetails.bidder\\n        );\\n\\n        return (sellAmount, buyAmount, userId);\\n    }\\n\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) internal {\\n        bytes32 order =\\n            encodeOrder(\\n                auctionSellOrder.userId,\\n                auctionSellOrder.buyAmount,\\n                auctionSellOrder.sellAmount\\n            );\\n        bytes32[] memory orders = new bytes32[](1);\\n        orders[0] = order;\\n        IGnosisAuction(gnosisEasyAuction).claimFromParticipantOrder(\\n            IRibbonThetaVault(counterpartyThetaVault).optionAuctionID(),\\n            orders\\n        );\\n    }\\n\\n    function getOTokenSellAmount(address oTokenAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // We take our current oToken balance. That will be our sell amount\\n        // but otokens will be transferred to gnosis.\\n        uint256 oTokenSellAmount =\\n            IERC20(oTokenAddress).balanceOf(address(this));\\n\\n        require(\\n            oTokenSellAmount <= type(uint96).max,\\n            \\\"oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        return oTokenSellAmount;\\n    }\\n\\n    function getOTokenPremium(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) internal view returns (uint256) {\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated in the underlying asset for call option\\n        // and USDC for put option\\n        uint256 optionPremium =\\n            premiumPricer.getPremium(\\n                newOToken.strikePrice(),\\n                newOToken.expiryTimestamp(),\\n                newOToken.isPut()\\n            );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium.mul(premiumDiscount).div(\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\n        );\\n\\n        require(\\n            optionPremium <= type(uint96).max,\\n            \\\"optionPremium > type(uint96) max value!\\\"\\n        );\\n\\n        return optionPremium;\\n    }\\n\\n    function getOTokenPremiumInStables(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) internal view returns (uint256) {\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated USDC for both call and put options\\n        uint256 optionPremium =\\n            premiumPricer.getPremiumInStables(\\n                newOToken.strikePrice(),\\n                newOToken.expiryTimestamp(),\\n                newOToken.isPut()\\n            );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium.mul(premiumDiscount).div(\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\n        );\\n\\n        require(\\n            optionPremium <= type(uint96).max,\\n            \\\"optionPremium > type(uint96) max value!\\\"\\n        );\\n\\n        return optionPremium;\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC20Detailed.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function name() external view returns (string calldata);\\n}\\n\"\n    },\n    \"contracts/libraries/SupportsNonCompliantERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * This library supports ERC20s that have quirks in their behavior.\\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\\n */\\nlibrary SupportsNonCompliantERC20 {\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    function safeApproveNonCompliant(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) == USDT) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n        SafeERC20.safeApprove(token, spender, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IGnosisAuction.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary AuctionType {\\n    struct AuctionData {\\n        IERC20 auctioningToken;\\n        IERC20 biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 interimSumBidAmount;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        bool minFundingThresholdNotReached;\\n        bool isAtomicClosureAllowed;\\n        uint256 feeNumerator;\\n        uint256 minFundingThreshold;\\n    }\\n}\\n\\ninterface IGnosisAuction {\\n    function initiateAuction(\\n        address _auctioningToken,\\n        address _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed,\\n        address accessManagerContract,\\n        bytes memory accessManagerContractData\\n    ) external returns (uint256);\\n\\n    function auctionCounter() external view returns (uint256);\\n\\n    function auctionData(uint256 auctionId)\\n        external\\n        view\\n        returns (AuctionType.AuctionData memory);\\n\\n    function auctionAccessManager(uint256 auctionId)\\n        external\\n        view\\n        returns (address);\\n\\n    function auctionAccessData(uint256 auctionId)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function FEE_DENOMINATOR() external view returns (uint256);\\n\\n    function feeNumerator() external view returns (uint256);\\n\\n    function settleAuction(uint256 auctionId) external returns (bytes32);\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData\\n    ) external returns (uint64);\\n\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders\\n    ) external returns (uint256, uint256);\\n}\\n\"\n    },\n    \"contracts/libraries/UniswapRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ISwapRouter} from \\\"../interfaces/ISwapRouter.sol\\\";\\nimport {IUniswapV3Factory} from \\\"../interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"./Path.sol\\\";\\n\\nlibrary UniswapRouter {\\n    using Path for bytes;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Check if the path set for swap is valid\\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\\n     * @param validTokenIn is the contract address of the correct tokenIn\\n     * @param validTokenOut is the contract address of the correct tokenOut\\n     * @param uniswapFactory is the contract address of UniswapV3 factory\\n     * @return isValidPath is whether the path is valid\\n     */\\n    function checkPath(\\n        bytes memory swapPath,\\n        address validTokenIn,\\n        address validTokenOut,\\n        address uniswapFactory\\n    ) internal view returns (bool isValidPath) {\\n        // Function checks if the tokenIn and tokenOut in the swapPath\\n        // matches the validTokenIn and validTokenOut specified.\\n        address tokenIn;\\n        address tokenOut;\\n        address tempTokenIn;\\n        uint24 fee;\\n        IUniswapV3Factory factory = IUniswapV3Factory(uniswapFactory);\\n\\n        // Return early if swapPath is below the bare minimum (43)\\n        require(swapPath.length >= 43, \\\"Path too short\\\");\\n        // Return early if swapPath is above the max (66)\\n        // At worst we have 2 hops e.g. USDC > WETH > asset\\n        require(swapPath.length <= 66, \\\"Path too long\\\");\\n\\n        // Decode the first pool in path\\n        (tokenIn, tokenOut, fee) = swapPath.decodeFirstPool();\\n\\n        // Check to factory if pool exists\\n        require(\\n            factory.getPool(tokenIn, tokenOut, fee) != address(0),\\n            \\\"Pool does not exist\\\"\\n        );\\n\\n        // Check next pool if multiple pools\\n        while (swapPath.hasMultiplePools()) {\\n            // Remove the first pool from path\\n            swapPath = swapPath.skipToken();\\n            // Check the next pool and update tokenOut\\n            (tempTokenIn, tokenOut, fee) = swapPath.decodeFirstPool();\\n\\n            require(\\n                factory.getPool(tokenIn, tokenOut, fee) != address(0),\\n                \\\"Pool does not exist\\\"\\n            );\\n        }\\n\\n        return tokenIn == validTokenIn && tokenOut == validTokenOut;\\n    }\\n\\n    /**\\n     * @notice Swaps assets by calling UniswapV3 router\\n     * @param recipient is the address of recipient of the tokenOut\\n     * @param tokenIn is the address of the token given to the router\\n     * @param amountIn is the amount of tokenIn given to the router\\n     * @param minAmountOut is the minimum acceptable amount of tokenOut received from swap\\n     * @param router is the contract address of UniswapV3 router\\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\\n     * @return amountOut is the amount of tokenOut received from the swap\\n     */\\n    function swap(\\n        address recipient,\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address router,\\n        bytes calldata swapPath\\n    ) internal returns (uint256 amountOut) {\\n        // Approve router to spend tokenIn\\n        IERC20(tokenIn).safeApprove(router, amountIn);\\n\\n        // Swap assets using UniswapV3 router\\n        ISwapRouter.ExactInputParams memory swapParams =\\n            ISwapRouter.ExactInputParams({\\n                recipient: recipient,\\n                path: swapPath,\\n                deadline: block.timestamp.add(10 minutes),\\n                amountIn: amountIn,\\n                amountOutMinimum: minAmountOut\\n            });\\n\\n        amountOut = ISwapRouter(router).exactInput(swapParams);\\n\\n        return amountOut;\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IRibbonThetaVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonThetaVault {\\n    function currentOption() external view returns (address);\\n\\n    function nextOption() external view returns (address);\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n\\n    function vaultState() external view returns (Vault.VaultState memory);\\n\\n    function optionState() external view returns (Vault.OptionState memory);\\n\\n    function optionAuctionID() external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/ISwapRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.4;\\npragma abicoder v2;\\n\\n/// Source: https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/// Source: https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n}\\n\"\n    },\n    \"contracts/interfaces/IUniswapV3Factory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Source: https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol\\npragma solidity =0.8.4;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n}\\n\"\n    },\n    \"contracts/libraries/Path.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Source: https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/Path.sol\\npragma solidity =0.8.4;\\n\\nimport \\\"./BytesLib.sol\\\";\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH =\\n        POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/BytesLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity =0.8.4;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(\\n                        add(tempBytes, lengthmod),\\n                        mul(0x20, iszero(lengthmod))\\n                    )\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(\\n                            add(\\n                                add(_bytes, lengthmod),\\n                                mul(0x20, iszero(lengthmod))\\n                            ),\\n                            _start\\n                        )\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint24)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\"\n    },\n    \"contracts/vaults/YearnVaults/RibbonThetaYearnVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {DSMath} from \\\"../../vendor/DSMath.sol\\\";\\nimport {GnosisAuction} from \\\"../../libraries/GnosisAuction.sol\\\";\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\nimport {VaultLifecycle} from \\\"../../libraries/VaultLifecycle.sol\\\";\\nimport {VaultLifecycleYearn} from \\\"../../libraries/VaultLifecycleYearn.sol\\\";\\nimport {RibbonVault} from \\\"./base/RibbonVault.sol\\\";\\nimport {\\n    RibbonThetaYearnVaultStorage\\n} from \\\"../../storage/RibbonThetaYearnVaultStorage.sol\\\";\\n\\n/**\\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\\n * the inheritance chain closely.\\n * Any changes/appends in storage variable needs to happen in RibbonThetaYearnVaultStorage.\\n * RibbonThetaYearnVault should not inherit from any other contract aside from RibbonVault, RibbonThetaYearnVaultStorage\\n */\\ncontract RibbonThetaYearnVault is RibbonVault, RibbonThetaYearnVaultStorage {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\\n    address public immutable OTOKEN_FACTORY;\\n\\n    // The minimum duration for an option auction.\\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event OpenShort(\\n        address indexed options,\\n        uint256 depositAmount,\\n        address indexed manager\\n    );\\n\\n    event CloseShort(\\n        address indexed options,\\n        uint256 withdrawAmount,\\n        address indexed manager\\n    );\\n\\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\\n\\n    event PremiumDiscountSet(\\n        uint256 premiumDiscount,\\n        uint256 newPremiumDiscount\\n    );\\n    event AuctionDurationSet(\\n        uint256 auctionDuration,\\n        uint256 newAuctionDuration\\n    );\\n\\n    event InstantWithdraw(\\n        address indexed account,\\n        uint256 amount,\\n        uint256 round\\n    );\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _yearnRegistry is the address of the yearn registry from token to vault token\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _oTokenFactory,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _yearnRegistry\\n    )\\n        RibbonVault(\\n            _weth,\\n            _usdc,\\n            _gammaController,\\n            _marginPool,\\n            _gnosisEasyAuction,\\n            _yearnRegistry\\n        )\\n    {\\n        require(_oTokenFactory != address(0), \\\"!_oTokenFactory\\\");\\n        OTOKEN_FACTORY = _oTokenFactory;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     * @param _owner is the owner of the vault with critical permissions\\n     * @param _keeper is the keeper of the vault with medium permissions (weekly actions)\\n     * @param _feeRecipient is the address to recieve vault performance and management fees\\n     * @param _managementFee is the management fee pct.\\n     * @param _performanceFee is the perfomance fee pct.\\n     * @param _tokenName is the name of the token\\n     * @param _tokenSymbol is the symbol of the token\\n     * @param _optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param _strikeSelection is the address of the contract with strike selection logic\\n     * @param _premiumDiscount is the vault's discount applied to the premium\\n     * @param _auctionDuration is the duration of the gnosis auction\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function initialize(\\n        address _owner,\\n        address _keeper,\\n        address _feeRecipient,\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        address _optionsPremiumPricer,\\n        address _strikeSelection,\\n        uint32 _premiumDiscount,\\n        uint256 _auctionDuration,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external initializer {\\n        baseInitialize(\\n            _owner,\\n            _keeper,\\n            _feeRecipient,\\n            _managementFee,\\n            _performanceFee,\\n            _tokenName,\\n            _tokenSymbol,\\n            _vaultParams\\n        );\\n        require(_optionsPremiumPricer != address(0), \\\"!_optionsPremiumPricer\\\");\\n        require(_strikeSelection != address(0), \\\"!_strikeSelection\\\");\\n        require(\\n            _premiumDiscount > 0 &&\\n                _premiumDiscount < 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"!_premiumDiscount\\\"\\n        );\\n        require(_auctionDuration >= MIN_AUCTION_DURATION, \\\"!_auctionDuration\\\");\\n        optionsPremiumPricer = _optionsPremiumPricer;\\n        strikeSelection = _strikeSelection;\\n        premiumDiscount = _premiumDiscount;\\n        auctionDuration = _auctionDuration;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new discount on premiums for options we are selling\\n     * @param newPremiumDiscount is the premium discount\\n     */\\n    function setPremiumDiscount(uint256 newPremiumDiscount) external onlyOwner {\\n        require(\\n            newPremiumDiscount > 0 &&\\n                newPremiumDiscount < 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"Invalid discount\\\"\\n        );\\n        emit PremiumDiscountSet(premiumDiscount, newPremiumDiscount);\\n\\n        premiumDiscount = newPremiumDiscount;\\n    }\\n\\n    /**\\n     * @notice Sets the new auction duration\\n     * @param newAuctionDuration is the auction duration\\n     */\\n    function setAuctionDuration(uint256 newAuctionDuration) external onlyOwner {\\n        require(\\n            newAuctionDuration >= MIN_AUCTION_DURATION,\\n            \\\"Invalid auction duration\\\"\\n        );\\n        emit AuctionDurationSet(auctionDuration, newAuctionDuration);\\n\\n        auctionDuration = newAuctionDuration;\\n    }\\n\\n    /**\\n     * @notice Sets the new strike selection contract\\n     * @param newStrikeSelection is the address of the new strike selection contract\\n     */\\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\\n        require(newStrikeSelection != address(0), \\\"!newStrikeSelection\\\");\\n        strikeSelection = newStrikeSelection;\\n    }\\n\\n    /**\\n     * @notice Sets the new options premium pricer contract\\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\\n     */\\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newOptionsPremiumPricer != address(0),\\n            \\\"!newOptionsPremiumPricer\\\"\\n        );\\n        optionsPremiumPricer = newOptionsPremiumPricer;\\n    }\\n\\n    /**\\n     * @notice Optionality to set strike price manually\\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\\n     */\\n    function setStrikePrice(uint128 strikePrice)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(strikePrice > 0, \\\"!strikePrice\\\");\\n        overriddenStrikePrice = strikePrice;\\n        lastStrikeOverrideRound = vaultState.round;\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\n     * @param amount is the amount to withdraw\\n     */\\n    function withdrawInstantly(uint256 amount) external nonReentrant {\\n        Vault.DepositReceipt storage depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        uint256 currentRound = vaultState.round;\\n\\n        require(amount > 0, \\\"!amount\\\");\\n        require(depositReceipt.round == currentRound, \\\"Invalid round\\\");\\n\\n        uint256 receiptAmount = depositReceipt.amount;\\n        require(receiptAmount >= amount, \\\"Exceed amount\\\");\\n\\n        // Subtraction underflow checks already ensure it is smaller than uint104\\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\\n        vaultState.totalPending = uint128(\\n            uint256(vaultState.totalPending).sub(amount)\\n        );\\n\\n        emit InstantWithdraw(msg.sender, amount, currentRound);\\n\\n        VaultLifecycleYearn.unwrapYieldToken(\\n            amount,\\n            vaultParams.asset,\\n            address(collateralToken),\\n            YEARN_WITHDRAWAL_BUFFER,\\n            YEARN_WITHDRAWAL_SLIPPAGE\\n        );\\n        VaultLifecycleYearn.transferAsset(\\n            WETH,\\n            vaultParams.asset,\\n            msg.sender,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     */\\n    function completeWithdraw() external nonReentrant {\\n        uint256 withdrawAmount = _completeWithdraw();\\n        lastQueuedWithdrawAmount = uint128(\\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and closes the existing short.\\n     *         This allows all the users to withdraw if the next option is malicious.\\n     */\\n    function commitAndClose() external nonReentrant {\\n        address oldOption = optionState.currentOption;\\n\\n        VaultLifecycle.CloseParams memory closeParams =\\n            VaultLifecycle.CloseParams({\\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\\n                USDC: USDC,\\n                currentOption: oldOption,\\n                delay: DELAY,\\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\\n                overriddenStrikePrice: overriddenStrikePrice\\n            });\\n\\n        (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        ) =\\n            VaultLifecycleYearn.commitAndClose(\\n                strikeSelection,\\n                optionsPremiumPricer,\\n                premiumDiscount,\\n                closeParams,\\n                vaultParams,\\n                vaultState,\\n                address(collateralToken)\\n            );\\n\\n        emit NewOptionStrikeSelected(strikePrice, delta);\\n\\n        ShareMath.assertUint104(premium);\\n\\n        currentOtokenPremium = uint104(premium);\\n        optionState.nextOption = otokenAddress;\\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\\n        require(\\n            nextOptionReady <= type(uint32).max,\\n            \\\"Overflow nextOptionReady\\\"\\n        );\\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\\n\\n        _closeShort(oldOption);\\n    }\\n\\n    /**\\n     * @notice Closes the existing short position for the vault.\\n     */\\n    function _closeShort(address oldOption) private {\\n        uint256 lockedAmount = vaultState.lockedAmount;\\n        if (oldOption != address(0)) {\\n            vaultState.lastLockedAmount = uint104(lockedAmount);\\n        }\\n        vaultState.lockedAmount = 0;\\n\\n        optionState.currentOption = address(0);\\n\\n        if (oldOption != address(0)) {\\n            uint256 withdrawAmount =\\n                VaultLifecycle.settleShort(GAMMA_CONTROLLER);\\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Rolls the vault's funds into a new short position.\\n     */\\n    function rollToNextOption() external onlyKeeper nonReentrant {\\n        (address newOption, uint256 queuedWithdrawAmount) =\\n            _rollToNextOption(uint256(lastQueuedWithdrawAmount));\\n\\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\\n\\n        // Locked balance denominated in `collateralToken`\\n        // there is a slight imprecision with regards to calculating back from yearn token -> underlying\\n        // that stems from miscoordination between ytoken .deposit() amount wrapped and pricePerShare\\n        // at that point in time.\\n        // ex: if I have 1 eth, deposit 1 eth into yearn vault and calculate value of yearn token balance\\n        // denominated in eth (via balance(yearn token) * pricePerShare) we will get 1 eth - 1 wei.\\n\\n        // We are subtracting `collateralAsset` balance by queuedWithdrawAmount denominated in `collateralAsset` plus\\n        // a buffer for withdrawals taking into account slippage from yearn vault\\n\\n        uint256 lockedBalance =\\n            collateralToken.balanceOf(address(this)).sub(\\n                DSMath.wdiv(\\n                    queuedWithdrawAmount.add(\\n                        queuedWithdrawAmount.mul(YEARN_WITHDRAWAL_BUFFER).div(\\n                            10000\\n                        )\\n                    ),\\n                    collateralToken.pricePerShare().mul(\\n                        VaultLifecycleYearn.decimalShift(\\n                            address(collateralToken)\\n                        )\\n                    )\\n                )\\n            );\\n\\n        emit OpenShort(newOption, lockedBalance, msg.sender);\\n\\n        VaultLifecycle.createShort(\\n            GAMMA_CONTROLLER,\\n            MARGIN_POOL,\\n            newOption,\\n            lockedBalance\\n        );\\n\\n        _startAuction();\\n    }\\n\\n    /**\\n     * @notice Initiate the gnosis auction.\\n     */\\n    function startAuction() external onlyKeeper nonReentrant {\\n        _startAuction();\\n    }\\n\\n    function _startAuction() private {\\n        GnosisAuction.AuctionDetails memory auctionDetails;\\n\\n        uint256 currOtokenPremium = currentOtokenPremium;\\n\\n        require(currOtokenPremium > 0, \\\"!currentOtokenPremium\\\");\\n\\n        auctionDetails.oTokenAddress = optionState.currentOption;\\n        auctionDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\\n        auctionDetails.asset = vaultParams.asset;\\n        auctionDetails.assetDecimals = vaultParams.decimals;\\n        auctionDetails.oTokenPremium = currOtokenPremium;\\n        auctionDetails.duration = auctionDuration;\\n\\n        optionAuctionID = VaultLifecycle.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from gnosis auction.\\n     */\\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\\n        uint256 unlockedAssetAmount =\\n            VaultLifecycle.burnOtokens(\\n                GAMMA_CONTROLLER,\\n                optionState.currentOption\\n            );\\n\\n        vaultState.lockedAmount = uint104(\\n            uint256(vaultState.lockedAmount).sub(unlockedAssetAmount)\\n        );\\n\\n        // Wrap entire `asset` balance to `collateralToken` balance\\n        VaultLifecycleYearn.wrapToYieldToken(\\n            vaultParams.asset,\\n            address(collateralToken)\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/vaults/YearnVaults/base/RibbonVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport {DSMath} from \\\"../../../vendor/DSMath.sol\\\";\\nimport {IYearnRegistry, IYearnVault} from \\\"../../../interfaces/IYearn.sol\\\";\\nimport {Vault} from \\\"../../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../../libraries/VaultLifecycle.sol\\\";\\nimport {VaultLifecycleYearn} from \\\"../../../libraries/VaultLifecycleYearn.sol\\\";\\nimport {ShareMath} from \\\"../../../libraries/ShareMath.sol\\\";\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\n\\ncontract RibbonVault is\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    ERC20Upgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  NON UPGRADEABLE STORAGE\\n     ***********************************************/\\n\\n    /// @notice Stores the user's pending deposit for the round\\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\\n\\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\\n    /// This is used to determine the number of shares to be returned\\n    /// to a user with their DepositReceipt.depositAmount\\n    mapping(uint256 => uint256) public roundPricePerShare;\\n\\n    /// @notice Stores pending user withdrawals\\n    mapping(address => Vault.Withdrawal) public withdrawals;\\n\\n    /// @notice Vault's parameters like cap, decimals\\n    Vault.VaultParams public vaultParams;\\n\\n    /// @notice Vault's lifecycle state like round and locked amounts\\n    Vault.VaultState public vaultState;\\n\\n    /// @notice Vault's state of the options sold and the timelocked option\\n    Vault.OptionState public optionState;\\n\\n    /// @notice Fee recipient for the performance and management fees\\n    address public feeRecipient;\\n\\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\\n    // no access to critical vault changes\\n    address public keeper;\\n\\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\\n    uint256 public performanceFee;\\n\\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\\n    uint256 public managementFee;\\n\\n    /// @notice Yearn vault contract\\n    IYearnVault public collateralToken;\\n\\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\\n    uint256[30] private ____gap;\\n\\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaYearnVaultStorage\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n    address public immutable WETH;\\n\\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n    address public immutable USDC;\\n\\n    /// @notice 15 minute timelock between commitAndClose and rollToNexOption.\\n    uint256 public constant DELAY = 0;\\n\\n    /// @notice Withdrawal buffer for yearn vault\\n    uint256 public constant YEARN_WITHDRAWAL_BUFFER = 5; // 0.05%\\n\\n    /// @notice Slippage incurred during withdrawal\\n    uint256 public constant YEARN_WITHDRAWAL_SLIPPAGE = 5; // 0.05%\\n\\n    /// @notice 7 day period between each options sale.\\n    uint256 public constant PERIOD = 7 days;\\n\\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\\n\\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\\n    // which allows users to perform multiple actions on their vaults\\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\\n    address public immutable GAMMA_CONTROLLER;\\n\\n    // MARGIN_POOL is Gamma protocol's collateral pool.\\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\\n    address public immutable MARGIN_POOL;\\n\\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\\n    address public immutable GNOSIS_EASY_AUCTION;\\n\\n    // Yearn registry contract\\n    address public immutable YEARN_REGISTRY;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event Deposit(address indexed account, uint256 amount, uint256 round);\\n\\n    event InitiateWithdraw(\\n        address indexed account,\\n        uint256 shares,\\n        uint256 round\\n    );\\n\\n    event Redeem(address indexed account, uint256 share, uint256 round);\\n\\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\\n\\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\\n\\n    event CapSet(uint256 oldCap, uint256 newCap);\\n\\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\\n\\n    event CollectVaultFees(\\n        uint256 performanceFee,\\n        uint256 vaultFee,\\n        uint256 round,\\n        address indexed feeRecipient\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _yearnRegistry is the address of the yearn registry from token to vault token\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _yearnRegistry\\n    ) {\\n        require(_weth != address(0), \\\"!_weth\\\");\\n        require(_usdc != address(0), \\\"!_usdc\\\");\\n        require(_gnosisEasyAuction != address(0), \\\"!_gnosisEasyAuction\\\");\\n        require(_gammaController != address(0), \\\"!_gammaController\\\");\\n        require(_marginPool != address(0), \\\"!_marginPool\\\");\\n        require(_yearnRegistry != address(0), \\\"!_yearnRegistry\\\");\\n\\n        WETH = _weth;\\n        USDC = _usdc;\\n        GAMMA_CONTROLLER = _gammaController;\\n        MARGIN_POOL = _marginPool;\\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\\n        YEARN_REGISTRY = _yearnRegistry;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     */\\n    function baseInitialize(\\n        address _owner,\\n        address _keeper,\\n        address _feeRecipient,\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) internal initializer {\\n        VaultLifecycle.verifyInitializerParams(\\n            _owner,\\n            _keeper,\\n            _feeRecipient,\\n            _performanceFee,\\n            _managementFee,\\n            _tokenName,\\n            _tokenSymbol,\\n            _vaultParams\\n        );\\n\\n        __ReentrancyGuard_init();\\n        __ERC20_init(_tokenName, _tokenSymbol);\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n\\n        keeper = _keeper;\\n\\n        feeRecipient = _feeRecipient;\\n        performanceFee = _performanceFee;\\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\\n            WEEKS_PER_YEAR\\n        );\\n        vaultParams = _vaultParams;\\n\\n        _upgradeYearnVault();\\n\\n        uint256 assetBalance = totalBalance();\\n        ShareMath.assertUint104(assetBalance);\\n        vaultState.lastLockedAmount = uint104(assetBalance);\\n\\n        vaultState.round = 1;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the keeper.\\n     */\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"!keeper\\\");\\n        _;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new keeper\\n     * @param newKeeper is the address of the new keeper\\n     */\\n    function setNewKeeper(address newKeeper) external onlyOwner {\\n        require(newKeeper != address(0), \\\"!newKeeper\\\");\\n        keeper = newKeeper;\\n    }\\n\\n    /**\\n     * @notice Sets the new fee recipient\\n     * @param newFeeRecipient is the address of the new fee recipient\\n     */\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n        require(newFeeRecipient != address(0), \\\"!newFeeRecipient\\\");\\n        require(newFeeRecipient != feeRecipient, \\\"Must be new feeRecipient\\\");\\n        feeRecipient = newFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Sets the management fee for the vault\\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\\n     */\\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\\n        require(\\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid management fee\\\"\\n        );\\n\\n        // We are dividing annualized management fee by num weeks in a year\\n        uint256 tmpManagementFee =\\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\\n\\n        emit ManagementFeeSet(managementFee, newManagementFee);\\n\\n        managementFee = tmpManagementFee;\\n    }\\n\\n    /**\\n     * @notice Sets the performance fee for the vault\\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\\n     */\\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\\n        require(\\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid performance fee\\\"\\n        );\\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\\n        performanceFee = newPerformanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets a new cap for deposits\\n     * @param newCap is the new cap for deposits\\n     */\\n    function setCap(uint256 newCap) external onlyOwner {\\n        require(newCap > 0, \\\"!newCap\\\");\\n        ShareMath.assertUint104(newCap);\\n        emit CapSet(vaultParams.cap, newCap);\\n        vaultParams.cap = uint104(newCap);\\n    }\\n\\n    /************************************************\\n     *  DEPOSIT & WITHDRAWALS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender.\\n     * @param amount is the amount of `asset` to deposit\\n     */\\n    function deposit(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"!amount\\\");\\n\\n        _depositFor(amount, msg.sender);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\\n     * @notice Used for vault -> vault deposits on the user's behalf\\n     * @param amount is the amount of `asset` to deposit\\n     * @param creditor is the address that can claim/withdraw deposited amount\\n     */\\n    function depositFor(uint256 amount, address creditor)\\n        external\\n        nonReentrant\\n    {\\n        require(amount > 0, \\\"!amount\\\");\\n        require(creditor != address(0), \\\"!creditor\\\");\\n\\n        _depositFor(amount, creditor);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposits the `collateralToken` into the contract and mint vault shares.\\n     * @param amount is the amount of `collateralToken` to deposit\\n     */\\n    function depositYieldToken(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"!amount\\\");\\n\\n        uint256 amountInAsset =\\n            DSMath.wmul(\\n                amount,\\n                collateralToken.pricePerShare().mul(\\n                    VaultLifecycleYearn.decimalShift(address(collateralToken))\\n                )\\n            );\\n\\n        _depositFor(amountInAsset, msg.sender);\\n\\n        IERC20(address(collateralToken)).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Mints the vault shares to the creditor\\n     * @param amount is the amount of `asset` deposited\\n     * @param creditor is the address to receieve the deposit\\n     */\\n    function _depositFor(uint256 amount, address creditor) private {\\n        uint256 currentRound = vaultState.round;\\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\\n\\n        require(totalWithDepositedAmount <= vaultParams.cap, \\\"Exceed cap\\\");\\n        require(\\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\\n            \\\"Insufficient balance\\\"\\n        );\\n\\n        emit Deposit(creditor, amount, currentRound);\\n\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\\n\\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        uint256 depositAmount = amount;\\n        // If we have a pending deposit in the current round, we add on to the pending deposit\\n        if (currentRound == depositReceipt.round) {\\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\\n            depositAmount = newAmount;\\n        }\\n\\n        ShareMath.assertUint104(depositAmount);\\n\\n        depositReceipts[creditor] = Vault.DepositReceipt({\\n            round: uint16(currentRound),\\n            amount: uint104(depositAmount),\\n            unredeemedShares: uint128(unredeemedShares)\\n        });\\n\\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\\n        ShareMath.assertUint128(newTotalPending);\\n        vaultState.totalPending = uint128(newTotalPending);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n\\n        // We do a max redeem before initiating a withdrawal\\n        // But we check if they must first have unredeemed shares\\n        if (\\n            depositReceipts[msg.sender].amount > 0 ||\\n            depositReceipts[msg.sender].unredeemedShares > 0\\n        ) {\\n            _redeem(0, true);\\n        }\\n\\n        // This caches the `round` variable used in shareBalances\\n        uint256 currentRound = vaultState.round;\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\\n        uint256 existingShares = uint256(withdrawal.shares);\\n        uint256 withdrawalShares;\\n        if (withdrawalIsSameRound) {\\n            withdrawalShares = existingShares.add(numShares);\\n        } else {\\n            require(existingShares == 0, \\\"Existing withdraw\\\");\\n            withdrawalShares = numShares;\\n            withdrawals[msg.sender].round = uint16(currentRound);\\n        }\\n        ShareMath.assertUint128(withdrawalShares);\\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\\n        uint256 newQueuedWithdrawShares =\\n            uint256(vaultState.queuedWithdrawShares).add(numShares);\\n        ShareMath.assertUint128(newQueuedWithdrawShares);\\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\\n\\n        _transfer(msg.sender, address(this), numShares);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     * @return withdrawAmount the current withdrawal amount\\n     */\\n    function _completeWithdraw() internal returns (uint256) {\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        uint256 withdrawalShares = withdrawal.shares;\\n        uint256 withdrawalRound = withdrawal.round;\\n\\n        // This checks if there is a withdrawal\\n        require(withdrawalShares > 0, \\\"Not initiated\\\");\\n\\n        require(withdrawalRound < vaultState.round, \\\"Round not closed\\\");\\n\\n        // We leave the round number as non-zero to save on gas for subsequent writes\\n        withdrawals[msg.sender].shares = 0;\\n        vaultState.queuedWithdrawShares = uint128(\\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\\n        );\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                withdrawalShares,\\n                roundPricePerShare[withdrawalRound],\\n                vaultParams.decimals\\n            );\\n\\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\\n\\n        _burn(address(this), withdrawalShares);\\n\\n        VaultLifecycleYearn.unwrapYieldToken(\\n            withdrawAmount,\\n            vaultParams.asset,\\n            address(collateralToken),\\n            YEARN_WITHDRAWAL_BUFFER,\\n            YEARN_WITHDRAWAL_SLIPPAGE\\n        );\\n\\n        require(withdrawAmount > 0, \\\"!withdrawAmount\\\");\\n\\n        VaultLifecycleYearn.transferAsset(\\n            WETH,\\n            vaultParams.asset,\\n            msg.sender,\\n            withdrawAmount\\n        );\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem\\n     */\\n    function redeem(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n        _redeem(numShares, false);\\n    }\\n\\n    /**\\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\\n     */\\n    function maxRedeem() external nonReentrant {\\n        _redeem(0, true);\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\\n     * @param isMax is flag for when callers do a max redemption\\n     */\\n    function _redeem(uint256 numShares, bool isMax) internal {\\n        Vault.DepositReceipt memory depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        // This handles the null case when depositReceipt.round = 0\\n        // Because we start with round = 1 at `initialize`\\n        uint256 currentRound = vaultState.round;\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        numShares = isMax ? unredeemedShares : numShares;\\n        if (numShares == 0) {\\n            return;\\n        }\\n        require(numShares <= unredeemedShares, \\\"Exceeds available\\\");\\n\\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\\n        // we debit from the unredeemedShares, but leave the amount field intact\\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\\n        if (depositReceipt.round < currentRound) {\\n            depositReceipts[msg.sender].amount = 0;\\n        }\\n\\n        ShareMath.assertUint128(numShares);\\n\\n        depositReceipts[msg.sender].unredeemedShares = uint128(\\n            unredeemedShares.sub(numShares)\\n        );\\n\\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\\n\\n        _transfer(address(this), msg.sender, numShares);\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /*\\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\\n     * @param numRounds is the number of rounds to initialize in the map\\n     */\\n    function initRounds(uint256 numRounds) external nonReentrant {\\n        require(numRounds > 0, \\\"!numRounds\\\");\\n\\n        uint256 _round = vaultState.round;\\n        for (uint256 i = 0; i < numRounds; i++) {\\n            uint256 index = _round + i;\\n            require(roundPricePerShare[index] == 0, \\\"Initialized\\\"); // AVOID OVERWRITING ACTUAL VALUES\\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\\n        }\\n    }\\n\\n    /*\\n     * @notice Helper function that performs most administrative tasks\\n     * such as setting next option, minting new shares, getting vault fees, etc.\\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\\n     * @return newOption is the new option address\\n     * @return queuedWithdrawAmount is the queued amount for withdrawal\\n     */\\n    function _rollToNextOption(uint256 lastQueuedWithdrawAmount)\\n        internal\\n        returns (address, uint256)\\n    {\\n        require(block.timestamp >= optionState.nextOptionReadyAt, \\\"!ready\\\");\\n\\n        address newOption = optionState.nextOption;\\n        require(newOption != address(0), \\\"!nextOption\\\");\\n\\n        (\\n            uint256 lockedBalance,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        ) =\\n            VaultLifecycle.rollover(\\n                vaultState,\\n                VaultLifecycle.RolloverParams(\\n                    vaultParams.decimals,\\n                    totalBalance(),\\n                    totalSupply(),\\n                    lastQueuedWithdrawAmount,\\n                    performanceFee,\\n                    managementFee\\n                )\\n            );\\n\\n        optionState.currentOption = newOption;\\n        optionState.nextOption = address(0);\\n\\n        // Finalize the pricePerShare at the end of the round\\n        uint256 currentRound = vaultState.round;\\n        roundPricePerShare[currentRound] = newPricePerShare;\\n\\n        address recipient = feeRecipient;\\n\\n        emit CollectVaultFees(\\n            performanceFeeInAsset,\\n            totalVaultFee,\\n            currentRound,\\n            recipient\\n        );\\n\\n        vaultState.totalPending = 0;\\n        vaultState.round = uint16(currentRound + 1);\\n        ShareMath.assertUint104(lockedBalance);\\n        vaultState.lockedAmount = uint104(lockedBalance);\\n\\n        _mint(address(this), mintShares);\\n\\n        address collateral = address(collateralToken);\\n\\n        // Wrap entire `asset` balance to `collateralToken` balance\\n        VaultLifecycleYearn.wrapToYieldToken(vaultParams.asset, collateral);\\n\\n        if (totalVaultFee > 0) {\\n            VaultLifecycleYearn.withdrawYieldAndBaseToken(\\n                WETH,\\n                vaultParams.asset,\\n                collateral,\\n                recipient,\\n                totalVaultFee\\n            );\\n        }\\n\\n        return (newOption, queuedWithdrawAmount);\\n    }\\n\\n    /*\\n      Upgrades the vault to point to the latest yearn vault for the asset token\\n    */\\n    function upgradeYearnVault() external onlyOwner {\\n        // Unwrap old yvUSDC\\n        IYearnVault collateral = IYearnVault(collateralToken);\\n        collateral.withdraw(\\n            collateral.balanceOf(address(this)),\\n            address(this),\\n            YEARN_WITHDRAWAL_SLIPPAGE\\n        );\\n\\n        _upgradeYearnVault();\\n    }\\n\\n    function _upgradeYearnVault() internal {\\n        address collateralAddr =\\n            IYearnRegistry(YEARN_REGISTRY).latestVault(vaultParams.asset);\\n        require(collateralAddr != address(0), \\\"!collateralToken\\\");\\n        collateralToken = IYearnVault(collateralAddr);\\n    }\\n\\n    /************************************************\\n     *  GETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Returns the asset balance held on the vault for the account\\n     * @param account is the address to lookup balance for\\n     * @return the amount of `asset` custodied by the vault for the user\\n     */\\n    function accountVaultBalance(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _decimals = vaultParams.decimals;\\n        uint256 assetPerShare =\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                _decimals\\n            );\\n        return\\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance including unredeemed shares\\n     * @param account is the account to lookup share balance for\\n     * @return the share balance\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\\n        return heldByAccount.add(heldByVault);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance split between account and vault holdings\\n     * @param account is the account to lookup share balance for\\n     * @return heldByAccount is the shares held by account\\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\\n     */\\n    function shareBalances(address account)\\n        public\\n        view\\n        returns (uint256 heldByAccount, uint256 heldByVault)\\n    {\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\\n\\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\\n            return (balanceOf(account), 0);\\n        }\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                vaultState.round,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        return (balanceOf(account), unredeemedShares);\\n    }\\n\\n    /**\\n     * @notice The price of a unit of share denominated in the `asset`\\n     */\\n    function pricePerShare() external view returns (uint256) {\\n        return\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                vaultParams.decimals\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\\n     * @return total balance of the vault, including the amounts locked in third party protocols\\n     */\\n    function totalBalance() public view returns (uint256) {\\n        return\\n            uint256(vaultState.lockedAmount)\\n                .add(IERC20(vaultParams.asset).balanceOf(address(this)))\\n                .add(\\n                DSMath.wmul(\\n                    collateralToken.balanceOf(address(this)),\\n                    collateralToken.pricePerShare().mul(\\n                        VaultLifecycleYearn.decimalShift(\\n                            address(collateralToken)\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the token decimals\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return vaultParams.decimals;\\n    }\\n\\n    function cap() external view returns (uint256) {\\n        return vaultParams.cap;\\n    }\\n\\n    function nextOptionReadyAt() external view returns (uint256) {\\n        return optionState.nextOptionReadyAt;\\n    }\\n\\n    function currentOption() external view returns (address) {\\n        return optionState.currentOption;\\n    }\\n\\n    function nextOption() external view returns (address) {\\n        return optionState.nextOption;\\n    }\\n\\n    function totalPending() external view returns (uint256) {\\n        return vaultState.totalPending;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n}\\n\"\n    },\n    \"contracts/storage/RibbonThetaYearnVaultStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nabstract contract RibbonThetaYearnVaultStorageV1 {\\n    // Logic contract used to price options\\n    address public optionsPremiumPricer;\\n    // Logic contract used to select strike prices\\n    address public strikeSelection;\\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\\n    uint256 public premiumDiscount;\\n    // Current oToken premium\\n    uint256 public currentOtokenPremium;\\n    // Last round id at which the strike was manually overridden\\n    uint16 public lastStrikeOverrideRound;\\n    // Price last overridden strike set to\\n    uint256 public overriddenStrikePrice;\\n    // Auction duration\\n    uint256 public auctionDuration;\\n    // Auction id of current option\\n    uint256 public optionAuctionID;\\n}\\n\\nabstract contract RibbonThetaYearnVaultStorageV2 {\\n    // Amount locked for scheduled withdrawals last week;\\n    uint256 public lastQueuedWithdrawAmount;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of RibbonThetaVaultStorage\\n// e.g. RibbonThetaVaultStorage<versionNumber>, so finally it would look like\\n// contract RibbonThetaVaultStorage is RibbonThetaVaultStorageV1, RibbonThetaVaultStorageV2\\nabstract contract RibbonThetaYearnVaultStorage is\\n    RibbonThetaYearnVaultStorageV1,\\n    RibbonThetaYearnVaultStorageV2\\n{\\n\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\nimport {\\n    VaultLifecycleTreasury\\n} from \\\"../../libraries/VaultLifecycleTreasury.sol\\\";\\nimport {\\n    RibbonTreasuryVaultStorage\\n} from \\\"../../storage/RibbonTreasuryVaultStorage.sol\\\";\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\nimport {IWETH} from \\\"../../interfaces/IWETH.sol\\\";\\nimport {GnosisAuction} from \\\"../../libraries/GnosisAuction.sol\\\";\\nimport {IERC20Detailed} from \\\"../../interfaces/IERC20Detailed.sol\\\";\\n\\ncontract RibbonTreasuryVault is\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    ERC20Upgradeable,\\n    RibbonTreasuryVaultStorage\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n    address public immutable WETH;\\n\\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n    address public immutable USDC;\\n\\n    /// @notice 15 minute timelock between commitAndClose and rollToNexOption.\\n    uint256 public constant DELAY = 0;\\n\\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\\n\\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\\n    // which allows users to perform multiple actions on their vaults\\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\\n    address public immutable GAMMA_CONTROLLER;\\n\\n    // MARGIN_POOL is Gamma protocol's collateral pool.\\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\\n    address public immutable MARGIN_POOL;\\n\\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\\n    address public immutable GNOSIS_EASY_AUCTION;\\n\\n    /// OTOKEN_FACTORY is the factory contract used to spawn otokens. Used to lookup otokens.\\n    address public immutable OTOKEN_FACTORY;\\n\\n    // The minimum duration for an option auction.\\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event Deposit(address indexed account, uint256 amount, uint256 round);\\n\\n    event InitiateWithdraw(\\n        address indexed account,\\n        uint256 shares,\\n        uint256 round\\n    );\\n\\n    event Redeem(address indexed account, uint256 share, uint256 round);\\n\\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\\n\\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\\n\\n    event CapSet(uint256 oldCap, uint256 newCap);\\n\\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\\n\\n    event CollectManagementFee(\\n        uint256 managementFee,\\n        uint256 round,\\n        address indexed feeRecipient\\n    );\\n\\n    event CollectPerformanceFee(\\n        uint256 performanceFee,\\n        uint256 round,\\n        address indexed feeRecipient\\n    );\\n\\n    event DistributePremium(\\n        uint256 amount,\\n        uint256[] amounts,\\n        address[] recipients,\\n        uint256 round\\n    );\\n\\n    event OpenShort(\\n        address indexed options,\\n        uint256 depositAmount,\\n        address indexed manager\\n    );\\n\\n    event CloseShort(\\n        address indexed options,\\n        uint256 withdrawAmount,\\n        address indexed manager\\n    );\\n\\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\\n\\n    event PremiumDiscountSet(\\n        uint256 premiumDiscount,\\n        uint256 newPremiumDiscount\\n    );\\n\\n    event AuctionDurationSet(\\n        uint256 auctionDuration,\\n        uint256 newAuctionDuration\\n    );\\n\\n    event InstantWithdraw(\\n        address indexed account,\\n        uint256 amount,\\n        uint256 round\\n    );\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _oTokenFactory,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction\\n    ) {\\n        require(_weth != address(0), \\\"!_weth\\\");\\n        require(_usdc != address(0), \\\"!_usdc\\\");\\n        require(_oTokenFactory != address(0), \\\"!_oTokenFactory\\\");\\n        require(_gammaController != address(0), \\\"!_gammaController\\\");\\n        require(_marginPool != address(0), \\\"!_marginPool\\\");\\n        require(_gnosisEasyAuction != address(0), \\\"!_gnosisEasyAuction\\\");\\n\\n        WETH = _weth;\\n        USDC = _usdc;\\n        OTOKEN_FACTORY = _oTokenFactory;\\n        GAMMA_CONTROLLER = _gammaController;\\n        MARGIN_POOL = _marginPool;\\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     */\\n    function initialize(\\n        VaultLifecycleTreasury.InitParams calldata _initParams,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external initializer {\\n        VaultLifecycleTreasury.verifyInitializerParams(\\n            _initParams,\\n            _vaultParams,\\n            MIN_AUCTION_DURATION\\n        );\\n\\n        __ReentrancyGuard_init();\\n        __ERC20_init(_initParams._tokenName, _initParams._tokenSymbol);\\n        __Ownable_init();\\n        transferOwnership(_initParams._owner);\\n\\n        keeper = _initParams._keeper;\\n        period = _initParams._period;\\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\\n        strikeSelection = _initParams._strikeSelection;\\n        premiumDiscount = _initParams._premiumDiscount;\\n        auctionDuration = _initParams._auctionDuration;\\n        feeRecipient = _initParams._feeRecipient;\\n        performanceFee = _initParams._performanceFee;\\n        managementFee = _perRoundManagementFee(_initParams._managementFee);\\n        maxDepositors = _initParams._maxDepositors;\\n        minDeposit = _initParams._minDeposit;\\n\\n        vaultParams = _vaultParams;\\n        vaultState.round = 1;\\n\\n        uint256 assetBalance =\\n            IERC20(vaultParams.asset).balanceOf(address(this));\\n        ShareMath.assertUint104(assetBalance);\\n        vaultState.lastLockedAmount = uint104(assetBalance);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the keeper.\\n     */\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"!keeper\\\");\\n        _;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new keeper\\n     * @param newKeeper is the address of the new keeper\\n     */\\n    function setNewKeeper(address newKeeper) external onlyOwner {\\n        require(newKeeper != address(0), \\\"!newKeeper\\\");\\n        keeper = newKeeper;\\n    }\\n\\n    /**\\n     * @notice Sets the new fee recipient\\n     * @param newFeeRecipient is the address of the new fee recipient\\n     */\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n        require(newFeeRecipient != address(0), \\\"!newFeeRecipient\\\");\\n        require(newFeeRecipient != feeRecipient, \\\"Must be new feeRecipient\\\");\\n        feeRecipient = newFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Sets the management fee for the vault\\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\\n     */\\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\\n        require(\\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid management fee\\\"\\n        );\\n\\n        managementFee = _perRoundManagementFee(newManagementFee);\\n\\n        emit ManagementFeeSet(managementFee, newManagementFee);\\n    }\\n\\n    /**\\n     * @notice Internal function to set the management fee for the vault\\n     * @param managementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2\\n     * @return perRoundManagementFee is the management divided by the number of rounds per year\\n     */\\n    function _perRoundManagementFee(uint256 managementFee)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _period = period;\\n        uint256 feeDivider =\\n            _period % 30 == 0\\n                ? Vault.FEE_MULTIPLIER * (12 / (_period / 30))\\n                : WEEKS_PER_YEAR / (_period / 7);\\n\\n        // We are dividing annualized management fee by num weeks in a year\\n        return managementFee.mul(Vault.FEE_MULTIPLIER).div(feeDivider);\\n    }\\n\\n    /**\\n     * @notice Sets the performance fee for the vault\\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\\n     */\\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\\n        require(\\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid performance fee\\\"\\n        );\\n\\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\\n\\n        performanceFee = newPerformanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets a new cap for deposits\\n     * @param newCap is the new cap for deposits\\n     */\\n    function setCap(uint256 newCap) external onlyOwner {\\n        require(newCap > 0, \\\"!newCap\\\");\\n        ShareMath.assertUint104(newCap);\\n        emit CapSet(vaultParams.cap, newCap);\\n        vaultParams.cap = uint104(newCap);\\n    }\\n\\n    /**\\n     * @notice Sets the new discount on premiums for options we are selling\\n     * @param newPremiumDiscount is the premium discount\\n     */\\n    function setPremiumDiscount(uint256 newPremiumDiscount) external onlyOwner {\\n        require(\\n            newPremiumDiscount > 0 &&\\n                newPremiumDiscount < 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"Invalid discount\\\"\\n        );\\n\\n        emit PremiumDiscountSet(premiumDiscount, newPremiumDiscount);\\n\\n        premiumDiscount = newPremiumDiscount;\\n    }\\n\\n    /**\\n     * @notice Sets the new auction duration\\n     * @param newAuctionDuration is the auction duration\\n     */\\n    function setAuctionDuration(uint256 newAuctionDuration) external onlyOwner {\\n        require(\\n            newAuctionDuration >= MIN_AUCTION_DURATION,\\n            \\\"Invalid auction duration\\\"\\n        );\\n\\n        emit AuctionDurationSet(auctionDuration, newAuctionDuration);\\n\\n        auctionDuration = newAuctionDuration;\\n    }\\n\\n    /**\\n     * @notice Sets the new strike selection contract\\n     * @param newStrikeSelection is the address of the new strike selection contract\\n     */\\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\\n        require(newStrikeSelection != address(0), \\\"!newStrikeSelection\\\");\\n        strikeSelection = newStrikeSelection;\\n    }\\n\\n    /**\\n     * @notice Sets the new options premium pricer contract\\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\\n     */\\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newOptionsPremiumPricer != address(0),\\n            \\\"!newOptionsPremiumPricer\\\"\\n        );\\n        optionsPremiumPricer = newOptionsPremiumPricer;\\n    }\\n\\n    /**\\n     * @notice Optionality to set strike price manually\\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\\n     */\\n    function setStrikePrice(uint128 strikePrice)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(strikePrice > 0, \\\"!strikePrice\\\");\\n        overriddenStrikePrice = strikePrice;\\n        lastStrikeOverrideRound = vaultState.round;\\n    }\\n\\n    /**\\n     * @notice Set the maximum number of depositors\\n     * @param newMaxDepositors is the new cap for number of depositors\\n     */\\n    function setMaxDepositors(uint256 newMaxDepositors)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(newMaxDepositors > 0, \\\"!newMaxDepositors\\\");\\n        maxDepositors = newMaxDepositors;\\n    }\\n\\n    /**\\n     * @notice Set the minimum deposit amount\\n     * @param newMinDeposit is the new minimum amount for deposit\\n     */\\n    function setMinDeposit(uint256 newMinDeposit)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(newMinDeposit > 0, \\\"!newMinDeposit\\\");\\n        minDeposit = newMinDeposit;\\n    }\\n\\n    /************************************************\\n     *  DEPOSIT & WITHDRAWALS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Internal function to add new depositor address\\n     * @param newDepositor is the address to include in the depositors list\\n     */\\n    function _addDepositor(address newDepositor) internal {\\n        if (!depositorsMap[newDepositor]) {\\n            require(newDepositor != address(0), \\\"Depositor address null\\\");\\n            require(\\n                (depositorsArray.length + 1) <= maxDepositors,\\n                \\\"Number of depositors exceeds limit\\\"\\n            );\\n\\n            depositorsMap[newDepositor] = true;\\n            depositorsArray.push(newDepositor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove addresses from depositors list\\n     * @param excludeDepositor is the address to exclude from the depositors list\\n     */\\n    function _removeDepositor(address excludeDepositor) internal {\\n        address[] storage array = depositorsArray;\\n        uint256 arrayLength = array.length;\\n\\n        require(depositorsMap[excludeDepositor], \\\"Depositor does not exist\\\");\\n\\n        depositorsMap[excludeDepositor] = false;\\n\\n        for (uint256 i = 0; i < arrayLength - 1; i++) {\\n            if (excludeDepositor == array[i]) {\\n                (array[i], array[arrayLength - 1]) = (\\n                    array[arrayLength - 1],\\n                    array[i]\\n                );\\n            }\\n        }\\n        array.pop();\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender.\\n     * @param amount is the amount of `asset` to deposit\\n     */\\n    function deposit(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"!amount\\\");\\n\\n        _addDepositor(msg.sender);\\n\\n        _depositFor(amount, msg.sender);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Mints the vault shares to the creditor\\n     * @param amount is the amount of `asset` deposited\\n     * @param creditor is the address to receieve the deposit\\n     */\\n    function _depositFor(uint256 amount, address creditor) private {\\n        uint256 currentRound = vaultState.round;\\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\\n\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\\n        uint256 totalUserDeposit =\\n            accountVaultBalance(msg.sender).add(depositReceipt.amount).add(\\n                amount\\n            );\\n\\n        require(totalWithDepositedAmount <= vaultParams.cap, \\\"Exceed cap\\\");\\n        require(\\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\\n            \\\"Insufficient balance\\\"\\n        );\\n        require(totalUserDeposit >= minDeposit, \\\"Minimum deposit not reached\\\");\\n\\n        emit Deposit(creditor, amount, currentRound);\\n\\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        uint256 depositAmount = amount;\\n\\n        // If we have a pending deposit in the current round, we add on to the pending deposit\\n        if (currentRound == depositReceipt.round) {\\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\\n            depositAmount = newAmount;\\n        }\\n\\n        ShareMath.assertUint104(depositAmount);\\n\\n        depositReceipts[creditor] = Vault.DepositReceipt({\\n            round: uint16(currentRound),\\n            amount: uint104(depositAmount),\\n            unredeemedShares: uint128(unredeemedShares)\\n        });\\n\\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\\n        ShareMath.assertUint128(newTotalPending);\\n\\n        vaultState.totalPending = uint128(newTotalPending);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n\\n        // We do a max redeem before initiating a withdrawal\\n        // But we check if they must first have unredeemed shares\\n        if (\\n            depositReceipts[msg.sender].amount > 0 ||\\n            depositReceipts[msg.sender].unredeemedShares > 0\\n        ) {\\n            _redeem(0, true);\\n        }\\n\\n        // This caches the `round` variable used in shareBalances\\n        uint256 currentRound = vaultState.round;\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n        uint256 withdrawalRound = withdrawal.round;\\n\\n        bool withdrawalIsSameRound = withdrawalRound == currentRound;\\n\\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\\n\\n        uint256 existingShares = uint256(withdrawal.shares);\\n\\n        uint256 withdrawalShares;\\n        if (withdrawalIsSameRound) {\\n            withdrawalShares = existingShares.add(numShares);\\n        } else {\\n            require(existingShares == 0, \\\"Existing withdraw\\\");\\n            withdrawalShares = numShares;\\n            withdrawals[msg.sender].round = uint16(currentRound);\\n        }\\n\\n        // Ensure withdrawal does not reduce user deposit below the minimum amount\\n        uint256 vaultDecimals = vaultParams.decimals;\\n        uint256 userBalance = accountVaultBalance(msg.sender);\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                numShares,\\n                currentRound != 1\\n                    ? roundPricePerShare[currentRound - 1]\\n                    : 10**vaultDecimals,\\n                vaultDecimals\\n            );\\n\\n        if (userBalance > withdrawAmount) {\\n            uint256 totalDeposit = userBalance.sub(withdrawAmount);\\n            require(totalDeposit >= minDeposit, \\\"Minimum deposit not reached\\\");\\n        }\\n\\n        ShareMath.assertUint128(withdrawalShares);\\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\\n\\n        uint256 newQueuedWithdrawShares =\\n            uint256(vaultState.queuedWithdrawShares).add(numShares);\\n        ShareMath.assertUint128(newQueuedWithdrawShares);\\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\\n\\n        _transfer(msg.sender, address(this), numShares);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     * @return withdrawAmount the current withdrawal amount\\n     */\\n    function _completeWithdraw() internal returns (uint256) {\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        uint256 withdrawalShares = withdrawal.shares;\\n        uint256 withdrawalRound = withdrawal.round;\\n\\n        // This checks if there is a withdrawal\\n        require(withdrawalShares > 0, \\\"Not initiated\\\");\\n\\n        require(withdrawalRound < vaultState.round, \\\"Round not closed\\\");\\n\\n        // We leave the round number as non-zero to save on gas for subsequent writes\\n        withdrawals[msg.sender].shares = 0;\\n        vaultState.queuedWithdrawShares = uint128(\\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\\n        );\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                withdrawalShares,\\n                roundPricePerShare[withdrawalRound],\\n                vaultParams.decimals\\n            );\\n\\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\\n\\n        _burn(address(this), withdrawalShares);\\n\\n        require(withdrawAmount > 0, \\\"!withdrawAmount\\\");\\n        transferAsset(msg.sender, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem\\n     */\\n    function redeem(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n        _redeem(numShares, false);\\n    }\\n\\n    /**\\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\\n     */\\n    function maxRedeem() external nonReentrant {\\n        _redeem(0, true);\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\\n     * @param isMax is flag for when callers do a max redemption\\n     */\\n    function _redeem(uint256 numShares, bool isMax) internal {\\n        Vault.DepositReceipt memory depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        // This handles the null case when depositReceipt.round = 0\\n        // Because we start with round = 1 at `initialize`\\n        uint256 currentRound = vaultState.round;\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        numShares = isMax ? unredeemedShares : numShares;\\n        if (numShares == 0) {\\n            return;\\n        }\\n        require(numShares <= unredeemedShares, \\\"Exceeds available\\\");\\n\\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\\n        // we debit from the unredeemedShares, but leave the amount field intact\\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\\n        if (depositReceipt.round < currentRound) {\\n            depositReceipts[msg.sender].amount = 0;\\n        }\\n\\n        ShareMath.assertUint128(numShares);\\n        depositReceipts[msg.sender].unredeemedShares = uint128(\\n            unredeemedShares.sub(numShares)\\n        );\\n\\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\\n\\n        _transfer(address(this), msg.sender, numShares);\\n    }\\n\\n    /**\\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\n     * @param amount is the amount to withdraw\\n     */\\n    function withdrawInstantly(uint256 amount) external nonReentrant {\\n        Vault.DepositReceipt storage depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        uint256 currentRound = vaultState.round;\\n        require(amount > 0, \\\"!amount\\\");\\n        require(depositReceipt.round == currentRound, \\\"Invalid round\\\");\\n\\n        uint256 receiptAmount = depositReceipt.amount;\\n        require(receiptAmount >= amount, \\\"Exceed amount\\\");\\n\\n        uint256 userBalance =\\n            accountVaultBalance(msg.sender).add(receiptAmount);\\n\\n        if (userBalance > amount) {\\n            uint256 totalUserDeposit = userBalance.sub(amount);\\n            require(\\n                totalUserDeposit >= minDeposit,\\n                \\\"Minimum deposit not reached\\\"\\n            );\\n        }\\n\\n        // Subtraction underflow checks already ensure it is smaller than uint104\\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\\n        vaultState.totalPending = uint128(\\n            uint256(vaultState.totalPending).sub(amount)\\n        );\\n\\n        emit InstantWithdraw(msg.sender, amount, currentRound);\\n\\n        if (depositReceipt.amount == 0 && shares(msg.sender) == 0) {\\n            _removeDepositor(msg.sender);\\n        }\\n\\n        transferAsset(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     */\\n    function completeWithdraw() external nonReentrant {\\n        Vault.DepositReceipt storage depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        uint256 withdrawAmount = _completeWithdraw();\\n        lastQueuedWithdrawAmount = uint128(\\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\\n        );\\n\\n        if (depositReceipt.amount == 0 && shares(msg.sender) == 0) {\\n            _removeDepositor(msg.sender);\\n        }\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /*\\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\\n     * @param numRounds is the number of rounds to initialize in the map\\n     */\\n    function initRounds(uint256 numRounds) external nonReentrant {\\n        require(numRounds > 0, \\\"!numRounds\\\");\\n\\n        uint256 _round = vaultState.round;\\n        for (uint256 i = 0; i < numRounds; i++) {\\n            uint256 index = _round + i;\\n            require(roundPricePerShare[index] == 0, \\\"Initialized\\\"); // AVOID OVERWRITING ACTUAL VALUES\\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\\n        }\\n    }\\n\\n    /*\\n     * @notice Helper function that performs most administrative tasks\\n     * such as setting next option, minting new shares, getting vault fees, etc.\\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\\n     * @return newOption is the new option address\\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\\n     */\\n    function _rollToNextOption(uint256 lastQueuedWithdrawAmount)\\n        internal\\n        returns (\\n            address newOption,\\n            uint256 lockedBalance,\\n            uint256 queuedWithdrawAmount\\n        )\\n    {\\n        require(block.timestamp >= optionState.nextOptionReadyAt, \\\"!ready\\\");\\n\\n        newOption = optionState.nextOption;\\n        require(newOption != address(0), \\\"!nextOption\\\");\\n\\n        uint256 currentRound = vaultState.round;\\n        address recipient = feeRecipient;\\n        uint256 mintShares;\\n        uint256 managementFeeInAsset;\\n        {\\n            uint256 newPricePerShare;\\n            (\\n                lockedBalance,\\n                queuedWithdrawAmount,\\n                newPricePerShare,\\n                mintShares,\\n                managementFeeInAsset\\n            ) = VaultLifecycleTreasury.rollover(\\n                vaultState,\\n                VaultLifecycleTreasury.RolloverParams(\\n                    vaultParams.decimals,\\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\\n                    totalSupply(),\\n                    lastQueuedWithdrawAmount,\\n                    currentRound != 1 ? managementFee : 0\\n                )\\n            );\\n\\n            optionState.currentOption = newOption;\\n            optionState.nextOption = address(0);\\n\\n            // Finalize the pricePerShare at the end of the round\\n\\n            roundPricePerShare[currentRound] = newPricePerShare;\\n\\n            emit CollectManagementFee(\\n                managementFeeInAsset,\\n                currentRound,\\n                recipient\\n            );\\n\\n            vaultState.totalPending = 0;\\n            vaultState.round = uint16(currentRound + 1);\\n        }\\n\\n        _mint(address(this), mintShares);\\n\\n        if (managementFeeInAsset > 0) {\\n            transferAsset(payable(recipient), managementFeeInAsset);\\n        }\\n\\n        return (newOption, lockedBalance, queuedWithdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Helper function to make an ERC20 transfer\\n     * @param recipient is the receiving address\\n     * @param amount is the transfer amount\\n     */\\n    function transferAsset(address recipient, uint256 amount) internal {\\n        address asset = vaultParams.asset;\\n        IERC20(asset).safeTransfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and closes the existing short.\\n     *         This allows all the users to withdraw if the next option is malicious.\\n     */\\n    function commitAndClose() external nonReentrant {\\n        address oldOption = optionState.currentOption;\\n\\n        VaultLifecycleTreasury.CloseParams memory closeParams =\\n            VaultLifecycleTreasury.CloseParams({\\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\\n                USDC: USDC,\\n                currentOption: oldOption,\\n                delay: DELAY,\\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\\n                overriddenStrikePrice: overriddenStrikePrice,\\n                period: period\\n            });\\n\\n        (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        ) =\\n            VaultLifecycleTreasury.commitAndClose(\\n                strikeSelection,\\n                optionsPremiumPricer,\\n                premiumDiscount,\\n                closeParams,\\n                vaultParams,\\n                vaultState\\n            );\\n\\n        emit NewOptionStrikeSelected(strikePrice, delta);\\n\\n        ShareMath.assertUint104(premium);\\n        currentOtokenPremium = uint104(premium);\\n        optionState.nextOption = otokenAddress;\\n\\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\\n        require(\\n            nextOptionReady <= type(uint32).max,\\n            \\\"Overflow nextOptionReady\\\"\\n        );\\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\\n\\n        _closeShort(oldOption);\\n\\n        // In case chargeAndDistribute was not called last round, call\\n        // the function to conclude last round's performance fee and distribution\\n        if (IERC20(USDC).balanceOf(address(this)) > 0) {\\n            _chargeAndDistribute();\\n        }\\n    }\\n\\n    /**\\n     * @notice Closes the existing short position for the vault.\\n     */\\n    function _closeShort(address oldOption) private {\\n        uint256 lockedAmount = vaultState.lockedAmount;\\n        if (oldOption != address(0)) {\\n            vaultState.lastLockedAmount = uint104(lockedAmount);\\n        }\\n        vaultState.lockedAmount = 0;\\n\\n        optionState.currentOption = address(0);\\n\\n        if (oldOption != address(0)) {\\n            uint256 withdrawAmount =\\n                VaultLifecycleTreasury.settleShort(GAMMA_CONTROLLER);\\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Rolls the vault's funds into a new short position.\\n     */\\n    function rollToNextOption() external onlyKeeper nonReentrant {\\n        (\\n            address newOption,\\n            uint256 lockedBalance,\\n            uint256 queuedWithdrawAmount\\n        ) = _rollToNextOption(uint256(lastQueuedWithdrawAmount));\\n\\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\\n\\n        ShareMath.assertUint104(lockedBalance);\\n        vaultState.lockedAmount = uint104(lockedBalance);\\n\\n        emit OpenShort(newOption, lockedBalance, msg.sender);\\n\\n        VaultLifecycleTreasury.createShort(\\n            GAMMA_CONTROLLER,\\n            MARGIN_POOL,\\n            newOption,\\n            lockedBalance\\n        );\\n\\n        _startAuction();\\n    }\\n\\n    /**\\n     * @notice Initiate the gnosis auction.\\n     */\\n    function startAuction() external onlyKeeper nonReentrant {\\n        _startAuction();\\n    }\\n\\n    function _startAuction() private {\\n        GnosisAuction.AuctionDetails memory auctionDetails;\\n\\n        uint256 currOtokenPremium = currentOtokenPremium;\\n\\n        require(currOtokenPremium > 0, \\\"!currentOtokenPremium\\\");\\n\\n        uint256 stableDecimals = IERC20Detailed(USDC).decimals();\\n\\n        auctionDetails.oTokenAddress = optionState.currentOption;\\n        auctionDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\\n        auctionDetails.asset = USDC;\\n        auctionDetails.assetDecimals = stableDecimals;\\n        auctionDetails.oTokenPremium = currOtokenPremium;\\n        auctionDetails.duration = auctionDuration;\\n\\n        optionAuctionID = VaultLifecycleTreasury.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from gnosis auction.\\n     */\\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\\n        uint256 unlockedAssetAmount =\\n            VaultLifecycleTreasury.burnOtokens(\\n                GAMMA_CONTROLLER,\\n                optionState.currentOption\\n            );\\n\\n        vaultState.lockedAmount = uint104(\\n            uint256(vaultState.lockedAmount).sub(unlockedAssetAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Settles the round's Gnosis auction and distribute the premiums earned\\n     */\\n    function concludeOptionsSale() external onlyKeeper nonReentrant {\\n        VaultLifecycleTreasury.settleAuction(\\n            GNOSIS_EASY_AUCTION,\\n            optionAuctionID\\n        );\\n\\n        if (IERC20(USDC).balanceOf(address(this)) > 0) {\\n            _chargeAndDistribute();\\n        }\\n    }\\n\\n    /**\\n     * @notice Charge performance fee and distribute remaining to depositors addresses\\n     */\\n    function chargeAndDistribute() external onlyKeeper nonReentrant {\\n        _chargeAndDistribute();\\n    }\\n\\n    /**\\n     * @notice Calculate performance fee and transfer to fee recipient\\n     */\\n    function _chargeAndDistribute() internal {\\n        IERC20 stableAsset = IERC20(USDC);\\n        uint256 stableBalance = stableAsset.balanceOf(address(this));\\n\\n        require(stableBalance > 0, \\\"no premium to distribute\\\");\\n\\n        _chargePerformanceFee(stableAsset, stableBalance);\\n\\n        _distributePremium(\\n            stableAsset,\\n            stableAsset.balanceOf(address(this)) // Get the new balance\\n        );\\n    }\\n\\n    /**\\n     * @notice Charge performance fee\\n     */\\n    function _chargePerformanceFee(IERC20 token, uint256 amount) internal {\\n        address recipient = feeRecipient;\\n        uint256 transferAmount =\\n            amount.mul(performanceFee).div(100 * Vault.FEE_MULTIPLIER);\\n\\n        token.safeTransfer(recipient, transferAmount);\\n\\n        // Performance fee for the round is charged after rollover\\n        // hence we need to adjust the round to the previous\\n        emit CollectPerformanceFee(\\n            transferAmount,\\n            vaultState.round - 1,\\n            recipient\\n        );\\n    }\\n\\n    /**\\n     * @notice Distribute the premium to depositor addresses\\n     */\\n    function _distributePremium(IERC20 token, uint256 amount) internal {\\n        // Distribute to depositor address\\n        address[] storage _depositors = depositorsArray;\\n        uint256[] memory _amounts = new uint256[](_depositors.length);\\n        uint256 totalSupply = totalSupply();\\n\\n        for (uint256 i = 0; i < _depositors.length; i++) {\\n            // Distribute to depositors proportional to the amount of\\n            // shares they own\\n            address depositorAddress = _depositors[i];\\n            _amounts[i] = shares(depositorAddress).mul(amount).div(totalSupply);\\n\\n            token.safeTransfer(depositorAddress, _amounts[i]);\\n        }\\n\\n        emit DistributePremium(\\n            amount,\\n            _amounts,\\n            _depositors,\\n            vaultState.round - 1\\n        );\\n    }\\n\\n    /************************************************\\n     *  GETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Returns the asset balance held on the vault for the account\\n     * @param account is the address to lookup balance for\\n     * @return the amount of `asset` custodied by the vault for the user\\n     */\\n    function accountVaultBalance(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _decimals = vaultParams.decimals;\\n        uint256 assetPerShare =\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                _decimals\\n            );\\n        return\\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance including unredeemed shares\\n     * @param account is the account to lookup share balance for\\n     * @return the share balance\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\\n        return heldByAccount.add(heldByVault);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance split between account and vault holdings\\n     * @param account is the account to lookup share balance for\\n     * @return heldByAccount is the shares held by account\\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\\n     */\\n    function shareBalances(address account)\\n        public\\n        view\\n        returns (uint256 heldByAccount, uint256 heldByVault)\\n    {\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\\n\\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\\n            return (balanceOf(account), 0);\\n        }\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                vaultState.round,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        return (balanceOf(account), unredeemedShares);\\n    }\\n\\n    /**\\n     * @notice The price of a unit of share denominated in the `asset`\\n     */\\n    function pricePerShare() external view returns (uint256) {\\n        return\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                vaultParams.decimals\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\\n     * @return total balance of the vault, including the amounts locked in third party protocols\\n     */\\n    function totalBalance() public view returns (uint256) {\\n        return\\n            uint256(vaultState.lockedAmount).add(\\n                IERC20(vaultParams.asset).balanceOf(address(this))\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the token decimals\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return vaultParams.decimals;\\n    }\\n\\n    /**\\n     * @notice Returns the maximum capacity of the vault in terms of the vault's asset\\n     */\\n    function cap() external view returns (uint256) {\\n        return vaultParams.cap;\\n    }\\n\\n    /**\\n     * @notice Returns the date and time for the next options sale\\n     */\\n    function nextOptionReadyAt() external view returns (uint256) {\\n        return optionState.nextOptionReadyAt;\\n    }\\n\\n    /**\\n     * @notice Returns the options specification for the current round\\n     */\\n    function currentOption() external view returns (address) {\\n        return optionState.currentOption;\\n    }\\n\\n    /**\\n     * @notice Returns the options specification for the next round\\n     */\\n    function nextOption() external view returns (address) {\\n        return optionState.nextOption;\\n    }\\n\\n    /**\\n     * @notice Returns total pending deposit for the current round\\n     */\\n    function totalPending() external view returns (uint256) {\\n        return vaultState.totalPending;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/VaultLifecycleTreasury.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\nimport {IStrikeSelection} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {GnosisAuction} from \\\"./GnosisAuction.sol\\\";\\nimport {DateTime} from \\\"./DateTime.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    IOtoken,\\n    IController,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\n\\nlibrary VaultLifecycleTreasury {\\n    using SafeMath for uint256;\\n    using SupportsNonCompliantERC20 for IERC20;\\n\\n    struct CloseParams {\\n        address OTOKEN_FACTORY;\\n        address USDC;\\n        address currentOption;\\n        uint256 delay;\\n        uint16 lastStrikeOverrideRound;\\n        uint256 overriddenStrikePrice;\\n        uint256 period;\\n    }\\n\\n    /**\\n     * @notice Initialization parameters for the vault.\\n     * @param _owner is the owner of the vault with critical permissions\\n     * @param _feeRecipient is the address to recieve vault performance and management fees\\n     * @param _managementFee is the management fee pct.\\n     * @param _performanceFee is the perfomance fee pct.\\n     * @param _tokenName is the name of the token\\n     * @param _tokenSymbol is the symbol of the token\\n     * @param _optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param _strikeSelection is the address of the contract with strike selection logic\\n     * @param _premiumDiscount is the vault's discount applied to the premium\\n     * @param _auctionDuration is the duration of the gnosis auction\\n     * @param _period is the period between each option sales\\n     */\\n    struct InitParams {\\n        address _owner;\\n        address _keeper;\\n        address _feeRecipient;\\n        uint256 _managementFee;\\n        uint256 _performanceFee;\\n        string _tokenName;\\n        string _tokenSymbol;\\n        address _optionsPremiumPricer;\\n        address _strikeSelection;\\n        uint32 _premiumDiscount;\\n        uint256 _auctionDuration;\\n        uint256 _period;\\n        uint256 _maxDepositors;\\n        uint256 _minDeposit;\\n    }\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\\n     * @param strikeSelection is the address of the contract with strike selection logic\\n     * @param optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param premiumDiscount is the vault's discount applied to the premium\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @return otokenAddress is the address of the new option\\n     * @return premium is the premium of the new option\\n     * @return strikePrice is the strike price of the new option\\n     * @return delta is the delta of the new option\\n     */\\n    function commitAndClose(\\n        address strikeSelection,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount,\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        Vault.VaultState storage vaultState\\n    )\\n        external\\n        returns (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        )\\n    {\\n        uint256 expiry;\\n\\n        // uninitialized state\\n        if (closeParams.currentOption == address(0)) {\\n            expiry = getNextExpiry(block.timestamp, closeParams.period);\\n        } else {\\n            expiry = getNextExpiry(\\n                IOtoken(closeParams.currentOption).expiryTimestamp(),\\n                closeParams.period\\n            );\\n        }\\n\\n        IStrikeSelection selection = IStrikeSelection(strikeSelection);\\n\\n        bool isPut = vaultParams.isPut;\\n        address underlying = vaultParams.underlying;\\n        address asset = vaultParams.asset;\\n\\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\\n            vaultState.round\\n            ? (closeParams.overriddenStrikePrice, 0)\\n            : selection.getStrikePrice(expiry, isPut);\\n\\n        require(strikePrice != 0, \\\"!strikePrice\\\");\\n\\n        // retrieve address if option already exists, or deploy it\\n        otokenAddress = getOrDeployOtoken(\\n            closeParams,\\n            vaultParams,\\n            underlying,\\n            asset,\\n            strikePrice,\\n            expiry,\\n            isPut\\n        );\\n\\n        // get the black scholes premium of the option\\n        premium = GnosisAuction.getOTokenPremiumInStables(\\n            otokenAddress,\\n            optionsPremiumPricer,\\n            premiumDiscount\\n        );\\n\\n        require(premium > 0, \\\"!premium\\\");\\n\\n        return (otokenAddress, premium, strikePrice, delta);\\n    }\\n\\n    /**\\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\\n     * @param otokenAddress is the address of the otoken\\n     * @param vaultParams is the struct with vault general data\\n     * @param collateralAsset is the address of the collateral asset\\n     * @param USDC is the address of usdc\\n     * @param delay is the delay between commitAndClose and rollToNextOption\\n     */\\n    function verifyOtoken(\\n        address otokenAddress,\\n        Vault.VaultParams storage vaultParams,\\n        address collateralAsset,\\n        address USDC,\\n        uint256 delay\\n    ) private view {\\n        require(otokenAddress != address(0), \\\"!otokenAddress\\\");\\n\\n        IOtoken otoken = IOtoken(otokenAddress);\\n        require(otoken.isPut() == vaultParams.isPut, \\\"Type mismatch\\\");\\n        require(\\n            otoken.underlyingAsset() == vaultParams.underlying,\\n            \\\"Wrong underlyingAsset\\\"\\n        );\\n        require(\\n            otoken.collateralAsset() == collateralAsset,\\n            \\\"Wrong collateralAsset\\\"\\n        );\\n\\n        // we just assume all options use USDC as the strike\\n        require(otoken.strikeAsset() == USDC, \\\"strikeAsset != USDC\\\");\\n\\n        uint256 readyAt = block.timestamp.add(delay);\\n        require(otoken.expiryTimestamp() >= readyAt, \\\"Expiry before delay\\\");\\n    }\\n\\n    /**\\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\\n     * @param asset is the address of the vault's asset\\n     * @param decimals is the decimals of the asset\\n     * @param lastQueuedWithdrawAmount is the amount queued for withdrawals from last round\\n     * @param managementFee is the management fee percent to charge on the AUM\\n     */\\n    struct RolloverParams {\\n        uint256 decimals;\\n        uint256 totalBalance;\\n        uint256 currentShareSupply;\\n        uint256 lastQueuedWithdrawAmount;\\n        uint256 managementFee;\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\\n     * @param params is the rollover parameters passed to compute the next state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     * @return managementFeeInAsset is the amount of management fee charged by vault\\n     */\\n    function rollover(\\n        Vault.VaultState storage vaultState,\\n        RolloverParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 managementFeeInAsset\\n        )\\n    {\\n        uint256 currentBalance = params.totalBalance;\\n        uint256 pendingAmount = vaultState.totalPending;\\n        uint256 queuedWithdrawShares = vaultState.queuedWithdrawShares;\\n\\n        uint256 balanceForVaultFees;\\n        {\\n            uint256 pricePerShareBeforeFee =\\n                ShareMath.pricePerShare(\\n                    params.currentShareSupply,\\n                    currentBalance,\\n                    pendingAmount,\\n                    params.decimals\\n                );\\n\\n            uint256 queuedWithdrawBeforeFee =\\n                params.currentShareSupply > 0\\n                    ? ShareMath.sharesToAsset(\\n                        queuedWithdrawShares,\\n                        pricePerShareBeforeFee,\\n                        params.decimals\\n                    )\\n                    : 0;\\n\\n            // Deduct the difference between the newly scheduled withdrawals\\n            // and the older withdrawals\\n            // so we can charge them fees before they leave\\n            uint256 withdrawAmountDiff =\\n                queuedWithdrawBeforeFee > params.lastQueuedWithdrawAmount\\n                    ? queuedWithdrawBeforeFee.sub(\\n                        params.lastQueuedWithdrawAmount\\n                    )\\n                    : 0;\\n\\n            balanceForVaultFees = currentBalance\\n                .sub(queuedWithdrawBeforeFee)\\n                .add(withdrawAmountDiff);\\n        }\\n\\n        managementFeeInAsset = getManagementFee(\\n            balanceForVaultFees,\\n            vaultState.totalPending,\\n            params.managementFee\\n        );\\n\\n        // Take into account the fee\\n        // so we can calculate the newPricePerShare\\n        currentBalance = currentBalance.sub(managementFeeInAsset);\\n\\n        {\\n            newPricePerShare = ShareMath.pricePerShare(\\n                params.currentShareSupply,\\n                currentBalance,\\n                pendingAmount,\\n                params.decimals\\n            );\\n\\n            // After closing the short, if the options expire in-the-money\\n            // vault pricePerShare would go down because vault's asset balance decreased.\\n            // This ensures that the newly-minted shares do not take on the loss.\\n            mintShares = ShareMath.assetToShares(\\n                pendingAmount,\\n                newPricePerShare,\\n                params.decimals\\n            );\\n\\n            uint256 newSupply = params.currentShareSupply.add(mintShares);\\n\\n            queuedWithdrawAmount = newSupply > 0\\n                ? ShareMath.sharesToAsset(\\n                    queuedWithdrawShares,\\n                    newPricePerShare,\\n                    params.decimals\\n                )\\n                : 0;\\n        }\\n\\n        return (\\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\\n            queuedWithdrawAmount,\\n            newPricePerShare,\\n            mintShares,\\n            managementFeeInAsset\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\\n     * @param oTokenAddress is the address of the otoken to mint\\n     * @param depositAmount is the amount of collateral to deposit\\n     * @return the otoken mint amount\\n     */\\n    function createShort(\\n        address gammaController,\\n        address marginPool,\\n        address oTokenAddress,\\n        uint256 depositAmount\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n        uint256 newVaultID =\\n            (controller.getAccountVaultCounter(address(this))).add(1);\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IOtoken oToken = IOtoken(oTokenAddress);\\n        address collateralAsset = oToken.collateralAsset();\\n\\n        uint256 collateralDecimals =\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\n        uint256 mintAmount;\\n\\n        if (oToken.isPut()) {\\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\\n            // This is because of an issue with precision.\\n            //\\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\\n            //\\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\\n            // We retain the dust in the vault so the calling contract can withdraw the\\n            // actual locked amount + dust at settlement.\\n            //\\n            // To test this behavior, we can console.log\\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\\n            // to see how much dust (or excess collateral) is left behind.\\n            mintAmount = depositAmount\\n                .mul(10**Vault.OTOKEN_DECIMALS)\\n                .mul(10**18) // we use 10**18 to give extra precision\\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\\n        } else {\\n            mintAmount = depositAmount;\\n\\n            if (collateralDecimals > 8) {\\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\\n                if (mintAmount > scaleBy) {\\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\\n                }\\n            }\\n        }\\n\\n        // double approve to fix non-compliant ERC20s\\n        IERC20 collateralToken = IERC20(collateralAsset);\\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](3);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.OpenVault,\\n            address(this), // owner\\n            address(this), // receiver\\n            address(0), // asset, otoken\\n            newVaultID, // vaultId\\n            0, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.DepositCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            collateralAsset, // deposited asset\\n            newVaultID, // vaultId\\n            depositAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[2] = IController.ActionArgs(\\n            IController.ActionType.MintShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            oTokenAddress, // option address\\n            newVaultID, // vaultId\\n            mintAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        return mintAmount;\\n    }\\n\\n    /**\\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\\n     calling SettleVault action, this assumption should hold.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @return amount of collateral redeemed from the vault\\n     */\\n    function settleShort(address gammaController) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        // The short position has been previously closed, or all the otokens have been burned.\\n        // So we return early.\\n        if (address(collateralToken) == address(0)) {\\n            return 0;\\n        }\\n\\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // If it is after expiry, we need to settle the short position using the normal way\\n        // Delete the vault and withdraw all remaining collateral from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.SettleVault,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(0), // not used\\n            vaultID, // vaultId\\n            0, // not used\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\\n     * It calls the `Redeem` action to claim the payout.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param oldOption is the address of the old option\\n     * @param asset is the address of the vault's asset\\n     * @return amount of asset received by exercising the option\\n     */\\n    function settleLong(\\n        address gammaController,\\n        address oldOption,\\n        address asset\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\\n\\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\\n            return 0;\\n        }\\n\\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        // If it is after expiry, we need to redeem the profits\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.Redeem,\\n            address(0), // not used\\n            address(this), // address to send profits to\\n            oldOption, // address of otoken\\n            0, // not used\\n            oldOptionBalance, // otoken balance\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        return endAssetBalance.sub(startAssetBalance);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param currentOption is the address of the current option\\n     * @return amount of collateral redeemed by burning otokens\\n     */\\n    function burnOtokens(address gammaController, address currentOption)\\n        external\\n        returns (uint256)\\n    {\\n        uint256 numOTokensToBurn =\\n            IERC20(currentOption).balanceOf(address(this));\\n\\n        require(numOTokensToBurn > 0, \\\"No oTokens to burn\\\");\\n\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // Burning `amount` of oTokens from the ribbon vault,\\n        // then withdrawing the corresponding collateral amount from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](2);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.BurnShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            address(vault.shortOtokens[0]), // otoken address\\n            vaultID, // vaultId\\n            numOTokensToBurn, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.WithdrawCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(collateralToken), // withdrawn asset\\n            vaultID, // vaultId\\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\\n                vault.shortAmounts[0]\\n            ), // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Calculates the management fee for this week's round\\n     * @param currentBalance is the balance of funds held on the vault after closing short\\n     * @param pendingAmount is the pending deposit amount\\n     * @param managementFeePercent is the management fee pct.\\n     * @return managementFeeInAsset is the management fee\\n     */\\n    function getManagementFee(\\n        uint256 currentBalance,\\n        uint256 pendingAmount,\\n        uint256 managementFeePercent\\n    ) internal pure returns (uint256 managementFeeInAsset) {\\n        // At the first round, currentBalance=0, pendingAmount>0\\n        // so we just do not charge anything on the first round\\n        uint256 lockedBalanceSansPending =\\n            currentBalance > pendingAmount\\n                ? currentBalance.sub(pendingAmount)\\n                : 0;\\n\\n        uint256 _managementFeeInAsset;\\n\\n        // Always charge management fee regardless of whether the vault is\\n        // making a profit from the previous options sale\\n        _managementFeeInAsset = managementFeePercent > 0\\n            ? lockedBalanceSansPending.mul(managementFeePercent).div(\\n                100 * Vault.FEE_MULTIPLIER\\n            )\\n            : 0;\\n\\n        return _managementFeeInAsset;\\n    }\\n\\n    /**\\n     * @notice Either retrieves the option token if it already exists, or deploy it\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param underlying is the address of the underlying asset of the option\\n     * @param collateralAsset is the address of the collateral asset of the option\\n     * @param strikePrice is the strike price of the option\\n     * @param expiry is the expiry timestamp of the option\\n     * @param isPut is whether the option is a put\\n     * @return the address of the option\\n     */\\n    function getOrDeployOtoken(\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        address underlying,\\n        address collateralAsset,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    ) internal returns (address) {\\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\\n\\n        address otokenFromFactory =\\n            factory.getOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        if (otokenFromFactory != address(0)) {\\n            return otokenFromFactory;\\n        }\\n\\n        address otoken =\\n            factory.createOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        verifyOtoken(\\n            otoken,\\n            vaultParams,\\n            collateralAsset,\\n            closeParams.USDC,\\n            closeParams.delay\\n        );\\n\\n        return otoken;\\n    }\\n\\n    /**\\n     * @notice Starts the gnosis auction\\n     * @param auctionDetails is the struct with all the custom parameters of the auction\\n     * @return the auction id of the newly created auction\\n     */\\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\\n        external\\n        returns (uint256)\\n    {\\n        return GnosisAuction.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Settles the gnosis auction\\n     * @param gnosisEasyAuction is the contract address of Gnosis easy auction protocol\\n     * @param auctionID is the auction ID of the gnosis easy auction\\n     */\\n    function settleAuction(address gnosisEasyAuction, uint256 auctionID)\\n        internal\\n    {\\n        IGnosisAuction(gnosisEasyAuction).settleAuction(auctionID);\\n    }\\n\\n    /**\\n     * @notice Places a bid in an auction\\n     * @param bidDetails is the struct with all the details of the\\n      bid including the auction's id and how much to bid\\n     */\\n    function placeBid(GnosisAuction.BidDetails calldata bidDetails)\\n        external\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        return GnosisAuction.placeBid(bidDetails);\\n    }\\n\\n    /**\\n     * @notice Claims the oTokens belonging to the vault\\n     * @param auctionSellOrder is the sell order of the bid\\n     * @param gnosisEasyAuction is the address of the gnosis auction contract\\n     holding custody to the funds\\n     * @param counterpartyThetaVault is the address of the counterparty theta\\n     vault of this delta vault\\n     */\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) external {\\n        GnosisAuction.claimAuctionOtokens(\\n            auctionSellOrder,\\n            gnosisEasyAuction,\\n            counterpartyThetaVault\\n        );\\n    }\\n\\n    /**\\n     * @notice Verify the constructor params satisfy requirements\\n     * @param _initParams is the initialization parameter including owner, keeper, etc.\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function verifyInitializerParams(\\n        InitParams calldata _initParams,\\n        Vault.VaultParams calldata _vaultParams,\\n        uint256 _min_auction_duration\\n    ) external pure {\\n        require(_initParams._owner != address(0), \\\"!_owner\\\");\\n        require(_initParams._keeper != address(0), \\\"!_keeper\\\");\\n        require(_initParams._feeRecipient != address(0), \\\"!_feeRecipient\\\");\\n        require(\\n            _initParams._performanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"performanceFee >= 100%\\\"\\n        );\\n        require(\\n            _initParams._managementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"managementFee >= 100%\\\"\\n        );\\n        require(bytes(_initParams._tokenName).length > 0, \\\"!_tokenName\\\");\\n        require(bytes(_initParams._tokenSymbol).length > 0, \\\"!_tokenSymbol\\\");\\n        require(\\n            (_initParams._period == 7) ||\\n                (_initParams._period == 14) ||\\n                (_initParams._period == 30) ||\\n                (_initParams._period == 90) ||\\n                (_initParams._period == 180),\\n            \\\"!_period\\\"\\n        );\\n        require(\\n            _initParams._optionsPremiumPricer != address(0),\\n            \\\"!_optionsPremiumPricer\\\"\\n        );\\n        require(\\n            _initParams._strikeSelection != address(0),\\n            \\\"!_strikeSelection\\\"\\n        );\\n        require(\\n            _initParams._premiumDiscount > 0 &&\\n                _initParams._premiumDiscount <\\n                100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"!_premiumDiscount\\\"\\n        );\\n        require(\\n            _initParams._auctionDuration >= _min_auction_duration,\\n            \\\"!_auctionDuration\\\"\\n        );\\n        require(_initParams._maxDepositors > 0, \\\"!_maxDepositors\\\");\\n        require(_initParams._minDeposit > 0, \\\"!_minDeposit\\\");\\n\\n        require(_vaultParams.asset != address(0), \\\"!asset\\\");\\n        require(_vaultParams.underlying != address(0), \\\"!underlying\\\");\\n        require(_vaultParams.minimumSupply > 0, \\\"!minimumSupply\\\");\\n        require(_vaultParams.cap > 0, \\\"!cap\\\");\\n        require(\\n            _vaultParams.cap > _vaultParams.minimumSupply,\\n            \\\"cap has to be higher than minimumSupply\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the next options expiry timestamp, this function should be called\\n     when there is sufficient guard to ensure valid period\\n     * @param timestamp is the expiry timestamp of the current option\\n     * @param period is no. of days in between option sales. Available periods are: \\n     * 7(1w), 14(2w), 30(1m), 90(3m), 180(6m)\\n     */\\n    function getNextExpiry(uint256 timestamp, uint256 period)\\n        internal\\n        pure\\n        returns (uint256 nextExpiry)\\n    {\\n        if (period == 7) {\\n            nextExpiry = DateTime.getNextFriday(timestamp);\\n            nextExpiry = nextExpiry <= timestamp\\n                ? nextExpiry + 1 weeks\\n                : nextExpiry;\\n        } else if (period == 14) {\\n            nextExpiry = DateTime.getNextFriday(timestamp);\\n            nextExpiry = nextExpiry <= timestamp\\n                ? nextExpiry + 2 weeks\\n                : nextExpiry;\\n        } else if (period == 30) {\\n            nextExpiry = DateTime.getMonthLastFriday(timestamp);\\n            nextExpiry = nextExpiry <= timestamp\\n                ? DateTime.getMonthLastFriday(nextExpiry + 1 weeks)\\n                : nextExpiry;\\n        } else if (period == 90) {\\n            nextExpiry = DateTime.getQuarterLastFriday(timestamp);\\n            nextExpiry = nextExpiry <= timestamp\\n                ? DateTime.getQuarterLastFriday(nextExpiry + 1 weeks)\\n                : nextExpiry;\\n        } else if (period == 180) {\\n            nextExpiry = DateTime.getBiannualLastFriday(timestamp);\\n            nextExpiry = nextExpiry <= timestamp\\n                ? DateTime.getBiannualLastFriday(nextExpiry + 1 weeks)\\n                : nextExpiry;\\n        }\\n\\n        nextExpiry = nextExpiry - (nextExpiry % (24 hours)) + (8 hours);\\n    }\\n}\\n\"\n    },\n    \"contracts/storage/RibbonTreasuryVaultStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\nabstract contract RibbonTreasuryVaultStorageV1 {\\n    /// @notice Vault's parameters like cap, decimals\\n    Vault.VaultParams public vaultParams;\\n\\n    /// @notice Vault's lifecycle state like round and locked amounts\\n    Vault.VaultState public vaultState;\\n\\n    /// @notice Vault's state of the options sold and the timelocked option\\n    Vault.OptionState public optionState;\\n\\n    /// @notice Stores the user's pending deposit for the round\\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\\n\\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\\n    /// This is used to determine the number of shares to be returned\\n    /// to a user with their DepositReceipt.depositAmount\\n    mapping(uint256 => uint256) public roundPricePerShare;\\n\\n    /// @notice Stores pending user withdrawals\\n    mapping(address => Vault.Withdrawal) public withdrawals;\\n\\n    /// @notice Mapping of depositors in the vault\\n    mapping(address => bool) public depositorsMap;\\n\\n    /// @notice Array of depositors in the vault\\n    address[] public depositorsArray;\\n\\n    /// @notice Fee recipient for the performance and management fees\\n    address public feeRecipient;\\n\\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\\n    // no access to critical vault changes\\n    address public keeper;\\n\\n    /// @notice Logic contract used to price options\\n    address public optionsPremiumPricer;\\n\\n    /// @notice Logic contract used to select strike prices\\n    address public strikeSelection;\\n\\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\\n    uint256 public performanceFee;\\n\\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\\n    uint256 public managementFee;\\n\\n    /// @notice Premium discount on options we are selling (thousandths place: 000 - 999)\\n    uint256 public premiumDiscount;\\n\\n    /// @notice Current oToken premium\\n    uint256 public currentOtokenPremium;\\n\\n    /// @notice Price last overridden strike set to\\n    uint256 public overriddenStrikePrice;\\n\\n    /// @notice Auction duration\\n    uint256 public auctionDuration;\\n\\n    /// @notice Auction id of current option\\n    uint256 public optionAuctionID;\\n\\n    /// @notice Amount locked for scheduled withdrawals last week;\\n    uint256 public lastQueuedWithdrawAmount;\\n\\n    /// @notice Period between each options sale.\\n    /// Available options 7 (weekly), 14 (biweekly), 30 (monthly), 90 (quarterly), 180 (biannually)\\n    uint256 public period;\\n\\n    /// @notice Maximum number of depositors\\n    uint256 public maxDepositors;\\n\\n    /// @notice Minimum amount to deposit\\n    uint256 public minDeposit;\\n\\n    /// @notice Last round id at which the strike was manually overridden\\n    uint16 public lastStrikeOverrideRound;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of RibbonTreasuryVaultStorage\\n// e.g. RibbonTreasuryVaultStorage<versionNumber>, so finally it would look like\\n// contract RibbonTreasuryVaultStorage is RibbonTreasuryVaultStorageV1, RibbonTreasuryVaultStorageV2\\nabstract contract RibbonTreasuryVaultStorage is RibbonTreasuryVaultStorageV1 {\\n\\n}\\n\"\n    },\n    \"contracts/libraries/DateTime.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Source: https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n// ----------------------------------------------------------------------------\\n\\npragma solidity =0.8.4;\\n\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days =\\n            _day -\\n                32075 +\\n                (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n                4 +\\n                (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n                12 -\\n                (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n                4 -\\n                OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) =\\n            _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    /**\\n     * @notice Gets the Friday of the same week\\n     * @param timestamp is the given date and time\\n     * @return the Friday of the same week in unix time\\n     */\\n    function getThisWeekFriday(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return timestamp + 5 days - getDayOfWeek(timestamp) * 1 days;\\n    }\\n\\n    /**\\n     * @notice Gets the next friday after the given date and time\\n     * @param timestamp is the given date and time\\n     * @return the next friday after the given date and time\\n     */\\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\\n        uint256 friday = getThisWeekFriday(timestamp);\\n        return friday >= timestamp ? friday : friday + 1 weeks;\\n    }\\n\\n    /**\\n     * @notice Gets the last day of the month\\n     * @param timestamp is the given date and time\\n     * @return the last day of the same month in unix time\\n     */\\n    function getLastDayOfMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            timestampFromDate(getYear(timestamp), getMonth(timestamp) + 1, 1) -\\n            1 days;\\n    }\\n\\n    /**\\n     * @notice Gets the last Friday of the month\\n     * @param timestamp is the given date and time\\n     * @return the last Friday of the same month in unix time\\n     */\\n    function getMonthLastFriday(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 lastDay = getLastDayOfMonth(timestamp);\\n        uint256 friday = getThisWeekFriday(lastDay);\\n\\n        return friday > lastDay ? friday - 1 weeks : friday;\\n    }\\n\\n    /**\\n     * @notice Gets the last Friday of the quarter\\n     * @param timestamp is the given date and time\\n     * @return the last Friday of the quarter in unix time\\n     */\\n    function getQuarterLastFriday(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 month = getMonth(timestamp);\\n        uint256 quarterMonth =\\n            (month <= 3) ? 3 : (month <= 6) ? 6 : (month <= 9) ? 9 : 12;\\n\\n        uint256 quarterDate =\\n            timestampFromDate(getYear(timestamp), quarterMonth, 1);\\n\\n        return getMonthLastFriday(quarterDate);\\n    }\\n\\n    /**\\n     * @notice Gets the last Friday of the half-year\\n     * @param timestamp is the given date and time\\n     * @return the last friday of the half-year\\n     */\\n    function getBiannualLastFriday(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 month = getMonth(timestamp);\\n        uint256 biannualMonth = (month <= 6) ? 6 : 12;\\n\\n        uint256 biannualDate =\\n            timestampFromDate(getYear(timestamp), biannualMonth, 1);\\n\\n        return getMonthLastFriday(biannualDate);\\n    }\\n}\\n\"\n    },\n    \"contracts/tests/TestVaultLifecycleTreasury.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {VaultLifecycleTreasury} from \\\"../libraries/VaultLifecycleTreasury.sol\\\";\\n\\ncontract TestVaultLifecycleTreasury {\\n    function getNextExpiry(uint256 currentExpiry, uint256 interval)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return VaultLifecycleTreasury.getNextExpiry(currentExpiry, interval);\\n    }\\n}\\n\"\n    },\n    \"contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {GnosisAuction} from \\\"../../libraries/GnosisAuction.sol\\\";\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../libraries/VaultLifecycle.sol\\\";\\nimport {VaultLifecycleSTETH} from \\\"../../libraries/VaultLifecycleSTETH.sol\\\";\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\nimport {RibbonVault} from \\\"./base/RibbonVault.sol\\\";\\nimport {\\n    RibbonThetaSTETHVaultStorage\\n} from \\\"../../storage/RibbonThetaSTETHVaultStorage.sol\\\";\\n\\n/**\\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\\n * the inheritance chain closely.\\n * Any changes/appends in storage variable needs to happen in RibbonThetaSTETHVaultStorage.\\n * RibbonThetaSTETHVault should not inherit from any other contract aside from RibbonVault, RibbonThetaSTETHVaultStorage\\n */\\ncontract RibbonThetaSTETHVault is RibbonVault, RibbonThetaSTETHVaultStorage {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice is the factory contract used to spawn otokens. Used to lookup otokens.\\n    address public immutable OTOKEN_FACTORY;\\n\\n    // The minimum duration for an option auction.\\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event OpenShort(\\n        address indexed options,\\n        uint256 depositAmount,\\n        address indexed manager\\n    );\\n\\n    event CloseShort(\\n        address indexed options,\\n        uint256 withdrawAmount,\\n        address indexed manager\\n    );\\n\\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\\n\\n    event PremiumDiscountSet(\\n        uint256 premiumDiscount,\\n        uint256 newPremiumDiscount\\n    );\\n\\n    event AuctionDurationSet(\\n        uint256 auctionDuration,\\n        uint256 newAuctionDuration\\n    );\\n\\n    event InstantWithdraw(\\n        address indexed account,\\n        uint256 amount,\\n        uint256 round\\n    );\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _wsteth is the LDO contract\\n     * @param _ldo is the LDO contract\\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _crvPool is the steth/eth crv stables pool\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _wsteth,\\n        address _ldo,\\n        address _oTokenFactory,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _crvPool\\n    )\\n        RibbonVault(\\n            _weth,\\n            _usdc,\\n            _wsteth,\\n            _ldo,\\n            _gammaController,\\n            _marginPool,\\n            _gnosisEasyAuction,\\n            _crvPool\\n        )\\n    {\\n        require(_oTokenFactory != address(0), \\\"!_oTokenFactory\\\");\\n        OTOKEN_FACTORY = _oTokenFactory;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     * @param _owner is the owner of the vault with critical permissions\\n     * @param _keeper is the keeper of the vault with medium permissions (weekly actions)\\n     * @param _feeRecipient is the address to recieve vault performance and management fees\\n     * @param _managementFee is the management fee pct.\\n     * @param _performanceFee is the perfomance fee pct.\\n     * @param _tokenName is the name of the token\\n     * @param _tokenSymbol is the symbol of the token\\n     * @param _optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param _strikeSelection is the address of the contract with strike selection logic\\n     * @param _premiumDiscount is the vault's discount applied to the premium\\n     * @param _auctionDuration is the duration of the gnosis auction\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function initialize(\\n        address _owner,\\n        address _keeper,\\n        address _feeRecipient,\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        address _optionsPremiumPricer,\\n        address _strikeSelection,\\n        uint32 _premiumDiscount,\\n        uint256 _auctionDuration,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external initializer {\\n        baseInitialize(\\n            _owner,\\n            _keeper,\\n            _feeRecipient,\\n            _managementFee,\\n            _performanceFee,\\n            _tokenName,\\n            _tokenSymbol,\\n            _vaultParams\\n        );\\n        require(_optionsPremiumPricer != address(0), \\\"!_optionsPremiumPricer\\\");\\n        require(_strikeSelection != address(0), \\\"!_strikeSelection\\\");\\n        require(\\n            _premiumDiscount > 0 &&\\n                _premiumDiscount < 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"!_premiumDiscount\\\"\\n        );\\n        require(_auctionDuration >= MIN_AUCTION_DURATION, \\\"!_auctionDuration\\\");\\n        optionsPremiumPricer = _optionsPremiumPricer;\\n        strikeSelection = _strikeSelection;\\n        premiumDiscount = _premiumDiscount;\\n        auctionDuration = _auctionDuration;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new discount on premiums for options we are selling\\n     * @param newPremiumDiscount is the premium discount\\n     */\\n    function setPremiumDiscount(uint256 newPremiumDiscount) external onlyOwner {\\n        require(\\n            newPremiumDiscount > 0 &&\\n                newPremiumDiscount < 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"Invalid discount\\\"\\n        );\\n\\n        emit PremiumDiscountSet(premiumDiscount, newPremiumDiscount);\\n        premiumDiscount = newPremiumDiscount;\\n    }\\n\\n    /**\\n     * @notice Sets the new auction duration\\n     * @param newAuctionDuration is the auction duration\\n     */\\n    function setAuctionDuration(uint256 newAuctionDuration) external onlyOwner {\\n        require(\\n            newAuctionDuration >= MIN_AUCTION_DURATION,\\n            \\\"Invalid auction duration\\\"\\n        );\\n        emit AuctionDurationSet(auctionDuration, newAuctionDuration);\\n        auctionDuration = newAuctionDuration;\\n    }\\n\\n    /**\\n     * @notice Sets the new strike selection or options premium pricer contract\\n     * @param newContract is the address of the new strike selection or options premium pricer contract\\n     * @param isStrikeSelection is whether we are setting the strike selection contract\\n     */\\n    function setStrikeSelectionOrPricer(\\n        address newContract,\\n        bool isStrikeSelection\\n    ) external onlyOwner {\\n        require(newContract != address(0), \\\"!newContract\\\");\\n        if (isStrikeSelection) {\\n            strikeSelection = newContract;\\n        } else {\\n            optionsPremiumPricer = newContract;\\n        }\\n    }\\n\\n    /**\\n     * @notice Optionality to set strike price manually\\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\\n     */\\n    function setStrikePrice(uint128 strikePrice)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(strikePrice > 0, \\\"!strikePrice\\\");\\n        overriddenStrikePrice = strikePrice;\\n        lastStrikeOverrideRound = vaultState.round;\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\n     * @param amount is the amount to withdraw in `asset`\\n     * @param minETHOut is the min amount of `asset` to recieve for the swapped amount of steth in crv pool\\n     */\\n    function withdrawInstantly(uint256 amount, uint256 minETHOut)\\n        external\\n        nonReentrant\\n    {\\n        Vault.DepositReceipt storage depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        uint256 currentRound = vaultState.round;\\n\\n        require(amount > 0, \\\"!amount\\\");\\n        require(depositReceipt.round == currentRound, \\\"Invalid round\\\");\\n\\n        uint256 receiptAmount = depositReceipt.amount;\\n        require(receiptAmount >= amount, \\\"Exceed amount\\\");\\n\\n        // Subtraction underflow checks already ensure it is smaller than uint104\\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\\n        vaultState.totalPending = uint128(\\n            uint256(vaultState.totalPending).sub(amount)\\n        );\\n\\n        emit InstantWithdraw(msg.sender, amount, currentRound);\\n\\n        // Unwrap may incur curve pool slippage\\n        uint256 amountETHOut =\\n            VaultLifecycleSTETH.unwrapYieldToken(\\n                amount,\\n                address(collateralToken),\\n                STETH,\\n                STETH_ETH_CRV_POOL,\\n                minETHOut\\n            );\\n\\n        VaultLifecycleSTETH.transferAsset(msg.sender, amountETHOut);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     * @param minETHOut is the min amount of `asset` to recieve for the swapped amount of steth in crv pool\\n     */\\n    function completeWithdraw(uint256 minETHOut) external nonReentrant {\\n        uint256 withdrawAmount = _completeWithdraw(minETHOut);\\n        lastQueuedWithdrawAmount = uint128(\\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and closes the existing short.\\n     *         This allows all the users to withdraw if the next option is malicious.\\n     */\\n    function commitAndClose() external nonReentrant {\\n        address oldOption = optionState.currentOption;\\n\\n        VaultLifecycle.CloseParams memory closeParams =\\n            VaultLifecycle.CloseParams({\\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\\n                USDC: USDC,\\n                currentOption: oldOption,\\n                delay: DELAY,\\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\\n                overriddenStrikePrice: overriddenStrikePrice\\n            });\\n\\n        (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        ) =\\n            VaultLifecycleSTETH.commitAndClose(\\n                strikeSelection,\\n                optionsPremiumPricer,\\n                premiumDiscount,\\n                closeParams,\\n                vaultParams,\\n                vaultState,\\n                address(collateralToken)\\n            );\\n\\n        emit NewOptionStrikeSelected(strikePrice, delta);\\n\\n        ShareMath.assertUint104(premium);\\n\\n        currentOtokenPremium = uint104(premium);\\n        optionState.nextOption = otokenAddress;\\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\\n        require(\\n            nextOptionReady <= type(uint32).max,\\n            \\\"Overflow nextOptionReady\\\"\\n        );\\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\\n\\n        _closeShort(oldOption);\\n    }\\n\\n    /**\\n     * @notice Closes the existing short position for the vault.\\n     */\\n    function _closeShort(address oldOption) private {\\n        uint256 lockedAmount = vaultState.lockedAmount;\\n        if (oldOption != address(0)) {\\n            vaultState.lastLockedAmount = uint104(lockedAmount);\\n        }\\n        vaultState.lockedAmount = 0;\\n\\n        optionState.currentOption = address(0);\\n\\n        if (oldOption != address(0)) {\\n            uint256 withdrawAmount =\\n                VaultLifecycle.settleShort(GAMMA_CONTROLLER);\\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Rolls the vault's funds into a new short position.\\n     */\\n    function rollToNextOption() external onlyKeeper nonReentrant {\\n        (address newOption, uint256 queuedWithdrawAmount) =\\n            _rollToNextOption(uint256(lastQueuedWithdrawAmount));\\n\\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\\n\\n        // Locked balance denominated in `collateralToken`\\n        uint256 lockedBalance =\\n            collateralToken.balanceOf(address(this)).sub(\\n                collateralToken.getWstETHByStETH(queuedWithdrawAmount)\\n            );\\n\\n        emit OpenShort(newOption, lockedBalance, msg.sender);\\n\\n        VaultLifecycleSTETH.createShort(\\n            GAMMA_CONTROLLER,\\n            MARGIN_POOL,\\n            newOption,\\n            lockedBalance\\n        );\\n\\n        _startAuction();\\n    }\\n\\n    /**\\n     * @notice Initiate the gnosis auction.\\n     */\\n    function startAuction() external onlyKeeper nonReentrant {\\n        _startAuction();\\n    }\\n\\n    function _startAuction() private {\\n        GnosisAuction.AuctionDetails memory auctionDetails;\\n\\n        uint256 currOtokenPremium = currentOtokenPremium;\\n\\n        require(currOtokenPremium > 0, \\\"!currentOtokenPremium\\\");\\n\\n        auctionDetails.oTokenAddress = optionState.currentOption;\\n        auctionDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\\n        auctionDetails.asset = vaultParams.asset;\\n        auctionDetails.assetDecimals = vaultParams.decimals;\\n        auctionDetails.oTokenPremium = currOtokenPremium;\\n        auctionDetails.duration = auctionDuration;\\n\\n        optionAuctionID = VaultLifecycle.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from gnosis auction.\\n     */\\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\\n        uint256 unlockedAssetAmount =\\n            VaultLifecycle.burnOtokens(\\n                GAMMA_CONTROLLER,\\n                optionState.currentOption\\n            );\\n\\n        vaultState.lockedAmount = uint104(\\n            uint256(vaultState.lockedAmount).sub(\\n                collateralToken.getStETHByWstETH(unlockedAssetAmount)\\n            )\\n        );\\n\\n        // Wrap entire `asset` balance to `collateralToken` balance\\n        VaultLifecycleSTETH.wrapToYieldToken(\\n            WETH,\\n            address(collateralToken),\\n            STETH\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/VaultLifecycleSTETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {VaultLifecycle} from \\\"./VaultLifecycle.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\nimport {ISTETH, IWSTETH} from \\\"../interfaces/ISTETH.sol\\\";\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\nimport {ICRV} from \\\"../interfaces/ICRV.sol\\\";\\nimport {IStrikeSelection} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {GnosisAuction} from \\\"./GnosisAuction.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    IOtoken,\\n    IController,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\n\\nlibrary VaultLifecycleSTETH {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\\n     * @param strikeSelection is the address of the contract with strike selection logic\\n     * @param optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param premiumDiscount is the vault's discount applied to the premium\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @param collateralAsset is the address of the collateral asset\\n     * @return otokenAddress is the address of the new option\\n     * @return premium is the premium of the new option\\n     * @return strikePrice is the strike price of the new option\\n     * @return delta is the delta of the new option\\n     */\\n    function commitAndClose(\\n        address strikeSelection,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount,\\n        VaultLifecycle.CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        Vault.VaultState storage vaultState,\\n        address collateralAsset\\n    )\\n        external\\n        returns (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        )\\n    {\\n        uint256 expiry =\\n            VaultLifecycle.getNextExpiry(closeParams.currentOption);\\n\\n        IStrikeSelection selection = IStrikeSelection(strikeSelection);\\n\\n        // calculate strike and delta\\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\\n            vaultState.round\\n            ? (closeParams.overriddenStrikePrice, selection.delta())\\n            : selection.getStrikePrice(expiry, false);\\n\\n        require(strikePrice != 0, \\\"!strikePrice\\\");\\n\\n        // retrieve address if option already exists, or deploy it\\n        otokenAddress = VaultLifecycle.getOrDeployOtoken(\\n            closeParams,\\n            vaultParams,\\n            vaultParams.underlying,\\n            collateralAsset,\\n            strikePrice,\\n            expiry,\\n            false\\n        );\\n\\n        // get the black scholes premium of the option and adjust premium based on\\n        // steth <-> eth exchange rate\\n        premium = DSMath.wmul(\\n            GnosisAuction.getOTokenPremium(\\n                otokenAddress,\\n                optionsPremiumPricer,\\n                premiumDiscount\\n            ),\\n            IWSTETH(collateralAsset).stEthPerToken()\\n        );\\n\\n        require(premium > 0, \\\"!premium\\\");\\n\\n        return (otokenAddress, premium, strikePrice, delta);\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param currentShareSupply is the total supply of shares\\n     * @param currentBalance is the total balance of the vault\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     */\\n    function rollover(\\n        uint256 currentShareSupply,\\n        uint256 currentBalance,\\n        Vault.VaultParams calldata vaultParams,\\n        Vault.VaultState calldata vaultState\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares\\n        )\\n    {\\n        uint256 pendingAmount = uint256(vaultState.totalPending);\\n        uint256 _decimals = vaultParams.decimals;\\n\\n        newPricePerShare = ShareMath.pricePerShare(\\n            currentShareSupply,\\n            currentBalance,\\n            pendingAmount,\\n            _decimals\\n        );\\n\\n        // After closing the short, if the options expire in-the-money\\n        // vault pricePerShare would go down because vault's asset balance decreased.\\n        // This ensures that the newly-minted shares do not take on the loss.\\n        uint256 _mintShares =\\n            ShareMath.assetToShares(pendingAmount, newPricePerShare, _decimals);\\n\\n        uint256 newSupply = currentShareSupply.add(_mintShares);\\n        uint256 queuedAmount =\\n            newSupply > 0\\n                ? ShareMath.sharesToAsset(\\n                    vaultState.queuedWithdrawShares,\\n                    newPricePerShare,\\n                    _decimals\\n                )\\n                : 0;\\n\\n        return (\\n            currentBalance.sub(queuedAmount),\\n            queuedAmount,\\n            newPricePerShare,\\n            _mintShares\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\\n     * @param oTokenAddress is the address of the otoken to mint\\n     * @param depositAmount is the amount of collateral to deposit\\n     * @return the otoken mint amount\\n     */\\n    function createShort(\\n        address gammaController,\\n        address marginPool,\\n        address oTokenAddress,\\n        uint256 depositAmount\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n        uint256 newVaultID =\\n            (controller.getAccountVaultCounter(address(this))).add(1);\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IOtoken oToken = IOtoken(oTokenAddress);\\n        address collateralAsset = oToken.collateralAsset();\\n\\n        uint256 collateralDecimals =\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\n        uint256 mintAmount;\\n\\n        mintAmount = depositAmount;\\n        if (collateralDecimals > 8) {\\n            uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\\n            if (mintAmount > scaleBy) {\\n                mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\\n            }\\n        }\\n\\n        IERC20 collateralToken = IERC20(collateralAsset);\\n        collateralToken.safeApprove(marginPool, depositAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](3);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.OpenVault,\\n            address(this), // owner\\n            address(this), // receiver\\n            address(0), // asset, otoken\\n            newVaultID, // vaultId\\n            0, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.DepositCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            collateralAsset, // deposited asset\\n            newVaultID, // vaultId\\n            depositAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[2] = IController.ActionArgs(\\n            IController.ActionType.MintShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            oTokenAddress, // option address\\n            newVaultID, // vaultId\\n            mintAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        return mintAmount;\\n    }\\n\\n    /**\\n     * @notice Withdraws stETH + WETH (if necessary) from vault using vault shares\\n     * @param collateralToken is the address of the collateral token\\n     * @param weth is the WETH address\\n     * @param recipient is the recipient\\n     * @param amount is the withdraw amount in `asset`\\n     * @return withdrawAmount is the withdraw amount in `collateralToken`\\n     */\\n    function withdrawYieldAndBaseToken(\\n        address collateralToken,\\n        address weth,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (uint256) {\\n        IWSTETH collateral = IWSTETH(collateralToken);\\n\\n        uint256 withdrawAmount = collateral.getWstETHByStETH(amount);\\n\\n        uint256 yieldTokenBalance =\\n            withdrawYieldToken(collateralToken, recipient, withdrawAmount);\\n\\n        // If there is not enough wstETH in the vault, it withdraws as much as possible and\\n        // transfers the rest in `asset`\\n        if (withdrawAmount > yieldTokenBalance) {\\n            withdrawBaseToken(\\n                collateralToken,\\n                weth,\\n                recipient,\\n                withdrawAmount,\\n                yieldTokenBalance\\n            );\\n        }\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @notice Withdraws stETH from vault\\n     * @param collateralToken is the address of the collateral token\\n     * @param recipient is the recipient\\n     * @param withdrawAmount is the withdraw amount in terms of yearn tokens\\n     * @return yieldTokenBalance is the balance of the yield token\\n     */\\n    function withdrawYieldToken(\\n        address collateralToken,\\n        address recipient,\\n        uint256 withdrawAmount\\n    ) internal returns (uint256) {\\n        IERC20 collateral = IERC20(collateralToken);\\n\\n        uint256 yieldTokenBalance = collateral.balanceOf(address(this));\\n        uint256 yieldTokensToWithdraw =\\n            DSMath.min(yieldTokenBalance, withdrawAmount);\\n        if (yieldTokensToWithdraw > 0) {\\n            collateral.safeTransfer(recipient, yieldTokensToWithdraw);\\n        }\\n\\n        return yieldTokenBalance;\\n    }\\n\\n    /**\\n     * @notice Withdraws `asset` from vault\\n     * @param collateralToken is the address of the collateral token\\n     * @param weth is the WETH address\\n     * @param recipient is the recipient\\n     * @param withdrawAmount is the withdraw amount in terms of yearn tokens\\n     * @param yieldTokenBalance is the collateral token (stETH) balance of the vault\\n     */\\n    function withdrawBaseToken(\\n        address collateralToken,\\n        address weth,\\n        address recipient,\\n        uint256 withdrawAmount,\\n        uint256 yieldTokenBalance\\n    ) internal {\\n        uint256 underlyingTokensToWithdraw =\\n            IWSTETH(collateralToken).getStETHByWstETH(\\n                withdrawAmount.sub(yieldTokenBalance)\\n            );\\n\\n        IWETH(weth).deposit{value: underlyingTokensToWithdraw}();\\n        IERC20(weth).safeTransfer(recipient, underlyingTokensToWithdraw);\\n    }\\n\\n    /**\\n     * @notice Unwraps the necessary amount of the wstETH token\\n     *         and transfers ETH amount to vault\\n     * @param amount is the amount of ETH to withdraw\\n     * @param wstEth is the address of wstETH\\n     * @param stethToken is the address of stETH\\n     * @param crvPool is the address of the steth <-> eth pool on curve\\n     * @param minETHOut is the minimum eth amount to receive from the swap\\n     * @return amountETHOut is the amount of eth unwrapped\\n     available for the withdrawal (may incur curve slippage)\\n     */\\n    function unwrapYieldToken(\\n        uint256 amount,\\n        address wstEth,\\n        address stethToken,\\n        address crvPool,\\n        uint256 minETHOut\\n    ) external returns (uint256) {\\n        require(\\n            amount >= minETHOut,\\n            \\\"Amount withdrawn smaller than minETHOut from swap\\\"\\n        );\\n        require(\\n            minETHOut.mul(10**18).div(amount) >= 0.95 ether,\\n            \\\"Slippage on minETHOut too high\\\"\\n        );\\n\\n        uint256 ethBalance = address(this).balance;\\n        IERC20 steth = IERC20(stethToken);\\n        uint256 stethBalance = steth.balanceOf(address(this));\\n\\n        // 3 different success scenarios\\n        // Scenario 1. We hold enough ETH to satisfy withdrawal. Send it out directly\\n        // Scenario 2. We hold enough wstETH to satisy withdrawal. Unwrap then swap\\n        // Scenario 3. We hold enough ETH + stETH to satisfy withdrawal. Do a swap\\n\\n        // Scenario 1\\n        if (ethBalance >= amount) {\\n            return amount;\\n        }\\n\\n        // Scenario 2\\n        stethBalance = unwrapWstethForWithdrawal(\\n            wstEth,\\n            steth,\\n            ethBalance,\\n            stethBalance,\\n            amount,\\n            minETHOut\\n        );\\n\\n        // Scenario 3\\n        // Now that we satisfied the ETH + stETH sum, we swap the stETH amounts necessary\\n        // to facilitate a withdrawal\\n\\n        // This won't underflow since we already asserted that ethBalance < amount before this\\n        uint256 stEthAmountToSwap =\\n            DSMath.min(amount.sub(ethBalance), stethBalance);\\n\\n        uint256 ethAmountOutFromSwap =\\n            swapStEthToEth(steth, crvPool, stEthAmountToSwap);\\n\\n        uint256 totalETHOut = ethBalance.add(ethAmountOutFromSwap);\\n\\n        // Since minETHOut is derived from calling the Curve pool's getter,\\n        // it reverts in the worst case where the user needs to unwrap and sell\\n        // 100% of their ETH withdrawal amount\\n        require(\\n            totalETHOut >= minETHOut,\\n            \\\"Output ETH amount smaller than minETHOut\\\"\\n        );\\n\\n        return totalETHOut;\\n    }\\n\\n    /**\\n     * @notice Unwraps the required amount of wstETH to a target ETH amount\\n     * @param wstEthAddress is the address for wstETH\\n     * @param steth is the ERC20 of stETH\\n     * @param startStEthBalance is the starting stETH balance used to determine how much more to unwrap\\n     * @param ethAmount is the ETH amount needed for the contract\\n     * @param minETHOut is the ETH amount but adjusted for slippage\\n     * @return the new stETH balance\\n     */\\n    function unwrapWstethForWithdrawal(\\n        address wstEthAddress,\\n        IERC20 steth,\\n        uint256 ethBalance,\\n        uint256 startStEthBalance,\\n        uint256 ethAmount,\\n        uint256 minETHOut\\n    ) internal returns (uint256) {\\n        uint256 ethstEthSum = ethBalance.add(startStEthBalance);\\n\\n        if (ethstEthSum < minETHOut) {\\n            uint256 stethNeededFromUnwrap = ethAmount.sub(ethstEthSum);\\n            IWSTETH wstEth = IWSTETH(wstEthAddress);\\n            uint256 wstAmountToUnwrap =\\n                wstEth.getWstETHByStETH(stethNeededFromUnwrap);\\n\\n            wstEth.unwrap(wstAmountToUnwrap);\\n\\n            uint256 newStEthBalance = steth.balanceOf(address(this));\\n            require(\\n                ethBalance.add(newStEthBalance) >= minETHOut,\\n                \\\"Unwrapping wstETH did not return sufficient stETH\\\"\\n            );\\n            return newStEthBalance;\\n        }\\n        return startStEthBalance;\\n    }\\n\\n    /**\\n     * @notice Swaps from stEth to ETH on the Lido Curve pool\\n     * @param steth is the address for the Lido staked ether\\n     * @param crvPool is the Curve pool address to do the swap\\n     * @param stEthAmount is the stEth amount to be swapped to Ether\\n     * @return ethAmountOutFromSwap is the returned ETH amount from swap\\n     */\\n    function swapStEthToEth(\\n        IERC20 steth,\\n        address crvPool,\\n        uint256 stEthAmount\\n    ) internal returns (uint256) {\\n        steth.safeApprove(crvPool, stEthAmount);\\n\\n        // CRV SWAP HERE from steth -> eth\\n        // 0 = ETH, 1 = STETH\\n        // We are setting 1, which is the smallest possible value for the _minAmountOut parameter\\n        // However it is fine because we check that the totalETHOut >= minETHOut at the end\\n        // which makes sandwich attacks not possible\\n        uint256 ethAmountOutFromSwap =\\n            ICRV(crvPool).exchange(1, 0, stEthAmount, 1);\\n\\n        return ethAmountOutFromSwap;\\n    }\\n\\n    /**\\n     * @notice Wraps the necessary amount of the base token to the yield-bearing yearn token\\n     * @param weth is the address of weth\\n     * @param collateralToken is the address of the collateral token\\n     */\\n    function wrapToYieldToken(\\n        address weth,\\n        address collateralToken,\\n        address steth\\n    ) external {\\n        // Unwrap all weth premiums transferred to contract\\n        IWETH wethToken = IWETH(weth);\\n        uint256 wethBalance = wethToken.balanceOf(address(this));\\n\\n        if (wethBalance > 0) {\\n            wethToken.withdraw(wethBalance);\\n        }\\n\\n        uint256 ethBalance = address(this).balance;\\n\\n        IWSTETH collateral = IWSTETH(collateralToken);\\n        IERC20 stethToken = IERC20(steth);\\n\\n        if (ethBalance > 0) {\\n            // Send eth to Lido, recieve steth\\n            ISTETH(steth).submit{value: ethBalance}(address(this));\\n        }\\n\\n        // Get all steth in contract\\n        uint256 stethBalance = stethToken.balanceOf(address(this));\\n\\n        if (stethBalance > 0) {\\n            // approve wrap\\n            stethToken.safeApprove(collateralToken, stethBalance.add(1));\\n            // Wrap to wstETH - need to add 1 to steth balance as it is innacurate\\n            collateral.wrap(stethBalance.add(1));\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\\n     * @param recipient is the receiving address\\n     * @param amount is the transfer amount\\n     */\\n    function transferAsset(address recipient, uint256 amount) public {\\n        (bool success, ) = payable(recipient).call{value: amount}(\\\"\\\");\\n        require(success, \\\"!success\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/vaults/STETHVault/base/RibbonVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport {IWSTETH} from \\\"../../../interfaces/ISTETH.sol\\\";\\nimport {Vault} from \\\"../../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../../libraries/VaultLifecycle.sol\\\";\\nimport {VaultLifecycleSTETH} from \\\"../../../libraries/VaultLifecycleSTETH.sol\\\";\\nimport {ShareMath} from \\\"../../../libraries/ShareMath.sol\\\";\\n\\ncontract RibbonVault is\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    ERC20Upgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  NON UPGRADEABLE STORAGE\\n     ***********************************************/\\n\\n    /// @notice Stores the user's pending deposit for the round\\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\\n\\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\\n    /// This is used to determine the number of shares to be returned\\n    /// to a user with their DepositReceipt.depositAmount\\n    mapping(uint256 => uint256) public roundPricePerShare;\\n\\n    /// @notice Stores pending user withdrawals\\n    mapping(address => Vault.Withdrawal) public withdrawals;\\n\\n    /// @notice Vault's parameters like cap, decimals\\n    Vault.VaultParams public vaultParams;\\n\\n    /// @notice Vault's lifecycle state like round and locked amounts\\n    Vault.VaultState public vaultState;\\n\\n    /// @notice Vault's state of the options sold and the timelocked option\\n    Vault.OptionState public optionState;\\n\\n    /// @notice Fee recipient for the performance and management fees\\n    address public feeRecipient;\\n\\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\\n    // no access to critical vault changes\\n    address public keeper;\\n\\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\\n    uint256 public performanceFee;\\n\\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\\n    uint256 public managementFee;\\n\\n    /// @notice wstETH vault contract\\n    IWSTETH public immutable collateralToken;\\n\\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\\n    uint256[30] private ____gap;\\n\\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaSTETHVaultStorage\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n    address public immutable WETH;\\n\\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n    address public immutable USDC;\\n\\n    /// @notice Lido DAO token 0x5a98fcbea516cf06857215779fd812ca3bef1b32\\n    address public immutable LDO;\\n\\n    /// @notice 15 minute timelock between commitAndClose and rollToNexOption.\\n    uint256 public constant DELAY = 0;\\n\\n    /// @notice 7 day period between each options sale.\\n    uint256 public constant PERIOD = 7 days;\\n\\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\\n\\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\\n    // which allows users to perform multiple actions on their vaults\\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\\n    address public immutable GAMMA_CONTROLLER;\\n\\n    // MARGIN_POOL is Gamma protocol's collateral pool.\\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\\n    address public immutable MARGIN_POOL;\\n\\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\\n    address public immutable GNOSIS_EASY_AUCTION;\\n\\n    // Curve stETH / ETH stables pool\\n    address public immutable STETH_ETH_CRV_POOL;\\n\\n    /// @notice STETH contract address\\n    address public immutable STETH;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event Deposit(address indexed account, uint256 amount, uint256 round);\\n\\n    event InitiateWithdraw(\\n        address indexed account,\\n        uint256 shares,\\n        uint256 round\\n    );\\n\\n    event Redeem(address indexed account, uint256 share, uint256 round);\\n\\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\\n    event CapSet(uint256 oldCap, uint256 newCap);\\n\\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\\n\\n    event CollectVaultFees(\\n        uint256 performanceFee,\\n        uint256 vaultFee,\\n        uint256 round,\\n        address indexed feeRecipient\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _wsteth is the wstETH contract\\n     * @param _ldo is the LDO contract\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _crvPool is the steth/eth crv stables pool\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _wsteth,\\n        address _ldo,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _crvPool\\n    ) {\\n        require(_weth != address(0), \\\"!_weth\\\");\\n        require(_usdc != address(0), \\\"!_usdc\\\");\\n        require(_wsteth != address(0), \\\"!_wsteth\\\");\\n        require(_ldo != address(0), \\\"!_ldo\\\");\\n\\n        require(_gnosisEasyAuction != address(0), \\\"!_gnosisEasyAuction\\\");\\n        require(_gammaController != address(0), \\\"!_gammaController\\\");\\n        require(_marginPool != address(0), \\\"!_marginPool\\\");\\n        require(_crvPool != address(0), \\\"!_crvPool\\\");\\n\\n        WETH = _weth;\\n        USDC = _usdc;\\n        LDO = _ldo;\\n        STETH = IWSTETH(_wsteth).stETH();\\n\\n        GAMMA_CONTROLLER = _gammaController;\\n        MARGIN_POOL = _marginPool;\\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\\n        STETH_ETH_CRV_POOL = _crvPool;\\n        collateralToken = IWSTETH(_wsteth);\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     */\\n    function baseInitialize(\\n        address _owner,\\n        address _keeper,\\n        address _feeRecipient,\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) internal initializer {\\n        VaultLifecycle.verifyInitializerParams(\\n            _owner,\\n            _keeper,\\n            _feeRecipient,\\n            _performanceFee,\\n            _managementFee,\\n            _tokenName,\\n            _tokenSymbol,\\n            _vaultParams\\n        );\\n\\n        __ReentrancyGuard_init();\\n        __ERC20_init(_tokenName, _tokenSymbol);\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n\\n        keeper = _keeper;\\n\\n        feeRecipient = _feeRecipient;\\n        performanceFee = _performanceFee;\\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\\n            WEEKS_PER_YEAR\\n        );\\n        vaultParams = _vaultParams;\\n\\n        uint256 assetBalance = totalBalance();\\n        ShareMath.assertUint104(assetBalance);\\n        vaultState.lastLockedAmount = uint104(assetBalance);\\n\\n        vaultState.round = 1;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the keeper.\\n     */\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"!keeper\\\");\\n        _;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new keeper\\n     * @param newKeeper is the address of the new keeper\\n     */\\n    function setNewKeeper(address newKeeper) external onlyOwner {\\n        require(newKeeper != address(0), \\\"!newKeeper\\\");\\n        keeper = newKeeper;\\n    }\\n\\n    /**\\n     * @notice Sets the new fee recipient\\n     * @param newFeeRecipient is the address of the new fee recipient\\n     */\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n        require(newFeeRecipient != address(0), \\\"!newFeeRecipient\\\");\\n        require(newFeeRecipient != feeRecipient, \\\"Must be new feeRecipient\\\");\\n        feeRecipient = newFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Sets the management fee for the vault\\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\\n     */\\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\\n        require(\\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid management fee\\\"\\n        );\\n\\n        // We are dividing annualized management fee by num weeks in a year\\n        uint256 tmpManagementFee =\\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\\n\\n        emit ManagementFeeSet(managementFee, newManagementFee);\\n\\n        managementFee = tmpManagementFee;\\n    }\\n\\n    /**\\n     * @notice Sets the performance fee for the vault\\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\\n     */\\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\\n        require(\\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid performance fee\\\"\\n        );\\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\\n        performanceFee = newPerformanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets a new cap for deposits\\n     * @param newCap is the new cap for deposits\\n     */\\n    function setCap(uint256 newCap) external onlyOwner {\\n        require(newCap > 0, \\\"!newCap\\\");\\n        ShareMath.assertUint104(newCap);\\n        emit CapSet(vaultParams.cap, newCap);\\n        vaultParams.cap = uint104(newCap);\\n    }\\n\\n    /************************************************\\n     *  DEPOSIT & WITHDRAWALS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Deposits ETH into the contract and mint vault shares.\\n     */\\n    function depositETH() external payable nonReentrant {\\n        require(msg.value > 0, \\\"!value\\\");\\n\\n        _depositFor(msg.value, msg.sender, true);\\n    }\\n\\n    /**\\n     * @notice Deposits the `collateralAsset` into the contract and mint vault shares.\\n     * @param amount is the amount of `collateralAsset` to deposit\\n     */\\n    function depositYieldToken(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"!amount\\\");\\n\\n        // stETH transfers suffer from an off-by-1 error\\n        _depositFor(amount.sub(1), msg.sender, false);\\n\\n        IERC20(STETH).safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\\n     * @notice Used for vault -> vault deposits on the user's behalf\\n     * @param creditor is the address that can claim/withdraw deposited amount\\n     */\\n    function depositFor(address creditor) external payable nonReentrant {\\n        require(msg.value > 0, \\\"!value\\\");\\n        require(creditor != address(0), \\\"!creditor\\\");\\n\\n        _depositFor(msg.value, creditor, true);\\n    }\\n\\n    /**\\n     * @notice Mints the vault shares to the creditor\\n     * @param amount is the amount of `asset` deposited\\n     * @param creditor is the address to receieve the deposit\\n     * @param isETH is whether this is a depositETH call\\n     */\\n    function _depositFor(\\n        uint256 amount,\\n        address creditor,\\n        bool isETH\\n    ) private {\\n        uint256 currentRound = vaultState.round;\\n        uint256 totalWithDepositedAmount =\\n            isETH ? totalBalance() : totalBalance().add(amount);\\n\\n        require(totalWithDepositedAmount <= vaultParams.cap, \\\"Exceed cap\\\");\\n        require(\\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\\n            \\\"Insufficient balance\\\"\\n        );\\n\\n        emit Deposit(creditor, amount, currentRound);\\n\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\\n\\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        uint256 depositAmount = amount;\\n        // If we have a pending deposit in the current round, we add on to the pending deposit\\n        if (currentRound == depositReceipt.round) {\\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\\n            depositAmount = newAmount;\\n        }\\n\\n        ShareMath.assertUint104(depositAmount);\\n\\n        depositReceipts[creditor] = Vault.DepositReceipt({\\n            round: uint16(currentRound),\\n            amount: uint104(depositAmount),\\n            unredeemedShares: uint128(unredeemedShares)\\n        });\\n\\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\\n        ShareMath.assertUint128(newTotalPending);\\n        vaultState.totalPending = uint128(newTotalPending);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n\\n        // We do a max redeem before initiating a withdrawal\\n        // But we check if they must first have unredeemed shares\\n        if (\\n            depositReceipts[msg.sender].amount > 0 ||\\n            depositReceipts[msg.sender].unredeemedShares > 0\\n        ) {\\n            _redeem(0, true);\\n        }\\n\\n        // This caches the `round` variable used in shareBalances\\n        uint256 currentRound = vaultState.round;\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\\n\\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\\n\\n        uint256 existingShares = uint256(withdrawal.shares);\\n\\n        uint256 withdrawalShares;\\n        if (withdrawalIsSameRound) {\\n            withdrawalShares = existingShares.add(numShares);\\n        } else {\\n            require(existingShares == 0, \\\"Existing withdraw\\\");\\n            withdrawalShares = numShares;\\n            withdrawals[msg.sender].round = uint16(currentRound);\\n        }\\n\\n        ShareMath.assertUint128(withdrawalShares);\\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\\n\\n        uint256 newQueuedWithdrawShares =\\n            uint256(vaultState.queuedWithdrawShares).add(numShares);\\n        ShareMath.assertUint128(newQueuedWithdrawShares);\\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\\n\\n        _transfer(msg.sender, address(this), numShares);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     * @param minETHOut is the min amount of `asset` to recieve for the swapped amount of steth in crv pool\\n     * @return amountETHOut the current withdrawal amount\\n     */\\n    function _completeWithdraw(uint256 minETHOut) internal returns (uint256) {\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        uint256 withdrawalShares = withdrawal.shares;\\n        uint256 withdrawalRound = withdrawal.round;\\n\\n        // This checks if there is a withdrawal\\n        require(withdrawalShares > 0, \\\"Not initiated\\\");\\n\\n        require(withdrawalRound < vaultState.round, \\\"Round not closed\\\");\\n\\n        // We leave the round number as non-zero to save on gas for subsequent writes\\n        withdrawals[msg.sender].shares = 0;\\n        vaultState.queuedWithdrawShares = uint128(\\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\\n        );\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                withdrawalShares,\\n                roundPricePerShare[withdrawalRound],\\n                vaultParams.decimals\\n            );\\n\\n        // Unwrap may incur curve pool slippage\\n        uint256 amountETHOut =\\n            VaultLifecycleSTETH.unwrapYieldToken(\\n                withdrawAmount,\\n                address(collateralToken),\\n                STETH,\\n                STETH_ETH_CRV_POOL,\\n                minETHOut\\n            );\\n\\n        emit Withdraw(msg.sender, amountETHOut, withdrawalShares);\\n\\n        _burn(address(this), withdrawalShares);\\n\\n        require(amountETHOut > 0, \\\"!amountETHOut\\\");\\n\\n        VaultLifecycleSTETH.transferAsset(msg.sender, amountETHOut);\\n\\n        return amountETHOut;\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem\\n     */\\n    function redeem(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n        _redeem(numShares, false);\\n    }\\n\\n    /**\\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\\n     */\\n    function maxRedeem() external nonReentrant {\\n        _redeem(0, true);\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\\n     * @param isMax is flag for when callers do a max redemption\\n     */\\n    function _redeem(uint256 numShares, bool isMax) internal {\\n        Vault.DepositReceipt memory depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        // This handles the null case when depositReceipt.round = 0\\n        // Because we start with round = 1 at `initialize`\\n        uint256 currentRound = vaultState.round;\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        numShares = isMax ? unredeemedShares : numShares;\\n        if (numShares == 0) {\\n            return;\\n        }\\n        require(numShares <= unredeemedShares, \\\"Exceeds available\\\");\\n\\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\\n        // we debit from the unredeemedShares, but leave the amount field intact\\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\\n        if (depositReceipt.round < currentRound) {\\n            depositReceipts[msg.sender].amount = 0;\\n        }\\n\\n        ShareMath.assertUint128(numShares);\\n        depositReceipts[msg.sender].unredeemedShares = uint128(\\n            unredeemedShares.sub(numShares)\\n        );\\n\\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\\n\\n        _transfer(address(this), msg.sender, numShares);\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /*\\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\\n     * @param numRounds is the number of rounds to initialize in the map\\n     */\\n    function initRounds(uint256 numRounds) external nonReentrant {\\n        require(numRounds > 0, \\\"!numRounds\\\");\\n\\n        uint256 _round = vaultState.round;\\n        for (uint256 i = 0; i < numRounds; i++) {\\n            uint256 index = _round + i;\\n            require(roundPricePerShare[index] == 0, \\\"Initialized\\\"); // AVOID OVERWRITING ACTUAL VALUES\\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\\n        }\\n    }\\n\\n    /*\\n     * @notice Helper function that performs most administrative tasks\\n     * such as setting next option, minting new shares, getting vault fees, etc.\\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\\n     * @return newOption is the new option address\\n     * @return queuedWithdrawAmount is the queued amount for withdrawal\\n     */\\n    function _rollToNextOption(uint256 lastQueuedWithdrawAmount)\\n        internal\\n        returns (address, uint256)\\n    {\\n        require(block.timestamp >= optionState.nextOptionReadyAt, \\\"!ready\\\");\\n\\n        address newOption = optionState.nextOption;\\n        require(newOption != address(0), \\\"!nextOption\\\");\\n\\n        (\\n            uint256 newLockedBalanceInETH,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        ) =\\n            VaultLifecycle.rollover(\\n                vaultState,\\n                VaultLifecycle.RolloverParams(\\n                    vaultParams.decimals,\\n                    totalBalance(),\\n                    totalSupply(),\\n                    lastQueuedWithdrawAmount,\\n                    performanceFee,\\n                    managementFee\\n                )\\n            );\\n\\n        optionState.currentOption = newOption;\\n        optionState.nextOption = address(0);\\n\\n        {\\n            address vaultFeeRecipient = feeRecipient;\\n            address collateral = address(collateralToken);\\n\\n            // Finalize the pricePerShare at the end of the round\\n            uint256 currentRound = vaultState.round;\\n            roundPricePerShare[currentRound] = newPricePerShare;\\n\\n            // Wrap entire `asset` balance to `collateralToken` balance\\n            VaultLifecycleSTETH.wrapToYieldToken(WETH, collateral, STETH);\\n\\n            emit CollectVaultFees(\\n                performanceFeeInAsset,\\n                totalVaultFee,\\n                currentRound,\\n                vaultFeeRecipient\\n            );\\n\\n            vaultState.totalPending = 0;\\n            vaultState.round = uint16(currentRound + 1);\\n            ShareMath.assertUint104(newLockedBalanceInETH);\\n            vaultState.lockedAmount = uint104(newLockedBalanceInETH);\\n\\n            _mint(address(this), mintShares);\\n\\n            if (totalVaultFee > 0) {\\n                VaultLifecycleSTETH.withdrawYieldAndBaseToken(\\n                    collateral,\\n                    WETH,\\n                    vaultFeeRecipient,\\n                    totalVaultFee\\n                );\\n            }\\n        }\\n\\n        return (newOption, queuedWithdrawAmount);\\n    }\\n\\n    /*\\n     * @notice Transfers LDO rewards to feeRecipient\\n     */\\n    function sendLDORewards() external {\\n        IERC20 ldo = IERC20(LDO);\\n        ldo.safeTransfer(feeRecipient, ldo.balanceOf(address(this)));\\n    }\\n\\n    /************************************************\\n     *  GETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Returns the asset balance held on the vault for the account\\n     * @param account is the address to lookup balance for\\n     * @return the amount of `asset` custodied by the vault for the user\\n     */\\n    function accountVaultBalance(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _decimals = vaultParams.decimals;\\n        uint256 assetPerShare =\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                _decimals\\n            );\\n        return\\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance including unredeemed shares\\n     * @param account is the account to lookup share balance for\\n     * @return the share balance\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\\n        return heldByAccount.add(heldByVault);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance split between account and vault holdings\\n     * @param account is the account to lookup share balance for\\n     * @return heldByAccount is the shares held by account\\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\\n     */\\n    function shareBalances(address account)\\n        public\\n        view\\n        returns (uint256 heldByAccount, uint256 heldByVault)\\n    {\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\\n\\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\\n            return (balanceOf(account), 0);\\n        }\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                vaultState.round,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        return (balanceOf(account), unredeemedShares);\\n    }\\n\\n    /**\\n     * @notice The price of a unit of share denominated in the `asset`\\n     */\\n    function pricePerShare() external view returns (uint256) {\\n        return\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                vaultParams.decimals\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\\n     * @return total balance of the vault, including the amounts locked in third party protocols\\n     */\\n    function totalBalance() public view returns (uint256) {\\n        uint256 wethBalance = IERC20(WETH).balanceOf(address(this));\\n        uint256 ethBalance = address(this).balance;\\n        uint256 stethFromWsteth =\\n            collateralToken.getStETHByWstETH(\\n                collateralToken.balanceOf(address(this))\\n            );\\n\\n        uint256 stEthBalance = IERC20(STETH).balanceOf(address(this));\\n\\n        return\\n            wethBalance\\n                .add(vaultState.lockedAmount)\\n                .add(ethBalance)\\n                .add(stethFromWsteth)\\n                .add(stEthBalance);\\n    }\\n\\n    /**\\n     * @notice Returns the token decimals\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return vaultParams.decimals;\\n    }\\n\\n    function cap() external view returns (uint256) {\\n        return vaultParams.cap;\\n    }\\n\\n    function nextOptionReadyAt() external view returns (uint256) {\\n        return optionState.nextOptionReadyAt;\\n    }\\n\\n    function currentOption() external view returns (address) {\\n        return optionState.currentOption;\\n    }\\n\\n    function nextOption() external view returns (address) {\\n        return optionState.nextOption;\\n    }\\n\\n    function totalPending() external view returns (uint256) {\\n        return vaultState.totalPending;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n}\\n\"\n    },\n    \"contracts/storage/RibbonThetaSTETHVaultStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nabstract contract RibbonThetaSTETHVaultStorageV1 {\\n    // Logic contract used to price options\\n    address public optionsPremiumPricer;\\n    // Logic contract used to select strike prices\\n    address public strikeSelection;\\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\\n    uint256 public premiumDiscount;\\n    // Current oToken premium\\n    uint256 public currentOtokenPremium;\\n    // Last round id at which the strike was manually overridden\\n    uint16 public lastStrikeOverrideRound;\\n    // Price last overridden strike set to\\n    uint256 public overriddenStrikePrice;\\n    // Auction duration\\n    uint256 public auctionDuration;\\n    // Auction id of current option\\n    uint256 public optionAuctionID;\\n}\\n\\nabstract contract RibbonThetaSTETHVaultStorageV2 {\\n    // Amount locked for scheduled withdrawals last week;\\n    uint256 public lastQueuedWithdrawAmount;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of RibbonThetaVaultStorage\\n// e.g. RibbonThetaVaultStorage<versionNumber>, so finally it would look like\\n// contract RibbonThetaVaultStorage is RibbonThetaVaultStorageV1, RibbonThetaVaultStorageV2\\nabstract contract RibbonThetaSTETHVaultStorage is\\n    RibbonThetaSTETHVaultStorageV1,\\n    RibbonThetaSTETHVaultStorageV2\\n{\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/ISTETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IWSTETH {\\n    function getStETHByWstETH(uint256 _amount) external view returns (uint256);\\n\\n    function getWstETHByStETH(uint256 _amount) external view returns (uint256);\\n\\n    function stEthPerToken() external view returns (uint256);\\n\\n    function tokensPerStEth() external view returns (uint256);\\n\\n    function stETH() external view returns (address);\\n\\n    function wrap(uint256 _amount) external returns (uint256);\\n\\n    function unwrap(uint256 _amount) external returns (uint256);\\n\\n    function approve(address _recipient, uint256 _amount)\\n        external\\n        returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\ninterface ISTETH {\\n    function getBufferedEther(uint256 _amount) external view returns (uint256);\\n\\n    function getPooledEthByShares(uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSharesByPooledEth(uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function submit(address _referralAddress)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function withdraw(uint256 _amount, bytes32 _pubkeyHash)\\n        external\\n        returns (uint256);\\n\\n    function approve(address _recipient, uint256 _amount)\\n        external\\n        returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/ICRV.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface ICRV {\\n    function get_dy(\\n        int128 _indexIn,\\n        int128 _indexOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256);\\n\\n    // https://github.com/curvefi/curve-contract/blob/\\n    // b0bbf77f8f93c9c5f4e415bce9cd71f0cdee960e/contracts/pools/steth/StableSwapSTETH.vy#L431\\n    function exchange(\\n        int128 _indexIn,\\n        int128 _indexOut,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) external returns (uint256);\\n}\\n\"\n    },\n    \"contracts/vaults/BaseVaults/RibbonThetaVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {GnosisAuction} from \\\"../../libraries/GnosisAuction.sol\\\";\\nimport {\\n    RibbonThetaVaultStorage\\n} from \\\"../../storage/RibbonThetaVaultStorage.sol\\\";\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../libraries/VaultLifecycle.sol\\\";\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\nimport {RibbonVault} from \\\"./base/RibbonVault.sol\\\";\\n\\n/**\\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\\n * the inheritance chain closely.\\n * Any changes/appends in storage variable needs to happen in RibbonThetaVaultStorage.\\n * RibbonThetaVault should not inherit from any other contract aside from RibbonVault, RibbonThetaVaultStorage\\n */\\ncontract RibbonThetaVault is RibbonVault, RibbonThetaVaultStorage {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\\n    address public immutable OTOKEN_FACTORY;\\n\\n    // The minimum duration for an option auction.\\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event OpenShort(\\n        address indexed options,\\n        uint256 depositAmount,\\n        address indexed manager\\n    );\\n\\n    event CloseShort(\\n        address indexed options,\\n        uint256 withdrawAmount,\\n        address indexed manager\\n    );\\n\\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\\n\\n    event PremiumDiscountSet(\\n        uint256 premiumDiscount,\\n        uint256 newPremiumDiscount\\n    );\\n\\n    event AuctionDurationSet(\\n        uint256 auctionDuration,\\n        uint256 newAuctionDuration\\n    );\\n\\n    event InstantWithdraw(\\n        address indexed account,\\n        uint256 amount,\\n        uint256 round\\n    );\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    /************************************************\\n     *  STRUCTS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initialization parameters for the vault.\\n     * @param _owner is the owner of the vault with critical permissions\\n     * @param _feeRecipient is the address to recieve vault performance and management fees\\n     * @param _managementFee is the management fee pct.\\n     * @param _performanceFee is the perfomance fee pct.\\n     * @param _tokenName is the name of the token\\n     * @param _tokenSymbol is the symbol of the token\\n     * @param _optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param _strikeSelection is the address of the contract with strike selection logic\\n     * @param _premiumDiscount is the vault's discount applied to the premium\\n     * @param _auctionDuration is the duration of the gnosis auction\\n     * @param _isUsdcAuction is whether Gnosis auction should be denominated in USDC\\n     * @param _swapPath is the path for swapping\\n     */\\n    struct InitParams {\\n        address _owner;\\n        address _keeper;\\n        address _feeRecipient;\\n        uint256 _managementFee;\\n        uint256 _performanceFee;\\n        string _tokenName;\\n        string _tokenSymbol;\\n        address _optionsPremiumPricer;\\n        address _strikeSelection;\\n        uint32 _premiumDiscount;\\n        uint256 _auctionDuration;\\n        bool _isUsdcAuction;\\n        bytes _swapPath;\\n    }\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _uniswapRouter is the contract address of UniswapV3 router that handles swaps\\n     * @param _uniswapFactory is the contract address of UniswapV3 factory containing\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _oTokenFactory,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _uniswapRouter,\\n        address _uniswapFactory\\n    )\\n        RibbonVault(\\n            _weth,\\n            _usdc,\\n            _gammaController,\\n            _marginPool,\\n            _gnosisEasyAuction,\\n            _uniswapRouter,\\n            _uniswapFactory\\n        )\\n    {\\n        require(_oTokenFactory != address(0), \\\"!_oTokenFactory\\\");\\n        OTOKEN_FACTORY = _oTokenFactory;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     * @param _initParams is the struct with vault initialization parameters\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function initialize(\\n        InitParams calldata _initParams,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external initializer {\\n        baseInitialize(\\n            _initParams._owner,\\n            _initParams._keeper,\\n            _initParams._feeRecipient,\\n            _initParams._managementFee,\\n            _initParams._performanceFee,\\n            _initParams._tokenName,\\n            _initParams._tokenSymbol,\\n            _vaultParams\\n        );\\n        require(\\n            _initParams._optionsPremiumPricer != address(0),\\n            \\\"!_optionsPremiumPricer\\\"\\n        );\\n        require(\\n            _initParams._strikeSelection != address(0),\\n            \\\"!_strikeSelection\\\"\\n        );\\n        require(\\n            _initParams._premiumDiscount > 0 &&\\n                _initParams._premiumDiscount <\\n                100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"!_premiumDiscount\\\"\\n        );\\n        require(\\n            _initParams._auctionDuration >= MIN_AUCTION_DURATION,\\n            \\\"!_auctionDuration\\\"\\n        );\\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\\n        strikeSelection = _initParams._strikeSelection;\\n        premiumDiscount = _initParams._premiumDiscount;\\n        auctionDuration = _initParams._auctionDuration;\\n\\n        isUsdcAuction = _initParams._isUsdcAuction;\\n        if (_initParams._isUsdcAuction) {\\n            require(_checkPath(_initParams._swapPath), \\\"Invalid swapPath\\\");\\n            swapPath = _initParams._swapPath;\\n        }\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new discount on premiums for options we are selling\\n     * @param newPremiumDiscount is the premium discount\\n     */\\n    function setPremiumDiscount(uint256 newPremiumDiscount) external onlyOwner {\\n        require(\\n            newPremiumDiscount > 0 &&\\n                newPremiumDiscount < 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"Invalid discount\\\"\\n        );\\n\\n        emit PremiumDiscountSet(premiumDiscount, newPremiumDiscount);\\n\\n        premiumDiscount = newPremiumDiscount;\\n    }\\n\\n    /**\\n     * @notice Sets the new auction duration\\n     * @param newAuctionDuration is the auction duration\\n     */\\n    function setAuctionDuration(uint256 newAuctionDuration) external onlyOwner {\\n        require(\\n            newAuctionDuration >= MIN_AUCTION_DURATION,\\n            \\\"Invalid auction duration\\\"\\n        );\\n\\n        emit AuctionDurationSet(auctionDuration, newAuctionDuration);\\n\\n        auctionDuration = newAuctionDuration;\\n    }\\n\\n    /**\\n     * @notice Sets the new strike selection contract\\n     * @param newStrikeSelection is the address of the new strike selection contract\\n     */\\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\\n        require(newStrikeSelection != address(0), \\\"!newStrikeSelection\\\");\\n        strikeSelection = newStrikeSelection;\\n    }\\n\\n    /**\\n     * @notice Sets the new options premium pricer contract\\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\\n     */\\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newOptionsPremiumPricer != address(0),\\n            \\\"!newOptionsPremiumPricer\\\"\\n        );\\n        optionsPremiumPricer = newOptionsPremiumPricer;\\n    }\\n\\n    /**\\n     * @notice Optionality to set strike price manually\\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\\n     */\\n    function setStrikePrice(uint128 strikePrice)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(strikePrice > 0, \\\"!strikePrice\\\");\\n        overriddenStrikePrice = strikePrice;\\n        lastStrikeOverrideRound = vaultState.round;\\n    }\\n\\n    /**\\n     * @notice Sets a new path for swaps\\n     * @param newSwapPath is the new path\\n     */\\n    function setSwapPath(bytes calldata newSwapPath)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(isUsdcAuction, \\\"!isUsdcAuction\\\");\\n        require(_checkPath(newSwapPath), \\\"Invalid swapPath\\\");\\n        swapPath = newSwapPath;\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\n     * @param amount is the amount to withdraw\\n     */\\n    function withdrawInstantly(uint256 amount) external nonReentrant {\\n        Vault.DepositReceipt storage depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        uint256 currentRound = vaultState.round;\\n        require(amount > 0, \\\"!amount\\\");\\n        require(depositReceipt.round == currentRound, \\\"Invalid round\\\");\\n\\n        uint256 receiptAmount = depositReceipt.amount;\\n        require(receiptAmount >= amount, \\\"Exceed amount\\\");\\n\\n        // Subtraction underflow checks already ensure it is smaller than uint104\\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\\n        vaultState.totalPending = uint128(\\n            uint256(vaultState.totalPending).sub(amount)\\n        );\\n\\n        emit InstantWithdraw(msg.sender, amount, currentRound);\\n\\n        transferAsset(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     */\\n    function completeWithdraw() external nonReentrant {\\n        uint256 withdrawAmount = _completeWithdraw();\\n        lastQueuedWithdrawAmount = uint128(\\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and closes the existing short.\\n     *         This allows all the users to withdraw if the next option is malicious.\\n     */\\n    function commitAndClose() external nonReentrant {\\n        address oldOption = optionState.currentOption;\\n\\n        VaultLifecycle.CloseParams memory closeParams =\\n            VaultLifecycle.CloseParams({\\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\\n                USDC: USDC,\\n                currentOption: oldOption,\\n                delay: DELAY,\\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\\n                overriddenStrikePrice: overriddenStrikePrice\\n            });\\n\\n        (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        ) =\\n            VaultLifecycle.commitAndClose(\\n                strikeSelection,\\n                optionsPremiumPricer,\\n                premiumDiscount,\\n                closeParams,\\n                vaultParams,\\n                vaultState\\n            );\\n\\n        emit NewOptionStrikeSelected(strikePrice, delta);\\n\\n        ShareMath.assertUint104(premium);\\n        currentOtokenPremium = uint104(premium);\\n        optionState.nextOption = otokenAddress;\\n\\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\\n        require(\\n            nextOptionReady <= type(uint32).max,\\n            \\\"Overflow nextOptionReady\\\"\\n        );\\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\\n\\n        _closeShort(oldOption);\\n    }\\n\\n    /**\\n     * @notice Closes the existing short position for the vault.\\n     */\\n    function _closeShort(address oldOption) private {\\n        uint256 lockedAmount = vaultState.lockedAmount;\\n        if (oldOption != address(0)) {\\n            vaultState.lastLockedAmount = uint104(lockedAmount);\\n        }\\n        vaultState.lockedAmount = 0;\\n\\n        optionState.currentOption = address(0);\\n\\n        if (oldOption != address(0)) {\\n            uint256 withdrawAmount =\\n                VaultLifecycle.settleShort(GAMMA_CONTROLLER);\\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Rolls the vault's funds into a new short position.\\n     */\\n    function rollToNextOption() external onlyKeeper nonReentrant {\\n        (\\n            address newOption,\\n            uint256 lockedBalance,\\n            uint256 queuedWithdrawAmount\\n        ) = _rollToNextOption(uint256(lastQueuedWithdrawAmount));\\n\\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\\n\\n        ShareMath.assertUint104(lockedBalance);\\n        vaultState.lockedAmount = uint104(lockedBalance);\\n\\n        emit OpenShort(newOption, lockedBalance, msg.sender);\\n\\n        VaultLifecycle.createShort(\\n            GAMMA_CONTROLLER,\\n            MARGIN_POOL,\\n            newOption,\\n            lockedBalance\\n        );\\n\\n        _startAuction();\\n    }\\n\\n    /**\\n     * @notice Initiate the gnosis auction.\\n     */\\n    function startAuction() external onlyKeeper nonReentrant {\\n        _startAuction();\\n    }\\n\\n    function _startAuction() private {\\n        GnosisAuction.AuctionDetails memory auctionDetails;\\n\\n        uint256 currOtokenPremium = currentOtokenPremium;\\n\\n        require(currOtokenPremium > 0, \\\"!currentOtokenPremium\\\");\\n\\n        bool _isUsdcAuction = isUsdcAuction;\\n        auctionDetails.oTokenAddress = optionState.currentOption;\\n        auctionDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\\n        auctionDetails.asset = _isUsdcAuction ? USDC : vaultParams.asset;\\n        auctionDetails.assetDecimals = _isUsdcAuction\\n            ? 6\\n            : vaultParams.decimals;\\n        auctionDetails.oTokenPremium = currOtokenPremium;\\n        auctionDetails.duration = auctionDuration;\\n\\n        optionAuctionID = VaultLifecycle.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from gnosis auction.\\n     */\\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\\n        uint256 unlockedAssetAmount =\\n            VaultLifecycle.burnOtokens(\\n                GAMMA_CONTROLLER,\\n                optionState.currentOption\\n            );\\n\\n        vaultState.lockedAmount = uint104(\\n            uint256(vaultState.lockedAmount).sub(unlockedAssetAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Settle USDC auction and swap the proceeds to underlying asset\\n     * @param minAmountOut is the minimum amount of underlying acceptable for the swap\\n     */\\n    function settleAuctionAndSwap(uint256 minAmountOut)\\n        external\\n        onlyKeeper\\n        nonReentrant\\n    {\\n        require(isUsdcAuction, \\\"!isUsdcAuction\\\");\\n        require(minAmountOut > 0, \\\"!minAmountOut\\\");\\n\\n        VaultLifecycle.settleAuction(GNOSIS_EASY_AUCTION, optionAuctionID);\\n\\n        VaultLifecycle.swap(USDC, minAmountOut, UNISWAP_ROUTER, swapPath);\\n    }\\n}\\n\"\n    },\n    \"contracts/storage/RibbonThetaVaultStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nabstract contract RibbonThetaVaultStorageV1 {\\n    // Logic contract used to price options\\n    address public optionsPremiumPricer;\\n    // Logic contract used to select strike prices\\n    address public strikeSelection;\\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\\n    uint256 public premiumDiscount;\\n    // Current oToken premium\\n    uint256 public currentOtokenPremium;\\n    // Last round id at which the strike was manually overridden\\n    uint16 public lastStrikeOverrideRound;\\n    // Price last overridden strike set to\\n    uint256 public overriddenStrikePrice;\\n    // Auction duration\\n    uint256 public auctionDuration;\\n    // Auction id of current option\\n    uint256 public optionAuctionID;\\n}\\n\\nabstract contract RibbonThetaVaultStorageV2 {\\n    // Amount locked for scheduled withdrawals last week;\\n    uint256 public lastQueuedWithdrawAmount;\\n}\\n\\nabstract contract RibbonThetaVaultStorageV3 {\\n    // Auction will be denominated in USDC if true\\n    bool public isUsdcAuction;\\n    // Path for swaps\\n    bytes public swapPath;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of RibbonThetaVaultStorage\\n// e.g. RibbonThetaVaultStorage<versionNumber>, so finally it would look like\\n// contract RibbonThetaVaultStorage is RibbonThetaVaultStorageV1, RibbonThetaVaultStorageV2\\nabstract contract RibbonThetaVaultStorage is\\n    RibbonThetaVaultStorageV1,\\n    RibbonThetaVaultStorageV2,\\n    RibbonThetaVaultStorageV3\\n{\\n\\n}\\n\"\n    },\n    \"contracts/vaults/BaseVaults/base/RibbonVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport {Vault} from \\\"../../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../../libraries/VaultLifecycle.sol\\\";\\nimport {ShareMath} from \\\"../../../libraries/ShareMath.sol\\\";\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\n\\ncontract RibbonVault is\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    ERC20Upgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  NON UPGRADEABLE STORAGE\\n     ***********************************************/\\n\\n    /// @notice Stores the user's pending deposit for the round\\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\\n\\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\\n    /// This is used to determine the number of shares to be returned\\n    /// to a user with their DepositReceipt.depositAmount\\n    mapping(uint256 => uint256) public roundPricePerShare;\\n\\n    /// @notice Stores pending user withdrawals\\n    mapping(address => Vault.Withdrawal) public withdrawals;\\n\\n    /// @notice Vault's parameters like cap, decimals\\n    Vault.VaultParams public vaultParams;\\n\\n    /// @notice Vault's lifecycle state like round and locked amounts\\n    Vault.VaultState public vaultState;\\n\\n    /// @notice Vault's state of the options sold and the timelocked option\\n    Vault.OptionState public optionState;\\n\\n    /// @notice Fee recipient for the performance and management fees\\n    address public feeRecipient;\\n\\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\\n    // no access to critical vault changes\\n    address public keeper;\\n\\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\\n    uint256 public performanceFee;\\n\\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\\n    uint256 public managementFee;\\n\\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\\n    uint256[30] private ____gap;\\n\\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaVaultStorage\\n    // or RibbonDeltaVaultStorage instead. Read this documentation to learn more:\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n    address public immutable WETH;\\n\\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n    address public immutable USDC;\\n\\n    /// @notice Deprecated: 15 minute timelock between commitAndClose and rollToNexOption.\\n    uint256 public constant DELAY = 0;\\n\\n    /// @notice 7 day period between each options sale.\\n    uint256 public constant PERIOD = 7 days;\\n\\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\\n\\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\\n    // which allows users to perform multiple actions on their vaults\\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\\n    address public immutable GAMMA_CONTROLLER;\\n\\n    // MARGIN_POOL is Gamma protocol's collateral pool.\\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\\n    address public immutable MARGIN_POOL;\\n\\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\\n    address public immutable GNOSIS_EASY_AUCTION;\\n\\n    // UNISWAP_ROUTER is the contract address of UniswapV3 Router which handles swaps\\n    // https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\\n    address public immutable UNISWAP_ROUTER;\\n\\n    // UNISWAP_FACTORY is the contract address of UniswapV3 Factory which stores pool information\\n    // https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol\\n    address public immutable UNISWAP_FACTORY;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event Deposit(address indexed account, uint256 amount, uint256 round);\\n\\n    event InitiateWithdraw(\\n        address indexed account,\\n        uint256 shares,\\n        uint256 round\\n    );\\n\\n    event Redeem(address indexed account, uint256 share, uint256 round);\\n\\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\\n\\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\\n\\n    event CapSet(uint256 oldCap, uint256 newCap);\\n\\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\\n\\n    event CollectVaultFees(\\n        uint256 performanceFee,\\n        uint256 vaultFee,\\n        uint256 round,\\n        address indexed feeRecipient\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _uniswapRouter is the contract address for UniswapV3 router which handles swaps\\n     * @param _uniswapFactory is the contract address for UniswapV3 factory\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _uniswapRouter,\\n        address _uniswapFactory\\n    ) {\\n        require(_weth != address(0), \\\"!_weth\\\");\\n        require(_usdc != address(0), \\\"!_usdc\\\");\\n        require(_gnosisEasyAuction != address(0), \\\"!_gnosisEasyAuction\\\");\\n        require(_gammaController != address(0), \\\"!_gammaController\\\");\\n        require(_marginPool != address(0), \\\"!_marginPool\\\");\\n        require(_uniswapRouter != address(0), \\\"!_uniswapRouter\\\");\\n        require(_uniswapFactory != address(0), \\\"!_uniswapFactory\\\");\\n\\n        WETH = _weth;\\n        USDC = _usdc;\\n        GAMMA_CONTROLLER = _gammaController;\\n        MARGIN_POOL = _marginPool;\\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\\n        UNISWAP_ROUTER = _uniswapRouter;\\n        UNISWAP_FACTORY = _uniswapFactory;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     */\\n    function baseInitialize(\\n        address _owner,\\n        address _keeper,\\n        address _feeRecipient,\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) internal initializer {\\n        VaultLifecycle.verifyInitializerParams(\\n            _owner,\\n            _keeper,\\n            _feeRecipient,\\n            _performanceFee,\\n            _managementFee,\\n            _tokenName,\\n            _tokenSymbol,\\n            _vaultParams\\n        );\\n\\n        __ReentrancyGuard_init();\\n        __ERC20_init(_tokenName, _tokenSymbol);\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n\\n        keeper = _keeper;\\n\\n        feeRecipient = _feeRecipient;\\n        performanceFee = _performanceFee;\\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\\n            WEEKS_PER_YEAR\\n        );\\n        vaultParams = _vaultParams;\\n\\n        uint256 assetBalance =\\n            IERC20(vaultParams.asset).balanceOf(address(this));\\n        ShareMath.assertUint104(assetBalance);\\n        vaultState.lastLockedAmount = uint104(assetBalance);\\n\\n        vaultState.round = 1;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the keeper.\\n     */\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"!keeper\\\");\\n        _;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new keeper\\n     * @param newKeeper is the address of the new keeper\\n     */\\n    function setNewKeeper(address newKeeper) external onlyOwner {\\n        require(newKeeper != address(0), \\\"!newKeeper\\\");\\n        keeper = newKeeper;\\n    }\\n\\n    /**\\n     * @notice Sets the new fee recipient\\n     * @param newFeeRecipient is the address of the new fee recipient\\n     */\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n        require(newFeeRecipient != address(0), \\\"!newFeeRecipient\\\");\\n        require(newFeeRecipient != feeRecipient, \\\"Must be new feeRecipient\\\");\\n        feeRecipient = newFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Sets the management fee for the vault\\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\\n     */\\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\\n        require(\\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid management fee\\\"\\n        );\\n\\n        // We are dividing annualized management fee by num weeks in a year\\n        uint256 tmpManagementFee =\\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\\n\\n        emit ManagementFeeSet(managementFee, newManagementFee);\\n\\n        managementFee = tmpManagementFee;\\n    }\\n\\n    /**\\n     * @notice Sets the performance fee for the vault\\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\\n     */\\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\\n        require(\\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid performance fee\\\"\\n        );\\n\\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\\n\\n        performanceFee = newPerformanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets a new cap for deposits\\n     * @param newCap is the new cap for deposits\\n     */\\n    function setCap(uint256 newCap) external onlyOwner {\\n        require(newCap > 0, \\\"!newCap\\\");\\n        ShareMath.assertUint104(newCap);\\n        emit CapSet(vaultParams.cap, newCap);\\n        vaultParams.cap = uint104(newCap);\\n    }\\n\\n    /************************************************\\n     *  DEPOSIT & WITHDRAWALS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\\n     */\\n    function depositETH() external payable nonReentrant {\\n        require(vaultParams.asset == WETH, \\\"!WETH\\\");\\n        require(msg.value > 0, \\\"!value\\\");\\n\\n        _depositFor(msg.value, msg.sender);\\n\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender.\\n     * @param amount is the amount of `asset` to deposit\\n     */\\n    function deposit(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"!amount\\\");\\n\\n        _depositFor(amount, msg.sender);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\\n     * @notice Used for vault -> vault deposits on the user's behalf\\n     * @param amount is the amount of `asset` to deposit\\n     * @param creditor is the address that can claim/withdraw deposited amount\\n     */\\n    function depositFor(uint256 amount, address creditor)\\n        external\\n        nonReentrant\\n    {\\n        require(amount > 0, \\\"!amount\\\");\\n        require(creditor != address(0));\\n\\n        _depositFor(amount, creditor);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Mints the vault shares to the creditor\\n     * @param amount is the amount of `asset` deposited\\n     * @param creditor is the address to receieve the deposit\\n     */\\n    function _depositFor(uint256 amount, address creditor) private {\\n        uint256 currentRound = vaultState.round;\\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\\n\\n        require(totalWithDepositedAmount <= vaultParams.cap, \\\"Exceed cap\\\");\\n        require(\\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\\n            \\\"Insufficient balance\\\"\\n        );\\n\\n        emit Deposit(creditor, amount, currentRound);\\n\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\\n\\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        uint256 depositAmount = amount;\\n\\n        // If we have a pending deposit in the current round, we add on to the pending deposit\\n        if (currentRound == depositReceipt.round) {\\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\\n            depositAmount = newAmount;\\n        }\\n\\n        ShareMath.assertUint104(depositAmount);\\n\\n        depositReceipts[creditor] = Vault.DepositReceipt({\\n            round: uint16(currentRound),\\n            amount: uint104(depositAmount),\\n            unredeemedShares: uint128(unredeemedShares)\\n        });\\n\\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\\n        ShareMath.assertUint128(newTotalPending);\\n\\n        vaultState.totalPending = uint128(newTotalPending);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n\\n        // We do a max redeem before initiating a withdrawal\\n        // But we check if they must first have unredeemed shares\\n        if (\\n            depositReceipts[msg.sender].amount > 0 ||\\n            depositReceipts[msg.sender].unredeemedShares > 0\\n        ) {\\n            _redeem(0, true);\\n        }\\n\\n        // This caches the `round` variable used in shareBalances\\n        uint256 currentRound = vaultState.round;\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\\n\\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\\n\\n        uint256 existingShares = uint256(withdrawal.shares);\\n\\n        uint256 withdrawalShares;\\n        if (withdrawalIsSameRound) {\\n            withdrawalShares = existingShares.add(numShares);\\n        } else {\\n            require(existingShares == 0, \\\"Existing withdraw\\\");\\n            withdrawalShares = numShares;\\n            withdrawals[msg.sender].round = uint16(currentRound);\\n        }\\n\\n        ShareMath.assertUint128(withdrawalShares);\\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\\n\\n        uint256 newQueuedWithdrawShares =\\n            uint256(vaultState.queuedWithdrawShares).add(numShares);\\n        ShareMath.assertUint128(newQueuedWithdrawShares);\\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\\n\\n        _transfer(msg.sender, address(this), numShares);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     * @return withdrawAmount the current withdrawal amount\\n     */\\n    function _completeWithdraw() internal returns (uint256) {\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        uint256 withdrawalShares = withdrawal.shares;\\n        uint256 withdrawalRound = withdrawal.round;\\n\\n        // This checks if there is a withdrawal\\n        require(withdrawalShares > 0, \\\"Not initiated\\\");\\n\\n        require(withdrawalRound < vaultState.round, \\\"Round not closed\\\");\\n\\n        // We leave the round number as non-zero to save on gas for subsequent writes\\n        withdrawals[msg.sender].shares = 0;\\n        vaultState.queuedWithdrawShares = uint128(\\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\\n        );\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                withdrawalShares,\\n                roundPricePerShare[withdrawalRound],\\n                vaultParams.decimals\\n            );\\n\\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\\n\\n        _burn(address(this), withdrawalShares);\\n\\n        require(withdrawAmount > 0, \\\"!withdrawAmount\\\");\\n        transferAsset(msg.sender, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem\\n     */\\n    function redeem(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n        _redeem(numShares, false);\\n    }\\n\\n    /**\\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\\n     */\\n    function maxRedeem() external nonReentrant {\\n        _redeem(0, true);\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\\n     * @param isMax is flag for when callers do a max redemption\\n     */\\n    function _redeem(uint256 numShares, bool isMax) internal {\\n        Vault.DepositReceipt memory depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        // This handles the null case when depositReceipt.round = 0\\n        // Because we start with round = 1 at `initialize`\\n        uint256 currentRound = vaultState.round;\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        numShares = isMax ? unredeemedShares : numShares;\\n        if (numShares == 0) {\\n            return;\\n        }\\n        require(numShares <= unredeemedShares, \\\"Exceeds available\\\");\\n\\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\\n        // we debit from the unredeemedShares, but leave the amount field intact\\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\\n        if (depositReceipt.round < currentRound) {\\n            depositReceipts[msg.sender].amount = 0;\\n        }\\n\\n        ShareMath.assertUint128(numShares);\\n        depositReceipts[msg.sender].unredeemedShares = uint128(\\n            unredeemedShares.sub(numShares)\\n        );\\n\\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\\n\\n        _transfer(address(this), msg.sender, numShares);\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /*\\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\\n     * @param numRounds is the number of rounds to initialize in the map\\n     */\\n    function initRounds(uint256 numRounds) external nonReentrant {\\n        require(numRounds > 0, \\\"!numRounds\\\");\\n\\n        uint256 _round = vaultState.round;\\n        for (uint256 i = 0; i < numRounds; i++) {\\n            uint256 index = _round + i;\\n            require(roundPricePerShare[index] == 0, \\\"Initialized\\\"); // AVOID OVERWRITING ACTUAL VALUES\\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\\n        }\\n    }\\n\\n    /*\\n     * @notice Helper function that performs most administrative tasks\\n     * such as setting next option, minting new shares, getting vault fees, etc.\\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\\n     * @return newOption is the new option address\\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\\n     */\\n    function _rollToNextOption(uint256 lastQueuedWithdrawAmount)\\n        internal\\n        returns (\\n            address newOption,\\n            uint256 lockedBalance,\\n            uint256 queuedWithdrawAmount\\n        )\\n    {\\n        require(block.timestamp >= optionState.nextOptionReadyAt, \\\"!ready\\\");\\n\\n        newOption = optionState.nextOption;\\n        require(newOption != address(0), \\\"!nextOption\\\");\\n\\n        address recipient = feeRecipient;\\n        uint256 mintShares;\\n        uint256 performanceFeeInAsset;\\n        uint256 totalVaultFee;\\n        {\\n            uint256 newPricePerShare;\\n            (\\n                lockedBalance,\\n                queuedWithdrawAmount,\\n                newPricePerShare,\\n                mintShares,\\n                performanceFeeInAsset,\\n                totalVaultFee\\n            ) = VaultLifecycle.rollover(\\n                vaultState,\\n                VaultLifecycle.RolloverParams(\\n                    vaultParams.decimals,\\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\\n                    totalSupply(),\\n                    lastQueuedWithdrawAmount,\\n                    performanceFee,\\n                    managementFee\\n                )\\n            );\\n\\n            optionState.currentOption = newOption;\\n            optionState.nextOption = address(0);\\n\\n            // Finalize the pricePerShare at the end of the round\\n            uint256 currentRound = vaultState.round;\\n            roundPricePerShare[currentRound] = newPricePerShare;\\n\\n            emit CollectVaultFees(\\n                performanceFeeInAsset,\\n                totalVaultFee,\\n                currentRound,\\n                recipient\\n            );\\n\\n            vaultState.totalPending = 0;\\n            vaultState.round = uint16(currentRound + 1);\\n        }\\n\\n        _mint(address(this), mintShares);\\n\\n        if (totalVaultFee > 0) {\\n            transferAsset(payable(recipient), totalVaultFee);\\n        }\\n\\n        return (newOption, lockedBalance, queuedWithdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\\n     * @param recipient is the receiving address\\n     * @param amount is the transfer amount\\n     */\\n    function transferAsset(address recipient, uint256 amount) internal {\\n        address asset = vaultParams.asset;\\n        if (asset == WETH) {\\n            IWETH(WETH).withdraw(amount);\\n            (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n            return;\\n        }\\n        IERC20(asset).safeTransfer(recipient, amount);\\n    }\\n\\n    /************************************************\\n     *  GETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Returns the asset balance held on the vault for the account\\n     * @param account is the address to lookup balance for\\n     * @return the amount of `asset` custodied by the vault for the user\\n     */\\n    function accountVaultBalance(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _decimals = vaultParams.decimals;\\n        uint256 assetPerShare =\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                _decimals\\n            );\\n        return\\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance including unredeemed shares\\n     * @param account is the account to lookup share balance for\\n     * @return the share balance\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\\n        return heldByAccount.add(heldByVault);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance split between account and vault holdings\\n     * @param account is the account to lookup share balance for\\n     * @return heldByAccount is the shares held by account\\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\\n     */\\n    function shareBalances(address account)\\n        public\\n        view\\n        returns (uint256 heldByAccount, uint256 heldByVault)\\n    {\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\\n\\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\\n            return (balanceOf(account), 0);\\n        }\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                vaultState.round,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        return (balanceOf(account), unredeemedShares);\\n    }\\n\\n    /**\\n     * @notice The price of a unit of share denominated in the `asset`\\n     */\\n    function pricePerShare() external view returns (uint256) {\\n        return\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                vaultParams.decimals\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\\n     * @return total balance of the vault, including the amounts locked in third party protocols\\n     */\\n    function totalBalance() public view returns (uint256) {\\n        return\\n            uint256(vaultState.lockedAmount).add(\\n                IERC20(vaultParams.asset).balanceOf(address(this))\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the token decimals\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return vaultParams.decimals;\\n    }\\n\\n    function cap() external view returns (uint256) {\\n        return vaultParams.cap;\\n    }\\n\\n    function nextOptionReadyAt() external view returns (uint256) {\\n        return optionState.nextOptionReadyAt;\\n    }\\n\\n    function currentOption() external view returns (address) {\\n        return optionState.currentOption;\\n    }\\n\\n    function nextOption() external view returns (address) {\\n        return optionState.nextOption;\\n    }\\n\\n    function totalPending() external view returns (uint256) {\\n        return vaultState.totalPending;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Helper to check whether swap path goes from stables (USDC) to vault's underlying asset\\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\\n     * @return boolean whether the path is valid\\n     */\\n    function _checkPath(bytes calldata swapPath) internal view returns (bool) {\\n        return\\n            VaultLifecycle.checkPath(\\n                swapPath,\\n                USDC,\\n                vaultParams.asset,\\n                UNISWAP_FACTORY\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/vaults/BaseVaults/RibbonDeltaVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {GnosisAuction} from \\\"../../libraries/GnosisAuction.sol\\\";\\nimport {\\n    RibbonDeltaVaultStorage\\n} from \\\"../../storage/RibbonDeltaVaultStorage.sol\\\";\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../libraries/VaultLifecycle.sol\\\";\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\nimport {RibbonVault} from \\\"./base/RibbonVault.sol\\\";\\nimport {IRibbonThetaVault} from \\\"../../interfaces/IRibbonThetaVault.sol\\\";\\n\\n/**\\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\\n * the inheritance chain closely.\\n * Any changes/appends in storage variable needs to happen in RibbonDeltaVaultStorage.\\n * RibbonDeltaVault should not inherit from any other contract aside from RibbonVault, RibbonDeltaVaultStorage\\n */\\ncontract RibbonDeltaVault is RibbonVault, RibbonDeltaVaultStorage {\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event OpenLong(\\n        address indexed options,\\n        uint256 purchaseAmount,\\n        uint256 premium,\\n        address indexed manager\\n    );\\n\\n    event CloseLong(\\n        address indexed options,\\n        uint256 profitAmount,\\n        address indexed manager\\n    );\\n\\n    event NewOptionAllocationSet(\\n        uint256 optionAllocation,\\n        uint256 newOptionAllocation\\n    );\\n\\n    event InstantWithdraw(\\n        address indexed account,\\n        uint256 share,\\n        uint256 round\\n    );\\n\\n    event PlaceAuctionBid(\\n        uint256 auctionId,\\n        address indexed auctioningToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        address indexed bidder\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _uniswapRouter is the contract address of UniswapV3 router that handles swaps\\n     * @param _uniswapFactory is the contract address of UniswapV3 factory containing\\n     pools information\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _uniswapRouter,\\n        address _uniswapFactory\\n    )\\n        RibbonVault(\\n            _weth,\\n            _usdc,\\n            _gammaController,\\n            _marginPool,\\n            _gnosisEasyAuction,\\n            _uniswapRouter,\\n            _uniswapFactory\\n        )\\n    {}\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     * @param _owner is the owner of the vault with critical permissions\\n     * @param _feeRecipient is the address to recieve vault performance and management fees\\n     * @param _managementFee is the management fee pct.\\n     * @param _performanceFee is the perfomance fee pct.\\n     * @param _tokenName is the name of the token\\n     * @param _tokenSymbol is the symbol of the token\\n     * @param _counterpartyThetaVault is the address of the counterparty theta\\n     vault of this delta vault\\n     * @param _optionAllocation is the pct of the funds to allocate towards the weekly option\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function initialize(\\n        address _owner,\\n        address _keeper,\\n        address _feeRecipient,\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        address _counterpartyThetaVault,\\n        uint256 _optionAllocation,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external initializer {\\n        baseInitialize(\\n            _owner,\\n            _keeper,\\n            _feeRecipient,\\n            _managementFee,\\n            _performanceFee,\\n            _tokenName,\\n            _tokenSymbol,\\n            _vaultParams\\n        );\\n        require(\\n            _counterpartyThetaVault != address(0),\\n            \\\"!_counterpartyThetaVault\\\"\\n        );\\n        require(\\n            IRibbonThetaVault(_counterpartyThetaVault).vaultParams().asset ==\\n                vaultParams.asset,\\n            \\\"!_counterpartyThetaVault: asset\\\"\\n        );\\n        // 1000 = 10%. Needs to be less than 10% of the funds allocated to option.\\n        require(\\n            _optionAllocation > 0 &&\\n                _optionAllocation < 10 * Vault.OPTION_ALLOCATION_MULTIPLIER,\\n            \\\"!_optionAllocation\\\"\\n        );\\n        counterpartyThetaVault = IRibbonThetaVault(_counterpartyThetaVault);\\n        optionAllocation = _optionAllocation;\\n    }\\n\\n    /**\\n     * @notice Updates the price per share of the current round. The current round\\n     * pps will change right after call rollToNextOption as the gnosis auction contract\\n     * takes custody of a % of `asset` tokens, and right after we claim the tokens from\\n     * the action as we may recieve some of `asset` tokens back alongside the oToken,\\n     * depending on the gnosis auction outcome. Finally it will change at the end of the week\\n     * if the oTokens are ITM\\n     */\\n    function updatePPS(bool isWithdraw) internal {\\n        uint256 currentRound = vaultState.round;\\n        if (\\n            !isWithdraw ||\\n            roundPricePerShare[currentRound] <= ShareMath.PLACEHOLDER_UINT\\n        ) {\\n            roundPricePerShare[currentRound] = ShareMath.pricePerShare(\\n                totalSupply(),\\n                IERC20(vaultParams.asset).balanceOf(address(this)),\\n                vaultState.totalPending,\\n                vaultParams.decimals\\n            );\\n        }\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new % allocation of funds towards options purchases (2 decimals. ex: 10 * 10**2 is 10%)\\n     * 0 < newOptionAllocation < 1000. 1000 = 10%.\\n     * @param newOptionAllocation is the option % allocation\\n     */\\n    function setOptionAllocation(uint16 newOptionAllocation)\\n        external\\n        onlyOwner\\n    {\\n        // Needs to be less than 10%\\n        require(\\n            newOptionAllocation > 0 &&\\n                newOptionAllocation < 10 * Vault.OPTION_ALLOCATION_MULTIPLIER,\\n            \\\"Invalid allocation\\\"\\n        );\\n\\n        emit NewOptionAllocationSet(optionAllocation, newOptionAllocation);\\n\\n        optionAllocation = newOptionAllocation;\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\n     * @param share is the amount of shares to withdraw\\n     */\\n    function withdrawInstantly(uint256 share) external nonReentrant {\\n        require(share > 0, \\\"!numShares\\\");\\n\\n        updatePPS(true);\\n\\n        (uint256 sharesToWithdrawFromPending, uint256 sharesLeftForWithdrawal) =\\n            _withdrawFromNewDeposit(share);\\n\\n        // Withdraw shares from pending amount\\n        if (sharesToWithdrawFromPending > 0) {\\n            vaultState.totalPending = uint128(\\n                uint256(vaultState.totalPending).sub(\\n                    sharesToWithdrawFromPending\\n                )\\n            );\\n        }\\n        uint256 currentRound = vaultState.round;\\n\\n        // If we need to withdraw beyond current round deposit\\n        if (sharesLeftForWithdrawal > 0) {\\n            (uint256 heldByAccount, uint256 heldByVault) =\\n                shareBalances(msg.sender);\\n\\n            require(\\n                sharesLeftForWithdrawal <= heldByAccount.add(heldByVault),\\n                \\\"Insufficient balance\\\"\\n            );\\n\\n            if (heldByAccount < sharesLeftForWithdrawal) {\\n                // Redeem all shares custodied by vault to user\\n                _redeem(0, true);\\n            }\\n\\n            // Burn shares\\n            _burn(msg.sender, sharesLeftForWithdrawal);\\n        }\\n\\n        emit InstantWithdraw(msg.sender, share, currentRound);\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                share,\\n                roundPricePerShare[currentRound],\\n                vaultParams.decimals\\n            );\\n        transferAsset(msg.sender, withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     */\\n    function completeWithdraw() external nonReentrant {\\n        uint256 withdrawAmount = _completeWithdraw();\\n        lastQueuedWithdrawAmount = uint128(\\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Closes the existing long position for the vault.\\n     *         This allows all the users to withdraw if the next option is malicious.\\n     */\\n    function commitAndClose() external nonReentrant {\\n        address oldOption = optionState.currentOption;\\n\\n        address counterpartyNextOption =\\n            counterpartyThetaVault.optionState().nextOption;\\n        require(counterpartyNextOption != address(0), \\\"!thetavaultclosed\\\");\\n\\n        updatePPS(true);\\n\\n        optionState.nextOption = counterpartyNextOption;\\n\\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\\n        require(\\n            nextOptionReady <= type(uint32).max,\\n            \\\"Overflow nextOptionReady\\\"\\n        );\\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\\n\\n        optionState.currentOption = address(0);\\n        vaultState.lastLockedAmount = uint104(balanceBeforePremium);\\n\\n        // redeem\\n        if (oldOption != address(0)) {\\n            uint256 profitAmount =\\n                VaultLifecycle.settleLong(\\n                    GAMMA_CONTROLLER,\\n                    oldOption,\\n                    vaultParams.asset\\n                );\\n            emit CloseLong(oldOption, profitAmount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Rolls the vault's funds into a new long position.\\n     * @param optionPremium is the premium per token to pay in `asset`.\\n       Same decimals as `asset` (ex: 1 * 10 ** 8 means 1 WBTC per oToken)\\n     */\\n    function rollToNextOption(uint256 optionPremium)\\n        external\\n        onlyKeeper\\n        nonReentrant\\n    {\\n        (\\n            address newOption,\\n            uint256 lockedBalance,\\n            uint256 queuedWithdrawAmount\\n        ) = _rollToNextOption(uint256(lastQueuedWithdrawAmount));\\n\\n        lastQueuedWithdrawAmount = uint128(queuedWithdrawAmount);\\n\\n        balanceBeforePremium = lockedBalance;\\n\\n        GnosisAuction.BidDetails memory bidDetails;\\n\\n        bidDetails.auctionId = counterpartyThetaVault.optionAuctionID();\\n        bidDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\\n        bidDetails.oTokenAddress = newOption;\\n        bidDetails.asset = vaultParams.asset;\\n        bidDetails.assetDecimals = vaultParams.decimals;\\n        bidDetails.lockedBalance = lockedBalance;\\n        bidDetails.optionAllocation = optionAllocation;\\n        bidDetails.optionPremium = optionPremium;\\n        bidDetails.bidder = msg.sender;\\n\\n        // place bid\\n        (uint256 sellAmount, uint256 buyAmount, uint64 userId) =\\n            VaultLifecycle.placeBid(bidDetails);\\n\\n        auctionSellOrder.sellAmount = uint96(sellAmount);\\n        auctionSellOrder.buyAmount = uint96(buyAmount);\\n        auctionSellOrder.userId = userId;\\n\\n        updatePPS(false);\\n\\n        emit OpenLong(newOption, buyAmount, sellAmount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Claims the delta vault's oTokens from latest auction\\n     */\\n    function claimAuctionOtokens() external nonReentrant {\\n        VaultLifecycle.claimAuctionOtokens(\\n            auctionSellOrder,\\n            GNOSIS_EASY_AUCTION,\\n            address(counterpartyThetaVault)\\n        );\\n        updatePPS(false);\\n    }\\n\\n    /**\\n     * @notice Withdraws from the most recent deposit which has not been processed\\n     * @param share is how many shares to withdraw in total\\n     * @return the shares to remove from pending\\n     * @return the shares left to withdraw\\n     */\\n    function _withdrawFromNewDeposit(uint256 share)\\n        private\\n        returns (uint256, uint256)\\n    {\\n        Vault.DepositReceipt storage depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        // Immediately get what is in the pending deposits, without need for checking pps\\n        if (\\n            depositReceipt.round == vaultState.round &&\\n            depositReceipt.amount > 0\\n        ) {\\n            uint256 receiptShares =\\n                ShareMath.assetToShares(\\n                    depositReceipt.amount,\\n                    roundPricePerShare[depositReceipt.round],\\n                    vaultParams.decimals\\n                );\\n            uint256 sharesWithdrawn = Math.min(receiptShares, share);\\n            // Subtraction underflow checks already ensure it is smaller than uint104\\n            depositReceipt.amount = uint104(\\n                ShareMath.sharesToAsset(\\n                    uint256(receiptShares).sub(sharesWithdrawn),\\n                    roundPricePerShare[depositReceipt.round],\\n                    vaultParams.decimals\\n                )\\n            );\\n            return (sharesWithdrawn, share.sub(sharesWithdrawn));\\n        }\\n\\n        return (0, share);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\n    },\n    \"contracts/storage/RibbonDeltaVaultStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IRibbonThetaVault} from \\\"../interfaces/IRibbonThetaVault.sol\\\";\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\nabstract contract RibbonDeltaVaultStorageV1 {\\n    // Ribbon counterparty theta vault\\n    IRibbonThetaVault public counterpartyThetaVault;\\n    // % of funds to be used for weekly option purchase\\n    uint256 public optionAllocation;\\n    // Delta vault equivalent of lockedAmount\\n    uint256 public balanceBeforePremium;\\n    // User Id of delta vault in latest gnosis auction\\n    Vault.AuctionSellOrder public auctionSellOrder;\\n}\\n\\nabstract contract RibbonDeltaVaultStorageV2 {\\n    // Amount locked for scheduled withdrawals last week;\\n    uint128 public lastQueuedWithdrawAmount;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of RibbonDeltaVaultStorage\\n// e.g. RibbonDeltaVaultStorage<versionNumber>, so finally it would look like\\n// contract RibbonDeltaVaultStorage is RibbonDeltaVaultStorageV1, RibbonDeltaVaultStorageV2\\nabstract contract RibbonDeltaVaultStorage is\\n    RibbonDeltaVaultStorageV1,\\n    RibbonDeltaVaultStorageV2\\n{\\n\\n}\\n\"\n    },\n    \"contracts/utils/PercentStrikeSelection.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {\\n    IPriceOracle\\n} from \\\"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {\\n    IVolatilityOracle\\n} from \\\"@ribbon-finance/rvol/contracts/interfaces/IVolatilityOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ncontract PercentStrikeSelection is Ownable {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * Immutables\\n     */\\n    IOptionsPremiumPricer public immutable optionsPremiumPricer;\\n\\n    // step in absolute terms at which we will increment\\n    // (ex: 100 * 10 ** assetOracleDecimals means we will move at increments of 100 points)\\n    uint256 public step;\\n\\n    // multiplier for strike selection\\n    uint256 public strikeMultiplier;\\n\\n    // multiplier to shift asset prices\\n    uint256 private immutable assetOracleMultiplier;\\n\\n    // Delta are in 4 decimal places. 1 * 10**4 = 1 delta.\\n    uint256 private constant DELTA_MULTIPLIER = 10**4;\\n\\n    // ChainLink's USD Price oracles return results in 8 decimal places\\n    uint256 private constant ORACLE_PRICE_MULTIPLIER = 10**8;\\n\\n    // Strike multiplier has 2 decimal places. For example: 150 = 1.5x spot price\\n    uint256 private constant STRIKE_MULTIPLIER = 10**2;\\n\\n    event StepSet(uint256 oldStep, uint256 newStep, address indexed owner);\\n\\n    constructor(\\n        address _optionsPremiumPricer,\\n        uint256 _step,\\n        uint256 _strikeMultiplier\\n    ) {\\n        require(_optionsPremiumPricer != address(0), \\\"!_optionsPremiumPricer\\\");\\n        require(_step > 0, \\\"!_step\\\");\\n        require(\\n            _strikeMultiplier > STRIKE_MULTIPLIER,\\n            \\\"Multiplier must be bigger than 1!\\\"\\n        );\\n        optionsPremiumPricer = IOptionsPremiumPricer(_optionsPremiumPricer);\\n\\n        // ex: delta = 7500 (.75)\\n        uint256 _assetOracleMultiplier =\\n            10 **\\n                IPriceOracle(\\n                    IOptionsPremiumPricer(_optionsPremiumPricer).priceOracle()\\n                )\\n                    .decimals();\\n\\n        step = _step;\\n\\n        strikeMultiplier = _strikeMultiplier;\\n\\n        assetOracleMultiplier = _assetOracleMultiplier;\\n    }\\n\\n    /**\\n     * @notice Gets the strike price by multiplying the current underlying price\\n     * with a multiplier\\n     * @param expiryTimestamp is the unix timestamp of expiration\\n     * @param isPut is whether option is put or call\\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\\n     * @return newDelta will be set to zero for percent strike selection\\n     */\\n\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256 newStrikePrice, uint256 newDelta)\\n    {\\n        require(\\n            expiryTimestamp > block.timestamp,\\n            \\\"Expiry must be in the future!\\\"\\n        );\\n\\n        // asset price\\n        uint256 strikePrice =\\n            optionsPremiumPricer.getUnderlyingPrice().mul(strikeMultiplier).div(\\n                STRIKE_MULTIPLIER\\n            );\\n\\n        newStrikePrice = isPut\\n            ? strikePrice.sub(strikePrice % step)\\n            : strikePrice.add(step.sub(strikePrice % step));\\n\\n        newDelta = 0;\\n    }\\n\\n    /**\\n     * @notice Set the multiplier for setting the strike price\\n     * @param newStrikeMultiplier is the strike multiplier (decimals = 2)\\n     */\\n    function setStrikeMultiplier(uint256 newStrikeMultiplier)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newStrikeMultiplier > STRIKE_MULTIPLIER,\\n            \\\"Multiplier must be bigger than 1!\\\"\\n        );\\n        strikeMultiplier = newStrikeMultiplier;\\n    }\\n\\n    /**\\n     * @notice Sets new step value\\n     * @param newStep is the new step value\\n     */\\n    function setStep(uint256 newStep) external onlyOwner {\\n        require(newStep > 0, \\\"!newStep\\\");\\n        uint256 oldStep = step;\\n        step = newStep.mul(assetOracleMultiplier);\\n        emit StepSet(oldStep, newStep, msg.sender);\\n    }\\n}\\n\"\n    },\n    \"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\": {\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity >0.6.0 <0.8.7;\\n\\ninterface IPriceOracle {\\n    function decimals() external view returns (uint256 _decimals);\\n\\n    function latestAnswer() external view returns (uint256 price);\\n}\\n\"\n    },\n    \"@ribbon-finance/rvol/contracts/interfaces/IVolatilityOracle.sol\": {\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity >0.6.0 <0.8.7;\\n\\ninterface IVolatilityOracle {\\n    function commit(address pool) external;\\n\\n    function twap(address pool) external returns (uint256 price);\\n\\n    function vol(address pool)\\n        external\\n        view\\n        returns (uint256 standardDeviation);\\n\\n    function annualizedVol(address pool)\\n        external\\n        view\\n        returns (uint256 annualStdev);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/vendor/CustomSafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n      require(_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)),\\n          \\\"ERC20 transfer failed\\\");\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n      require(_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)),\\n          \\\"ERC20 transferFrom failed\\\");\\n  }\\n\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    if (_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value))) {\\n        return;\\n    }\\n    require(_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0))\\n        && _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value)),\\n        \\\"ERC20 approve failed\\\");\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private returns (bool) {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (bool success, bytes memory returndata) = address(token).call(data);\\n      if (!success) {\\n          return false;\\n      }\\n\\n      if (returndata.length >= 32) { // Return data is optional\\n          return abi.decode(returndata, (bool));\\n      }\\n\\n      // In a wierd case when return data is 1-31 bytes long - return false.\\n      return returndata.length == 0;\\n  }\\n}\\n\"\n    },\n    \"contracts/tests/TestVaultLifecycleSTETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IWSTETH} from \\\"../interfaces/ISTETH.sol\\\";\\nimport {VaultLifecycleSTETH} from \\\"../libraries/VaultLifecycleSTETH.sol\\\";\\n\\ncontract TestVaultLifecycleSTETH {\\n    address constant wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n    address constant crvPool = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022;\\n\\n    // To avoid using events to get the output, we just set it so we can read\\n    // it off the contract\\n    uint256 public output;\\n\\n    function unwrapYieldToken(uint256 amount, uint256 minETHOut) external {\\n        uint256 amountETHOut =\\n            VaultLifecycleSTETH.unwrapYieldToken(\\n                amount,\\n                wstETH,\\n                IWSTETH(wstETH).stETH(),\\n                crvPool,\\n                minETHOut\\n            );\\n        output = amountETHOut;\\n    }\\n\\n    // Enables test to send ETH for testing\\n    receive() external payable {}\\n}\\n\"\n    },\n    \"contracts/utils/DeltaStrikeSelection.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {\\n    IPriceOracle\\n} from \\\"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {\\n    IVolatilityOracle\\n} from \\\"@ribbon-finance/rvol/contracts/interfaces/IVolatilityOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ncontract DeltaStrikeSelection is Ownable {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * Immutables\\n     */\\n    IOptionsPremiumPricer public immutable optionsPremiumPricer;\\n\\n    IVolatilityOracle public immutable volatilityOracle;\\n\\n    // delta for options strike price selection. 1 is 10000 (10**4)\\n    uint256 public delta;\\n\\n    // step in absolute terms at which we will increment\\n    // (ex: 100 * 10 ** assetOracleDecimals means we will move at increments of 100 points)\\n    uint256 public step;\\n\\n    // multiplier to shift asset prices\\n    uint256 private immutable assetOracleMultiplier;\\n\\n    // Delta are in 4 decimal places. 1 * 10**4 = 1 delta.\\n    uint256 private constant DELTA_MULTIPLIER = 10**4;\\n\\n    // ChainLink's USD Price oracles return results in 8 decimal places\\n    uint256 private constant ORACLE_PRICE_MULTIPLIER = 10**8;\\n\\n    event DeltaSet(uint256 oldDelta, uint256 newDelta, address indexed owner);\\n    event StepSet(uint256 oldStep, uint256 newStep, address indexed owner);\\n\\n    constructor(\\n        address _optionsPremiumPricer,\\n        uint256 _delta,\\n        uint256 _step\\n    ) {\\n        require(_optionsPremiumPricer != address(0), \\\"!_optionsPremiumPricer\\\");\\n        require(_delta > 0, \\\"!_delta\\\");\\n        require(_delta <= DELTA_MULTIPLIER, \\\"newDelta cannot be more than 1\\\");\\n        require(_step > 0, \\\"!_step\\\");\\n        optionsPremiumPricer = IOptionsPremiumPricer(_optionsPremiumPricer);\\n        volatilityOracle = IVolatilityOracle(\\n            IOptionsPremiumPricer(_optionsPremiumPricer).volatilityOracle()\\n        );\\n        // ex: delta = 7500 (.75)\\n        delta = _delta;\\n        uint256 _assetOracleMultiplier =\\n            10 **\\n                IPriceOracle(\\n                    IOptionsPremiumPricer(_optionsPremiumPricer).priceOracle()\\n                )\\n                    .decimals();\\n\\n        // ex: step = 1000\\n        step = _step.mul(_assetOracleMultiplier);\\n\\n        assetOracleMultiplier = _assetOracleMultiplier;\\n    }\\n\\n    /**\\n     * @notice Gets the strike price satisfying the delta value\\n     * given the expiry timestamp and whether option is call or put\\n     * @param expiryTimestamp is the unix timestamp of expiration\\n     * @param isPut is whether option is put or call\\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\\n     * @return newDelta is the delta of the option given its parameters\\n     */\\n\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256 newStrikePrice, uint256 newDelta)\\n    {\\n        require(\\n            expiryTimestamp > block.timestamp,\\n            \\\"Expiry must be in the future!\\\"\\n        );\\n\\n        // asset price\\n        uint256 assetPrice = optionsPremiumPricer.getUnderlyingPrice();\\n\\n        // asset's annualized volatility\\n        uint256 annualizedVol =\\n            volatilityOracle.annualizedVol(optionsPremiumPricer.pool()).mul(\\n                10**10\\n            );\\n\\n        // For each asset prices with step of 'step' (down if put, up if call)\\n        //   if asset's getOptionDelta(currStrikePrice, spotPrice, annualizedVol, t) == (isPut ? 1 - delta:delta)\\n        //   with certain margin of error\\n        //        return strike price\\n\\n        uint256 strike =\\n            isPut\\n                ? assetPrice.sub(assetPrice % step).sub(step)\\n                : assetPrice.add(step - (assetPrice % step)).add(step);\\n        uint256 targetDelta = isPut ? DELTA_MULTIPLIER.sub(delta) : delta;\\n        uint256 prevDelta = DELTA_MULTIPLIER;\\n\\n        while (true) {\\n            uint256 currDelta =\\n                optionsPremiumPricer.getOptionDelta(\\n                    assetPrice.mul(ORACLE_PRICE_MULTIPLIER).div(\\n                        assetOracleMultiplier\\n                    ),\\n                    strike,\\n                    annualizedVol,\\n                    expiryTimestamp\\n                );\\n            //  If the current delta is between the previous\\n            //  strike price delta and current strike price delta\\n            //  then we are done\\n            bool foundTargetStrikePrice =\\n                isPut\\n                    ? targetDelta >= prevDelta && targetDelta <= currDelta\\n                    : targetDelta <= prevDelta && targetDelta >= currDelta;\\n\\n            if (foundTargetStrikePrice) {\\n                uint256 finalDelta =\\n                    _getBestDelta(prevDelta, currDelta, targetDelta, isPut);\\n                uint256 finalStrike =\\n                    _getBestStrike(finalDelta, prevDelta, strike, isPut);\\n                require(\\n                    isPut\\n                        ? finalStrike <= assetPrice\\n                        : finalStrike >= assetPrice,\\n                    \\\"Invalid strike price\\\"\\n                );\\n                // make decimals consistent with oToken strike price decimals (10 ** 8)\\n                return (\\n                    finalStrike.mul(ORACLE_PRICE_MULTIPLIER).div(\\n                        assetOracleMultiplier\\n                    ),\\n                    finalDelta\\n                );\\n            }\\n\\n            strike = isPut ? strike.sub(step) : strike.add(step);\\n\\n            prevDelta = currDelta;\\n        }\\n    }\\n\\n    /**\\n     * @notice Rounds to best delta value\\n     * @param prevDelta is the delta of the previous strike price\\n     * @param currDelta is delta of the current strike price\\n     * @param targetDelta is the delta we are targeting\\n     * @param isPut is whether its a put\\n     * @return the best delta value\\n     */\\n    function _getBestDelta(\\n        uint256 prevDelta,\\n        uint256 currDelta,\\n        uint256 targetDelta,\\n        bool isPut\\n    ) private pure returns (uint256) {\\n        uint256 finalDelta;\\n\\n        // for tie breaks (ex: 0.05 <= 0.1 <= 0.15) round to higher strike price\\n        // for calls and lower strike price for puts for deltas\\n        if (isPut) {\\n            uint256 upperBoundDiff = currDelta.sub(targetDelta);\\n            uint256 lowerBoundDiff = targetDelta.sub(prevDelta);\\n            finalDelta = lowerBoundDiff <= upperBoundDiff\\n                ? prevDelta\\n                : currDelta;\\n        } else {\\n            uint256 upperBoundDiff = prevDelta.sub(targetDelta);\\n            uint256 lowerBoundDiff = targetDelta.sub(currDelta);\\n            finalDelta = lowerBoundDiff <= upperBoundDiff\\n                ? currDelta\\n                : prevDelta;\\n        }\\n\\n        return finalDelta;\\n    }\\n\\n    /**\\n     * @notice Rounds to best delta value\\n     * @param finalDelta is the best delta value we found\\n     * @param prevDelta is delta of the previous strike price\\n     * @param strike is the strike of the previous iteration\\n     * @param isPut is whether its a put\\n     * @return the best strike\\n     */\\n    function _getBestStrike(\\n        uint256 finalDelta,\\n        uint256 prevDelta,\\n        uint256 strike,\\n        bool isPut\\n    ) private view returns (uint256) {\\n        if (finalDelta != prevDelta) {\\n            return strike;\\n        }\\n        return isPut ? strike.add(step) : strike.sub(step);\\n    }\\n\\n    /**\\n     * @notice Sets new delta value\\n     * @param newDelta is the new delta value\\n     */\\n    function setDelta(uint256 newDelta) external onlyOwner {\\n        require(newDelta > 0, \\\"!newDelta\\\");\\n        require(newDelta <= DELTA_MULTIPLIER, \\\"newDelta cannot be more than 1\\\");\\n        uint256 oldDelta = delta;\\n        delta = newDelta;\\n        emit DeltaSet(oldDelta, newDelta, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets new step value\\n     * @param newStep is the new step value\\n     */\\n    function setStep(uint256 newStep) external onlyOwner {\\n        require(newStep > 0, \\\"!newStep\\\");\\n        uint256 oldStep = step;\\n        step = newStep.mul(assetOracleMultiplier);\\n        emit StepSet(oldStep, newStep, msg.sender);\\n    }\\n}\\n\"\n    },\n    \"contracts/vendor/upgrades/UpgradeabilityProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport './Proxy.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n/**\\n * @title UpgradeabilityProxy\\n * @dev This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n */\\ncontract UpgradeabilityProxy is Proxy {\\n  /**\\n   * @dev Contract constructor.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  constructor(address _logic, bytes memory _data) payable {\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if(_data.length > 0) {\\n      (bool success,) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }\\n\\n  /**\\n   * @dev Emitted when the implementation is upgraded.\\n   * @param implementation Address of the new implementation.\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev Returns the current implementation.\\n   * @return impl Address of the current implementation\\n   */\\n  function _implementation() internal override view returns (address impl) {\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Upgrades the proxy to a new implementation.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Sets the implementation address of the proxy.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _setImplementation(address newImplementation) internal {\\n    require(Address.isContract(newImplementation), \\\"Cannot set a proxy implementation to a non-contract address\\\");\\n\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n    assembly {\\n      sstore(slot, newImplementation)\\n    }\\n  }\\n}\\n\"\n    },\n    \"contracts/vendor/upgrades/Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\n/**\\n * @title Proxy\\n * @dev Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n */\\nabstract contract Proxy {\\n  /**\\n   * @dev Fallback function.\\n   * Implemented entirely in `_fallback`.\\n   */\\n  fallback () payable external {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Receive function.\\n   * Implemented entirely in `_fallback`.\\n   */\\n  receive () payable external {\\n    // _fallback();\\n  }\\n\\n  /**\\n   * @return The Address of the implementation.\\n   */\\n  function _implementation() internal virtual view returns (address);\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   * @param implementation Address to delegate.\\n   */\\n  function _delegate(address implementation) internal {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 { revert(0, returndatasize()) }\\n      default { return(0, returndatasize()) }\\n    }\\n  }\\n\\n  /**\\n   * @dev Function that is run as the first thing in the fallback function.\\n   * Can be redefined in derived contracts to add functionality.\\n   * Redefinitions must call super._willFallback().\\n   */\\n  function _willFallback() internal virtual {\\n  }\\n\\n  /**\\n   * @dev fallback implementation.\\n   * Extracted to enable manual triggering.\\n   */\\n  function _fallback() internal {\\n    _willFallback();\\n    _delegate(_implementation());\\n  }\\n}\\n\"\n    },\n    \"contracts/vendor/upgrades/AdminUpgradeabilityProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport './UpgradeabilityProxy.sol';\\n\\n/**\\n * @title AdminUpgradeabilityProxy\\n * @dev This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks.\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\\n  /**\\n   * Contract constructor.\\n   * @param _logic address of the initial implementation.\\n   * @param admin_ Address of the proxy administrator.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  constructor(address _logic, address admin_, bytes memory _data) UpgradeabilityProxy(_logic, _data) payable {\\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\\n    _setAdmin(admin_);\\n  }\\n\\n  /**\\n   * @dev Emitted when the administration has been transferred.\\n   * @param previousAdmin Address of the previous admin.\\n   * @param newAdmin Address of the new admin.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n\\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Modifier to check whether the `msg.sender` is the admin.\\n   * If it is, it will run the function. Otherwise, it will delegate the call\\n   * to the implementation.\\n   */\\n  modifier ifAdmin() {\\n    if (msg.sender == _admin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @return adminAddress The address of the proxy admin.\\n   */\\n  function admin() external ifAdmin returns (address adminAddress) {\\n    return _admin();\\n  }\\n\\n  /**\\n   * @return implementationAddress The address of the implementation.\\n   */\\n  function implementation() external ifAdmin returns (address implementationAddress) {\\n    return _implementation();\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   * Only the current admin can call this function.\\n   * @param newAdmin Address to transfer proxy administration to.\\n   */\\n  function changeAdmin(address newAdmin) external ifAdmin {\\n    require(newAdmin != address(0), \\\"Cannot change the admin of a proxy to the zero address\\\");\\n    emit AdminChanged(_admin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy.\\n   * Only the admin can call this function.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function upgradeTo(address newImplementation) external ifAdmin {\\n    _upgradeTo(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy and call a function\\n   * on the new implementation.\\n   * This is useful to initialize the proxied contract.\\n   * @param newImplementation Address of the new implementation.\\n   * @param data Data to send as msg.data in the low level call.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\\n    _upgradeTo(newImplementation);\\n    (bool success,) = newImplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  /**\\n   * @return adm The admin slot.\\n   */\\n  function _admin() internal view returns (address adm) {\\n    bytes32 slot = ADMIN_SLOT;\\n    assembly {\\n      adm := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the address of the proxy admin.\\n   * @param newAdmin Address of the new proxy admin.\\n   */\\n  function _setAdmin(address newAdmin) internal {\\n    bytes32 slot = ADMIN_SLOT;\\n\\n    assembly {\\n      sstore(slot, newAdmin)\\n    }\\n  }\\n\\n  /**\\n   * @dev Only fall back when the sender is not the admin.\\n   */\\n  function _willFallback() internal override virtual {\\n    require(msg.sender != _admin(), \\\"Cannot call fallback function from the proxy admin\\\");\\n    super._willFallback();\\n  }\\n}\\n\"\n    },\n    \"contracts/tests/TestVaultLifecycle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {VaultLifecycle} from \\\"../libraries/VaultLifecycle.sol\\\";\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ncontract TestVaultLifecycle {\\n    Vault.VaultState public vaultState;\\n\\n    function getNextFriday(uint256 currentExpiry)\\n        external\\n        pure\\n        returns (uint256 nextFriday)\\n    {\\n        return VaultLifecycle.getNextFriday(currentExpiry);\\n    }\\n\\n    function getNextExpiry(address currentOption)\\n        external\\n        view\\n        returns (uint256 nextExpiry)\\n    {\\n        return VaultLifecycle.getNextExpiry(currentOption);\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        if (account == address(this)) {\\n            return 1 ether;\\n        }\\n        return 0;\\n    }\\n\\n    function setVaultState(Vault.VaultState calldata newVaultState) public {\\n        vaultState.totalPending = newVaultState.totalPending;\\n        vaultState.queuedWithdrawShares = newVaultState.queuedWithdrawShares;\\n    }\\n\\n    function rollover(VaultLifecycle.RolloverParams calldata params)\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        )\\n    {\\n        return VaultLifecycle.rollover(vaultState, params);\\n    }\\n}\\n\"\n    },\n    \"contracts/tests/TestShareMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {ShareMath} from \\\"../libraries/ShareMath.sol\\\";\\n\\ncontract TestShareMath {\\n    function assetToShares(\\n        uint256 assetAmount,\\n        uint256 pps,\\n        uint256 decimals\\n    ) external pure returns (uint256) {\\n        return ShareMath.assetToShares(assetAmount, pps, decimals);\\n    }\\n\\n    function sharesToAsset(\\n        uint256 shares,\\n        uint256 pps,\\n        uint256 decimals\\n    ) external pure returns (uint256) {\\n        return ShareMath.sharesToAsset(shares, pps, decimals);\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "b95617c81062fd76a77e7d2b5fac8258",
      "transactionHash": "0x700c600045483d38ff06d8294858221f877b3575560c14a21ad95ba26a612349",
      "args": [
        "0x8Ea8fa840B27E588a9E27F7070C7c365ec2F034d",
        1000,
        100
      ]
    },
    "decoded": {
      "from": "0x691c87dc570563D1D0AD7Fd0bb099ED367858863",
      "gasPrice": "87487107590",
      "gasLimit": "820607",
      "to": null,
      "value": "0",
      "nonce": 279,
      "data": "0x60e06040523480156200001157600080fd5b50604051620011db380380620011db8339810160408190526200003491620003e0565b6200003f336200033f565b6001600160a01b0383166200009b5760405162461bcd60e51b815260206004820152601660248201527f215f6f7074696f6e735072656d69756d5072696365720000000000000000000060448201526064015b60405180910390fd5b60008211620000d75760405162461bcd60e51b8152602060048201526007602482015266215f64656c746160c81b604482015260640162000092565b6127108211156200012b5760405162461bcd60e51b815260206004820152601e60248201527f6e657744656c74612063616e6e6f74206265206d6f7265207468616e20310000604482015260640162000092565b60008111620001665760405162461bcd60e51b81526020600482015260066024820152650215f737465760d41b604482015260640162000092565b826001600160a01b03166080816001600160a01b031660601b81525050826001600160a01b03166355b13a4f6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001bd57600080fd5b505afa158015620001d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f89190620003c3565b6001600160a01b031660a0816001600160a01b031660601b81525050816001819055506000836001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200025757600080fd5b505afa1580156200026c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002929190620003c3565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620002cb57600080fd5b505afa158015620002e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000306919062000417565b6200031390600a62000479565b90506200032f81836200038f60201b6200091b1790919060201c565b60025560c052506200056d915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006200039d828462000535565b90505b92915050565b80516001600160a01b0381168114620003be57600080fd5b919050565b600060208284031215620003d5578081fd5b6200039d82620003a6565b600080600060608486031215620003f5578182fd5b6200040084620003a6565b925060208401519150604084015190509250925092565b60006020828403121562000429578081fd5b5051919050565b600181815b808511156200047157816000190482111562000455576200045562000557565b808516156200046357918102915b93841c939080029062000435565b509250929050565b60006200039d83836000826200049257506001620003a0565b81620004a157506000620003a0565b8160018114620004ba5760028114620004c557620004e5565b6001915050620003a0565b60ff841115620004d957620004d962000557565b50506001821b620003a0565b5060208310610133831016604e8410600b84101617156200050a575081810a620003a0565b62000516838362000430565b80600019048211156200052d576200052d62000557565b029392505050565b600081600019048311821515161562000552576200055262000557565b500290565b634e487b7160e01b600052601160045260246000fd5b60805160601c60a05160601c60c051610c0f620005cc600039600081816105d20152818161073a01526108bc01526000818160d901526103dd0152600081816101310152818161033f0152818161040c01526105a80152610c0f6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063afa6626411610066578063afa662641461012c578063e25fe17514610153578063e436b8911461015c578063f2fde38b14610184578063f8dcbddb1461019757600080fd5b8063025ff0a5146100a357806312b495a8146100b857806355b13a4f146100d4578063715018a6146101135780638da5cb5b1461011b575b600080fd5b6100b66100b1366004610a8a565b6101aa565b005b6100c160015481565b6040519081526020015b60405180910390f35b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100cb565b6100b66102b3565b6000546001600160a01b03166100fb565b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6100c160025481565b61016f61016a366004610aba565b6102e9565b604080519283526020830191909152016100cb565b6100b6610192366004610a52565b6107b3565b6100b66101a5366004610a8a565b61084e565b6000546001600160a01b031633146101dd5760405162461bcd60e51b81526004016101d490610aed565b60405180910390fd5b600081116102195760405162461bcd60e51b8152602060048201526009602482015268216e657744656c746160b81b60448201526064016101d4565b61271081111561026b5760405162461bcd60e51b815260206004820152601e60248201527f6e657744656c74612063616e6e6f74206265206d6f7265207468616e2031000060448201526064016101d4565b6001805490829055604080518281526020810184905233917f760f0242cb96fbbbd0cf6647501a2763dfd1ee22287ca1a688cb1d5f1ca6026d91015b60405180910390a25050565b6000546001600160a01b031633146102dd5760405162461bcd60e51b81526004016101d490610aed565b6102e7600061092e565b565b60008042841161033b5760405162461bcd60e51b815260206004820152601d60248201527f457870697279206d75737420626520696e20746865206675747572652100000060448201526064016101d4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468f02d26040518163ffffffff1660e01b815260040160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610aa2565b905060006105186402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663950ed82c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190610a6e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156104da57600080fd5b505afa1580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190610aa2565b9061091b565b90506000856105545760025461054f906105496105358287610b84565b6002546105429190610b6d565b869061097e565b9061097e565b610575565b6002546105759061056f6105688287610b84565b869061098a565b9061098a565b905060008661058657600154610596565b600154610596906127109061098a565b90506127105b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639380576f6106057f00000000000000000000000000000000000000000000000000000000000000006105ff8a6305f5e10061091b565b90610996565b6040516001600160e01b031960e084901b16815260048101919091526024810187905260448101889052606481018d905260840160206040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190610aa2565b90506000896106a7578284111580156106a25750818410155b6106b7565b8284101580156106b75750818411155b9050801561077a5760006106cd8484878e6109a2565b905060006106dd8286898f610a1c565b90508b6106ed57888110156106f2565b888111155b6107355760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420737472696b6520707269636560601b60448201526064016101d4565b6107677f00000000000000000000000000000000000000000000000000000000000000006105ff836305f5e10061091b565b829a509a505050505050505050506107ac565b896107925760025461078d90869061097e565b6107a0565b6002546107a090869061098a565b9450819250505061059c565b9250929050565b6000546001600160a01b031633146107dd5760405162461bcd60e51b81526004016101d490610aed565b6001600160a01b0381166108425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101d4565b61084b8161092e565b50565b6000546001600160a01b031633146108785760405162461bcd60e51b81526004016101d490610aed565b600081116108b35760405162461bcd60e51b81526020600482015260086024820152670216e6577537465760c41b60448201526064016101d4565b6002546108e0827f000000000000000000000000000000000000000000000000000000000000000061091b565b600255604080518281526020810184905233917f08e332c6ae0c42d16506516b7ec987c8101ae8c5e930012ecd0c23142930518c91016102a7565b60006109278284610b4e565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006109278284610b22565b60006109278284610b6d565b60006109278284610b3a565b60008082156109e05760006109b7868661098a565b905060006109c5868961098a565b9050818111156109d557866109d7565b875b92505050610a11565b60006109ec878661098a565b905060006109fa868861098a565b905081811115610a0a5787610a0c565b865b925050505b90505b949350505050565b6000838514610a2c575081610a14565b81610a4457600254610a3f90849061098a565b610a11565b600254610a1190849061097e565b600060208284031215610a63578081fd5b813561092781610bc4565b600060208284031215610a7f578081fd5b815161092781610bc4565b600060208284031215610a9b578081fd5b5035919050565b600060208284031215610ab3578081fd5b5051919050565b60008060408385031215610acc578081fd5b8235915060208301358015158114610ae2578182fd5b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b3557610b35610b98565b500190565b600082610b4957610b49610bae565b500490565b6000816000190483118215151615610b6857610b68610b98565b500290565b600082821015610b7f57610b7f610b98565b500390565b600082610b9357610b93610bae565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461084b57600080fdfea26469706673582212201443c82f5078287ff9257c6b77c34a9b44efe298e74847dae4ddd6e44afe63e064736f6c634300080400330000000000000000000000008ea8fa840b27e588a9e27f7070c7c365ec2f034d00000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000064",
      "r": "0x67cb32ccc06a49c65a45c9d9510d230349970a5410663dcada1d374d6a78e84b",
      "s": "0x576c9577b82bc5be043fe060fb91ff59fbdfe14fc72d7173d29d67fb280bf583",
      "v": 1,
      "chainId": 1
    }
  }
}