{
  "address": "0xcbD9A79Caa0d354C9119039F5004DbCf23489c9a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "signerWallet",
          "type": "address"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        }
      ],
      "name": "CloseOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "biddingToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBidSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSize",
          "type": "uint256"
        }
      ],
      "name": "NewOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        }
      ],
      "name": "SettleOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "signerWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "signerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BID_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_CHAIN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_VERSION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        }
      ],
      "name": "averagePriceForOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "swapId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signerWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ISwap.Bid",
          "name": "bid",
          "type": "tuple"
        }
      ],
      "name": "check",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        }
      ],
      "name": "closeOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "biddingToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "minPrice",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "minBidSize",
          "type": "uint96"
        },
        {
          "internalType": "uint128",
          "name": "totalSize",
          "type": "uint128"
        }
      ],
      "name": "createOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "nonceUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offersCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "swapId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signerWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ISwap.Bid[]",
          "name": "bids",
          "type": "tuple[]"
        }
      ],
      "name": "settleOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swapOffers",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "minPrice",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "biddingToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "minBidSize",
          "type": "uint96"
        },
        {
          "internalType": "uint128",
          "name": "totalSize",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "availableSize",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "totalSales",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc954b04372f5b0e7308ab1499efe249bf96981a69e087f9a25551ad196f270b0",
  "receipt": {
    "to": null,
    "from": "0x422f7Bb366608723c8fe61Ac6D923023dCCBC3d7",
    "contractAddress": "0xcbD9A79Caa0d354C9119039F5004DbCf23489c9a",
    "transactionIndex": 1,
    "gasUsed": "2213921",
    "logsBloom": "0x
    "blockHash": "0xdbdd939e62e1f2e179fcc5ea40391bfbc7c0878c870bdc7299d327d0d5dd23c6",
    "transactionHash": "0xc954b04372f5b0e7308ab1499efe249bf96981a69e087f9a25551ad196f270b0",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30939585,
        "transactionHash": "0xc954b04372f5b0e7308ab1499efe249bf96981a69e087f9a25551ad196f270b0",
        "address": "0xcbD9A79Caa0d354C9119039F5004DbCf23489c9a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000422f7bb366608723c8fe61ac6d923023dccbc3d7"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xdbdd939e62e1f2e179fcc5ea40391bfbc7c0878c870bdc7299d327d0d5dd23c6"
      }
    ],
    "blockNumber": 30939585,
    "cumulativeGasUsed": "2361761",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1c1741207ef84789351f5497e4d6801b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"CloseOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSize\",\"type\":\"uint256\"}],\"name\":\"NewOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"SettleOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"signerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BID_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"averagePriceForOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ISwap.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"closeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"minPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"minBidSize\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"totalSize\",\"type\":\"uint128\"}],\"name\":\"createOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"nonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offersCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ISwap.Bid[]\",\"name\":\"bids\",\"type\":\"tuple[]\"}],\"name\":\"settleOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapOffers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"minPrice\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"minBidSize\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"totalSize\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"availableSize\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalSales\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"averagePriceForOffer(uint256)\":{\"params\":{\"swapId\":\"unique identifier of the swap offer\"}},\"cancelNonce(uint256[])\":{\"details\":\"Cancelled nonces are marked as usedEmits a Cancel eventOut of gas may occur in arrays of length > 400\",\"params\":{\"nonces\":\"uint256[] List of nonces to cancel\"}},\"check((uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32))\":{\"params\":{\"bid\":\"Bid struct containing bid details\"},\"returns\":{\"_0\":\"tuple of error count and bytes32[] memory array of error messages\"}},\"closeOffer(uint256)\":{\"params\":{\"swapId\":\"unique identifier of the swap offer\"}},\"createOffer(address,address,uint96,uint96,uint128)\":{\"params\":{\"biddingToken\":\"token asked by seller\",\"minBidSize\":\"minimum amount of oToken requested in a single bid\",\"minPrice\":\"minimum price of oToken denominated in biddingToken\",\"oToken\":\"token offered by seller\",\"totalSize\":\"amount of oToken offered by seller\"}},\"nonceUsed(address,uint256)\":{\"params\":{\"nonce\":\"uint256 Nonce being checked\",\"signer\":\"address Address of the signer\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(address,uint256)\":{\"params\":{\"fee\":\"is the fee in percent in 2 decimals\",\"referrer\":\"is the address of the referrer\"}},\"settleOffer(uint256,(uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32)[])\":{\"params\":{\"bids\":\"bids for swaps\",\"swapId\":\"unique identifier of the swap offer\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_nonceGroups\":{\"details\":\"The nonce group is computed as nonce / 256, so each group of 256 sequential nonces uses the same keyThe nonce states are encoded as 256 bits, for each nonce in the group 0 means available and 1 means used\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"averagePriceForOffer(uint256)\":{\"notice\":\"Returns the average settlement price for a swap offer\"},\"cancelNonce(uint256[])\":{\"notice\":\"Cancel one or more nonces\"},\"check((uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32))\":{\"notice\":\"Validates Swap bid for any potential errors\"},\"closeOffer(uint256)\":{\"notice\":\"Close offer\"},\"createOffer(address,address,uint96,uint96,uint128)\":{\"notice\":\"Create a new offer available for swap\"},\"nonceUsed(address,uint256)\":{\"notice\":\"Returns true if the nonce has been used\"},\"setFee(address,uint256)\":{\"notice\":\"Sets the referral fee for a specific referrer\"},\"settleOffer(uint256,(uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32)[])\":{\"notice\":\"Settles the swap offering by iterating through the bids\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/Swap.sol\":\"Swap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function name() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x90fd29862ecc4bc1f2ee3e4d5c42364c5fbcc0f43f907d2bb82665f93df0d218\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\ninterface ISwap {\\n    struct Offer {\\n        // 32 byte slot 1, partial fill\\n        // Seller wallet address\\n        address seller;\\n        // 32 byte slot 2\\n        // Addess of oToken\\n        address oToken;\\n        // Price per oToken denominated in biddingToken\\n        uint96 minPrice;\\n        // 32 byte slot 3\\n        // ERC20 Token to bid for oToken\\n        address biddingToken;\\n        // Minimum oToken amount acceptable for a single bid\\n        uint96 minBidSize;\\n        // 32 byte slot 4\\n        // Total available oToken amount\\n        uint128 totalSize;\\n        // Remaining available oToken amount\\n        // This figure is updated after each successfull swap\\n        uint128 availableSize;\\n        // 32 byte slot 5\\n        // Amount of biddingToken received\\n        // This figure is updated after each successfull swap\\n        uint256 totalSales;\\n    }\\n\\n    struct Bid {\\n        // ID assigned to offers\\n        uint256 swapId;\\n        // Number only used once for each wallet\\n        uint256 nonce;\\n        // Signer wallet address\\n        address signerWallet;\\n        // Amount of biddingToken offered by signer\\n        uint256 sellAmount;\\n        // Amount of oToken requested by signer\\n        uint256 buyAmount;\\n        // Referrer wallet address\\n        address referrer;\\n        // Signature recovery id\\n        uint8 v;\\n        // r portion of the ECSDA signature\\n        bytes32 r;\\n        // s portion of the ECSDA signature\\n        bytes32 s;\\n    }\\n\\n    event Swap(\\n        uint256 indexed swapId,\\n        uint256 nonce,\\n        address indexed signerWallet,\\n        uint256 signerAmount,\\n        uint256 sellerAmount,\\n        address referrer,\\n        uint256 feeAmount\\n    );\\n\\n    event NewOffer(\\n        uint256 swapId,\\n        address seller,\\n        address oToken,\\n        address biddingToken,\\n        uint256 minPrice,\\n        uint256 minBidSize,\\n        uint256 totalSize\\n    );\\n\\n    event CloseOffer(uint256 swapId);\\n\\n    event SettleOffer(uint256 swapId);\\n\\n    event Cancel(uint256 indexed nonce, address indexed signerWallet);\\n\\n    function createOffer(\\n        address oToken,\\n        address biddingToken,\\n        uint96 minPrice,\\n        uint96 minBidSize,\\n        uint128 totalSize\\n    ) external returns (uint256 swapId);\\n\\n    function settleOffer(uint256 swapId, Bid[] calldata bids) external;\\n\\n    function closeOffer(uint256 swapId) external;\\n\\n    function cancelNonce(uint256[] calldata nonces) external;\\n\\n    function check(Bid calldata bid)\\n        external\\n        view\\n        returns (uint256, bytes32[] memory);\\n\\n    function averagePriceForOffer(uint256 swapId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function nonceUsed(address, uint256) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x17f0f9ed391cff4d162076f493eba130527c4cad7a96138a8c97b476756823c8\",\"license\":\"MIT\"},\"contracts/utils/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Source: https://github.com/airswap/airswap-protocols/blob/main/source/swap/contracts/Swap.sol\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\n\\ncontract Swap is ISwap, ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            abi.encodePacked(\\n                \\\"EIP712Domain(\\\",\\n                \\\"string name,\\\",\\n                \\\"string version,\\\",\\n                \\\"uint256 chainId,\\\",\\n                \\\"address verifyingContract\\\",\\n                \\\")\\\"\\n            )\\n        );\\n\\n    bytes32 public constant BID_TYPEHASH =\\n        keccak256(\\n            abi.encodePacked(\\n                \\\"Bid(\\\",\\n                \\\"uint256 swapId,\\\",\\n                \\\"uint256 nonce,\\\",\\n                \\\"address signerWallet,\\\",\\n                \\\"uint256 sellAmount,\\\",\\n                \\\"uint256 buyAmount,\\\",\\n                \\\"address referrer\\\",\\n                \\\")\\\"\\n            )\\n        );\\n\\n    bytes32 public constant DOMAIN_NAME = keccak256(\\\"RIBBON SWAP\\\");\\n    bytes32 public constant DOMAIN_VERSION = keccak256(\\\"1\\\");\\n    uint256 public immutable DOMAIN_CHAIN_ID;\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    uint256 internal constant MAX_PERCENTAGE = 10000;\\n    uint256 internal constant MAX_ERROR_COUNT = 10;\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    uint256 public offersCounter = 0;\\n\\n    mapping(uint256 => Offer) public swapOffers;\\n\\n    mapping(address => uint256) public referralFees;\\n\\n    /**\\n     * @notice Double mapping of signers to nonce groups to nonce states\\n     * @dev The nonce group is computed as nonce / 256, so each group of 256 sequential nonces uses the same key\\n     * @dev The nonce states are encoded as 256 bits, for each nonce in the group 0 means available and 1 means used\\n     */\\n    mapping(address => mapping(uint256 => uint256)) internal _nonceGroups;\\n\\n    /************************************************\\n     *  CONSTRUCTOR\\n     ***********************************************/\\n\\n    constructor() {\\n        uint256 currentChainId = getChainId();\\n        DOMAIN_CHAIN_ID = currentChainId;\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                DOMAIN_NAME,\\n                DOMAIN_VERSION,\\n                currentChainId,\\n                this\\n            )\\n        );\\n    }\\n\\n    /************************************************\\n     *  SETTER\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the referral fee for a specific referrer\\n     * @param referrer is the address of the referrer\\n     * @param fee is the fee in percent in 2 decimals\\n     */\\n    function setFee(address referrer, uint256 fee) external onlyOwner {\\n        require(referrer != address(0), \\\"Referrer cannot be the zero address\\\");\\n        require(fee < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\n\\n        referralFees[referrer] = fee;\\n    }\\n\\n    /************************************************\\n     *  OFFER CREATION AND SETTLEMENT\\n     ***********************************************/\\n\\n    /**\\n     * @notice Create a new offer available for swap\\n     * @param oToken token offered by seller\\n     * @param biddingToken token asked by seller\\n     * @param minPrice minimum price of oToken denominated in biddingToken\\n     * @param minBidSize minimum amount of oToken requested in a single bid\\n     * @param totalSize amount of oToken offered by seller\\n     */\\n    function createOffer(\\n        address oToken,\\n        address biddingToken,\\n        uint96 minPrice,\\n        uint96 minBidSize,\\n        uint128 totalSize\\n    ) external override returns (uint256 swapId) {\\n        require(oToken != address(0), \\\"oToken cannot be the zero address\\\");\\n        require(\\n            biddingToken != address(0),\\n            \\\"BiddingToken cannot be the zero address\\\"\\n        );\\n        require(minPrice > 0, \\\"MinPrice must be larger than zero\\\");\\n        require(minBidSize > 0, \\\"MinBidSize must be larger than zero\\\");\\n        require(minBidSize <= totalSize, \\\"MinBidSize exceeds total size\\\");\\n\\n        offersCounter += 1;\\n\\n        swapId = offersCounter;\\n\\n        swapOffers[swapId].seller = msg.sender;\\n        swapOffers[swapId].oToken = oToken;\\n        swapOffers[swapId].biddingToken = biddingToken;\\n        swapOffers[swapId].minBidSize = minBidSize;\\n        swapOffers[swapId].minPrice = minPrice;\\n        swapOffers[swapId].totalSize = totalSize;\\n        swapOffers[swapId].availableSize = totalSize;\\n        // We warm the storage slot with 1 wei so we avoid a cold SSTORE\\n        swapOffers[swapId].totalSales = 1;\\n\\n        emit NewOffer(\\n            swapId,\\n            msg.sender,\\n            oToken,\\n            biddingToken,\\n            minPrice,\\n            minBidSize,\\n            totalSize\\n        );\\n    }\\n\\n    /**\\n     * @notice Settles the swap offering by iterating through the bids\\n     * @param swapId unique identifier of the swap offer\\n     * @param bids bids for swaps\\n     */\\n    function settleOffer(uint256 swapId, Bid[] calldata bids)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        Offer storage offer = swapOffers[swapId];\\n\\n        address seller = offer.seller;\\n        require(\\n            seller == msg.sender,\\n            \\\"Only seller can settle or offer doesn't exist\\\"\\n        );\\n        require(offer.availableSize > 0, \\\"Offer fully settled\\\");\\n\\n        uint256 totalSales;\\n        OfferDetails memory offerDetails;\\n        offerDetails.seller = seller;\\n        offerDetails.oToken = offer.oToken;\\n        offerDetails.biddingToken = offer.biddingToken;\\n        offerDetails.minPrice = offer.minPrice;\\n        offerDetails.minBidSize = offer.minBidSize;\\n\\n        for (uint256 i = 0; i < bids.length; i++) {\\n            _swap(offerDetails, offer, bids[i]);\\n            totalSales += bids[i].sellAmount;\\n        }\\n\\n        bool fullySettled = offer.availableSize == 0;\\n\\n        // Deduct the initial 1 wei offset if offer is fully settled\\n        offer.totalSales += totalSales - (fullySettled ? 1 : 0);\\n\\n        if (fullySettled) {\\n            emit SettleOffer(swapId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Close offer\\n     * @param swapId unique identifier of the swap offer\\n     */\\n    function closeOffer(uint256 swapId) external override {\\n        require(\\n            swapOffers[swapId].seller == msg.sender,\\n            \\\"Only seller can close or offer doesn't exist\\\"\\n        );\\n\\n        delete swapOffers[swapId];\\n\\n        emit CloseOffer(swapId);\\n    }\\n\\n    /**\\n     * @notice Cancel one or more nonces\\n     * @dev Cancelled nonces are marked as used\\n     * @dev Emits a Cancel event\\n     * @dev Out of gas may occur in arrays of length > 400\\n     * @param nonces uint256[] List of nonces to cancel\\n     */\\n    function cancelNonce(uint256[] calldata nonces) external override {\\n        for (uint256 i = 0; i < nonces.length; i++) {\\n            uint256 nonce = nonces[i];\\n            if (_markNonceAsUsed(msg.sender, nonce)) {\\n                emit Cancel(nonce, msg.sender);\\n            }\\n        }\\n    }\\n\\n    /************************************************\\n     *  PUBLIC VIEW FUNCTIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Validates Swap bid for any potential errors\\n     * @param bid Bid struct containing bid details\\n     * @return tuple of error count and bytes32[] memory array of error messages\\n     */\\n    function check(Bid calldata bid)\\n        public\\n        view\\n        override\\n        returns (uint256, bytes32[] memory)\\n    {\\n        Offer memory offer = swapOffers[bid.swapId];\\n        require(offer.seller != address(0), \\\"Offer does not exist\\\");\\n\\n        bytes32[] memory errors = new bytes32[](MAX_ERROR_COUNT);\\n\\n        uint256 errCount;\\n\\n        // Check signature\\n        address signatory = _getSignatory(bid);\\n\\n        if (signatory == address(0)) {\\n            errors[errCount] = \\\"SIGNATURE_INVALID\\\";\\n            errCount++;\\n        }\\n\\n        if (signatory != bid.signerWallet) {\\n            errors[errCount] = \\\"SIGNATURE_MISMATCHED\\\";\\n            errCount++;\\n        }\\n\\n        // Check nonce\\n        if (nonceUsed(signatory, bid.nonce)) {\\n            errors[errCount] = \\\"NONCE_ALREADY_USED\\\";\\n            errCount++;\\n        }\\n\\n        // Check bid size\\n        if (bid.buyAmount < offer.minBidSize) {\\n            errors[errCount] = \\\"BID_TOO_SMALL\\\";\\n            errCount++;\\n        }\\n        if (bid.buyAmount > offer.availableSize) {\\n            errors[errCount] = \\\"BID_EXCEED_AVAILABLE_SIZE\\\";\\n            errCount++;\\n        }\\n\\n        // Check bid price\\n        uint256 bidPrice =\\n            (bid.sellAmount * 10**OTOKEN_DECIMALS) / bid.buyAmount;\\n        if (bidPrice < offer.minPrice) {\\n            errors[errCount] = \\\"PRICE_TOO_LOW\\\";\\n            errCount++;\\n        }\\n\\n        // Check signer allowance\\n        uint256 signerAllowance =\\n            IERC20(offer.biddingToken).allowance(\\n                bid.signerWallet,\\n                address(this)\\n            );\\n        if (signerAllowance < bid.sellAmount) {\\n            errors[errCount] = \\\"SIGNER_ALLOWANCE_LOW\\\";\\n            errCount++;\\n        }\\n\\n        // Check signer balance\\n        uint256 signerBalance =\\n            IERC20(offer.biddingToken).balanceOf(bid.signerWallet);\\n        if (signerBalance < bid.sellAmount) {\\n            errors[errCount] = \\\"SIGNER_BALANCE_LOW\\\";\\n            errCount++;\\n        }\\n\\n        // Check seller allowance\\n        uint256 sellerAllowance =\\n            IERC20(offer.oToken).allowance(offer.seller, address(this));\\n        if (sellerAllowance < bid.buyAmount) {\\n            errors[errCount] = \\\"SELLER_ALLOWANCE_LOW\\\";\\n            errCount++;\\n        }\\n\\n        // Check seller balance\\n        uint256 sellerBalance = IERC20(offer.oToken).balanceOf(offer.seller);\\n        if (sellerBalance < bid.buyAmount) {\\n            errors[errCount] = \\\"SELLER_BALANCE_LOW\\\";\\n            errCount++;\\n        }\\n\\n        return (errCount, errors);\\n    }\\n\\n    /**\\n     * @notice Returns the average settlement price for a swap offer\\n     * @param swapId unique identifier of the swap offer\\n     */\\n    function averagePriceForOffer(uint256 swapId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        Offer storage offer = swapOffers[swapId];\\n        require(offer.seller != address(0), \\\"Offer does not exist\\\");\\n\\n        uint256 availableSize = offer.availableSize;\\n\\n        // Deduct the initial 1 wei offset if offer is not fully settled\\n        uint256 adjustment = availableSize != 0 ? 1 : 0;\\n\\n        return\\n            ((offer.totalSales - adjustment) * (10**8)) /\\n            (offer.totalSize - availableSize);\\n    }\\n\\n    /**\\n     * @notice Returns true if the nonce has been used\\n     * @param signer address Address of the signer\\n     * @param nonce uint256 Nonce being checked\\n     */\\n    function nonceUsed(address signer, uint256 nonce)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        uint256 groupKey = nonce / 256;\\n        uint256 indexInGroup = nonce % 256;\\n        return (_nonceGroups[signer][groupKey] >> indexInGroup) & 1 == 1;\\n    }\\n\\n    /************************************************\\n     *  INTERNAL FUNCTIONS\\n     ***********************************************/\\n\\n    struct OfferDetails {\\n        address seller;\\n        address oToken;\\n        address biddingToken;\\n        uint256 minPrice;\\n        uint256 minBidSize;\\n    }\\n\\n    /**\\n     * @notice Swap Atomic ERC20 Swap\\n     * @param details Details of offering\\n     * @param offer Offer struct containing offer details\\n     * @param bid Bid struct containing bid details\\n     */\\n    function _swap(\\n        OfferDetails memory details,\\n        Offer storage offer,\\n        Bid calldata bid\\n    ) internal {\\n        require(DOMAIN_CHAIN_ID == getChainId(), \\\"CHAIN_ID_CHANGED\\\");\\n\\n        address signatory = _getSignatory(bid);\\n        require(signatory != address(0), \\\"SIGNATURE_INVALID\\\");\\n        require(signatory == bid.signerWallet, \\\"SIGNATURE_MISMATCHED\\\");\\n        require(_markNonceAsUsed(signatory, bid.nonce), \\\"NONCE_ALREADY_USED\\\");\\n        require(\\n            bid.buyAmount <= offer.availableSize,\\n            \\\"BID_EXCEED_AVAILABLE_SIZE\\\"\\n        );\\n        require(bid.buyAmount >= details.minBidSize, \\\"BID_TOO_SMALL\\\");\\n\\n        // Ensure min. price is met\\n        uint256 bidPrice =\\n            (bid.sellAmount * 10**OTOKEN_DECIMALS) / bid.buyAmount;\\n        require(bidPrice >= details.minPrice, \\\"PRICE_TOO_LOW\\\");\\n\\n        // don't have to do a uint128 check because we already check\\n        // that bid.buyAmount <= offer.availableSize\\n        offer.availableSize -= uint128(bid.buyAmount);\\n\\n        // Transfer token from sender to signer\\n        IERC20(details.oToken).safeTransferFrom(\\n            details.seller,\\n            bid.signerWallet,\\n            bid.buyAmount\\n        );\\n\\n        // Transfer to referrer if any\\n        uint256 feeAmount;\\n        if (bid.referrer != address(0)) {\\n            uint256 feePercent = referralFees[bid.referrer];\\n\\n            if (feePercent > 0) {\\n                feeAmount = (bid.sellAmount * feePercent) / MAX_PERCENTAGE;\\n\\n                IERC20(details.biddingToken).safeTransferFrom(\\n                    bid.signerWallet,\\n                    bid.referrer,\\n                    feeAmount\\n                );\\n            }\\n        }\\n\\n        // Transfer token from signer to recipient\\n        IERC20(details.biddingToken).safeTransferFrom(\\n            bid.signerWallet,\\n            details.seller,\\n            bid.sellAmount - feeAmount\\n        );\\n\\n        // Emit a Swap event\\n        emit Swap(\\n            bid.swapId,\\n            bid.nonce,\\n            bid.signerWallet,\\n            bid.sellAmount,\\n            bid.buyAmount,\\n            bid.referrer,\\n            feeAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice Marks a nonce as used for the given signer\\n     * @param signer address Address of the signer for which to mark the nonce as used\\n     * @param nonce uint256 Nonce to be marked as used\\n     * @return bool True if the nonce was not marked as used already\\n     */\\n    function _markNonceAsUsed(address signer, uint256 nonce)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 groupKey = nonce / 256;\\n        uint256 indexInGroup = nonce % 256;\\n        uint256 group = _nonceGroups[signer][groupKey];\\n\\n        // If it is already used, return false\\n        if ((group >> indexInGroup) & 1 == 1) {\\n            return false;\\n        }\\n\\n        _nonceGroups[signer][groupKey] = group | (uint256(1) << indexInGroup);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Recover the signatory from a signature\\n     * @param bid Bid struct containing bid details\\n     */\\n    function _getSignatory(Bid calldata bid) internal view returns (address) {\\n        return\\n            ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR,\\n                        keccak256(\\n                            abi.encode(\\n                                BID_TYPEHASH,\\n                                bid.swapId,\\n                                bid.nonce,\\n                                bid.signerWallet,\\n                                bid.sellAmount,\\n                                bid.buyAmount,\\n                                bid.referrer\\n                            )\\n                        )\\n                    )\\n                ),\\n                bid.v,\\n                bid.r,\\n                bid.s\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current chainId using the chainid opcode\\n     * @return id uint256 The chain id\\n     */\\n    function getChainId() internal view returns (uint256 id) {\\n        // no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x888d7a6ca18a137f81c9b7b2ca7e7f6892948e19802e9d113551ab3b801c35c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600060025534801561001557600080fd5b50600160005561002433610159565b60004660808190526040516c08a92a06e626488dedac2d2dc5609b1b60208201526b1cdd1c9a5b99c81b985b594b60a21b602d8201526e1cdd1c9a5b99c81d995c9cda5bdb8b608a1b60398201526f1d5a5b9d0c8d4d8818da185a5b92590b60821b60488201527f6164647265737320766572696679696e67436f6e7472616374000000000000006058820152602960f81b607182015290915060720160408051601f198184030181528282528051602091820120908301527fc6a23281a7a642025bdf45d090469ceeec8a143b5bad19e8f545d83149642b8b908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018290523060a082015260c00160408051601f19818403018152919052805160209091012060a052506101ab565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60805160a0516126186101de600039600081816101af0152611bcd0152600081816101d6015261173c01526126186000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063acb8cc4911610071578063acb8cc4914610360578063d5172fcc14610387578063e55156b51461039a578063f2fde38b146103ad578063fbcac9e1146103c057600080fd5b8063715018a61461021c57806375780f4214610224578063796f077b146102445780638da5cb5b1461026b578063a13f1c621461028657600080fd5b80633644e515116100f45780633644e515146101aa578063416f281d146101d157806351bb9b1e146101f857806369fd925f146102005780636c1c56f11461020957600080fd5b806305477ddf1461013157806307a975a1146101465780631647795e1461016c57806320606b701461018f5780632787b5f814610197575b600080fd5b61014461013f366004612192565b6103e1565b005b61015961015436600461204e565b6104cf565b6040519081526020015b60405180910390f35b61017f61017a3660046120c1565b6107f4565b6040519015158152602001610163565b61015961084c565b6101596101a5366004612192565b6108f8565b6101597f000000000000000000000000000000000000000000000000000000000000000081565b6101597f000000000000000000000000000000000000000000000000000000000000000081565b6101596109cc565b61015960025481565b6101446102173660046120ea565b6109db565b610144610a66565b610159610232366004612034565b60046020526000908152604090205481565b6101597fc6a23281a7a642025bdf45d090469ceeec8a143b5bad19e8f545d83149642b8b81565b6001546040516001600160a01b039091168152602001610163565b610301610294366004612192565b6003602081905260009182526040909120805460018201546002830154938301546004909301546001600160a01b0392831694828416946001600160601b03600160a01b94859004811695831694909204909116916001600160801b0380831692600160801b9004169088565b604080516001600160a01b03998a16815297891660208901526001600160601b0396871690880152969093166060860152921660808401526001600160801b0391821660a08401521660c082015260e081019190915261010001610163565b6101597fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6101446103953660046121c2565b610a9c565b6101446103a83660046120c1565b610d3b565b6101446103bb366004612034565b610e2a565b6103d36103ce36600461217a565b610ec5565b604051610163929190612399565b6000818152600360205260409020546001600160a01b031633146104615760405162461bcd60e51b815260206004820152602c60248201527f4f6e6c792073656c6c65722063616e20636c6f7365206f72206f66666572206460448201526b1bd95cdb89dd08195e1a5cdd60a21b60648201526084015b60405180910390fd5b600081815260036020818152604080842080546001600160a01b03191681556001810185905560028101859055928301849055600490920192909255518281527f7f501b3628443cc9556da1d5744140c295120a54f5aa01e220363dd568e84783910160405180910390a150565b60006001600160a01b0386166105315760405162461bcd60e51b815260206004820152602160248201527f6f546f6b656e2063616e6e6f7420626520746865207a65726f206164647265736044820152607360f81b6064820152608401610458565b6001600160a01b0385166105975760405162461bcd60e51b815260206004820152602760248201527f42696464696e67546f6b656e2063616e6e6f7420626520746865207a65726f206044820152666164647265737360c81b6064820152608401610458565b6000846001600160601b0316116105fa5760405162461bcd60e51b815260206004820152602160248201527f4d696e5072696365206d757374206265206c6172676572207468616e207a65726044820152606f60f81b6064820152608401610458565b6000836001600160601b03161161065f5760405162461bcd60e51b815260206004820152602360248201527f4d696e42696453697a65206d757374206265206c6172676572207468616e207a60448201526265726f60e81b6064820152608401610458565b816001600160801b0316836001600160601b031611156106c15760405162461bcd60e51b815260206004820152601d60248201527f4d696e42696453697a65206578636565647320746f74616c2073697a650000006044820152606401610458565b6001600260008282546106d491906123e6565b90915550506002805460008181526003602081905260409182902080546001600160a01b0319163390811782556001600160601b03808a16600160a01b9081026001600160a01b038e81169190911798850198909855908b1602958c1695909517600180830191909155600160801b6001600160801b038916908102179282019290925560040155519092507f61ed224de71f3815c67ff417a9cba223a61831d6223cfd50f3986f55cca81166916107e3918491908a908a908a908a908a909687526001600160a01b03958616602088015293851660408701529190931660608501526001600160601b03928316608085015290911660a08301526001600160801b031660c082015260e00190565b60405180910390a195945050505050565b600080610803610100846123fe565b90506000610813610100856125a2565b6001600160a01b038616600090815260056020908152604080832095835294905292909220546001921c82169091149150505b92915050565b6040516c08a92a06e626488dedac2d2dc5609b1b60208201526b1cdd1c9a5b99c81b985b594b60a21b602d8201526e1cdd1c9a5b99c81d995c9cda5bdb8b608a1b60398201526f1d5a5b9d0c8d4d8818da185a5b92590b60821b60488201527f6164647265737320766572696679696e67436f6e7472616374000000000000006058820152602960f81b60718201526072015b6040516020818303038152906040528051906020012081565b600081815260036020526040812080546001600160a01b03166109545760405162461bcd60e51b815260206004820152601460248201527313d999995c88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610458565b6003810154600160801b90046001600160801b031660008161097757600061097a565b60015b600384015460ff91909116915061099b9083906001600160801b0316612544565b8184600401546109ab9190612544565b6109b9906305f5e1006124fd565b6109c391906123fe565b95945050505050565b6040516020016108df9061227a565b60005b81811015610a61576000838383818110610a0857634e487b7160e01b600052603260045260246000fd5b905060200201359050610a1b338261164e565b15610a4e57604051339082907f8dd3c361eb2366ff27c2db0eb07b9261f1d052570742ab8c9a0c326f37aa576d90600090a35b5080610a5981612587565b9150506109de565b505050565b6001546001600160a01b03163314610a905760405162461bcd60e51b815260040161045890612364565b610a9a60006116e7565b565b60026000541415610aef5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610458565b6002600090815583815260036020526040902080546001600160a01b0316338114610b725760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c792073656c6c65722063616e20736574746c65206f72206f666665722060448201526c191bd95cdb89dd08195e1a5cdd609a1b6064820152608401610458565b6003820154600160801b90046001600160801b0316610bc95760405162461bcd60e51b815260206004820152601360248201527213d999995c88199d5b1b1e481cd95d1d1b1959606a1b6044820152606401610458565b6040805160a0810182526001600160a01b038381168252600185015480821660208401526002860154918216938301939093526001600160601b03600160a01b93849004811660608401529290049091166080820152600090815b85811015610ca757610c5d8286898985818110610c5157634e487b7160e01b600052603260045260246000fd5b90506101200201611739565b868682818110610c7d57634e487b7160e01b600052603260045260246000fd5b905061012002016060013583610c9391906123e6565b925080610c9f81612587565b915050610c24565b506003840154600160801b90046001600160801b03161580610cca576000610ccd565b60015b610cda9060ff1684612544565b856004016000828254610ced91906123e6565b90915550508015610d2c576040518881527f1b5db04ed24662a962854839dba8e5b26c71e843c99221f770571a4ea3ecfdcd9060200160405180910390a15b50506001600055505050505050565b6001546001600160a01b03163314610d655760405162461bcd60e51b815260040161045890612364565b6001600160a01b038216610dc75760405162461bcd60e51b815260206004820152602360248201527f52656665727265722063616e6e6f7420626520746865207a65726f206164647260448201526265737360e81b6064820152608401610458565b6127108110610e0e5760405162461bcd60e51b81526020600482015260136024820152724665652065786365656473206d6178696d756d60681b6044820152606401610458565b6001600160a01b03909116600090815260046020526040902055565b6001546001600160a01b03163314610e545760405162461bcd60e51b815260040161045890612364565b6001600160a01b038116610eb95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610458565b610ec2816116e7565b50565b8035600090815260036020818152604080842081516101008101835281546001600160a01b039081168083526001840154808316968401969096526001600160601b03600160a01b968790048116958401959095526002840154918216606084810191909152959091049093166080820152938101546001600160801b0380821660a0870152600160801b9091041660c08501526004015460e0840152909190610fa85760405162461bcd60e51b815260206004820152601460248201527313d999995c88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610458565b60408051600a80825261016082019092526000916020820161014080368337019050509050600080610fd987611bc7565b90506001600160a01b038116611037577014d251d3905515549157d2539590531251607a1b83838151811061101e57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528161103381612587565b9250505b6110476060880160408901612034565b6001600160a01b0316816001600160a01b0316146110b0577314d251d3905515549157d35254d3505510d2115160621b83838151811061109757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152816110ac81612587565b9250505b6110be8188602001356107f4565b1561111257711393d390d157d053149150511657d554d15160721b8383815181106110f957634e487b7160e01b600052603260045260246000fd5b60209081029190910101528161110e81612587565b9250505b83608001516001600160601b031687608001351015611175576c10925117d513d3d7d4d3505313609a1b83838151811061115c57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528161117181612587565b9250505b8360c001516001600160801b0316876080013511156111e457784249445f4558434545445f415641494c41424c455f53495a4560381b8383815181106111cb57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152816111e081612587565b9250505b600060808801356111f76008600a612455565b6112059060608b01356124fd565b61120f91906123fe565b905084604001516001600160601b0316811015611270576c50524943455f544f4f5f4c4f5760981b84848151811061125757634e487b7160e01b600052603260045260246000fd5b60209081029190910101528261126c81612587565b9350505b600085606001516001600160a01b031663dd62ed3e8a60400160208101906112989190612034565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b1580156112dd57600080fd5b505afa1580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131591906121aa565b9050886060013581101561137457735349474e45525f414c4c4f57414e43455f4c4f5760601b85858151811061135b57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528361137081612587565b9450505b600086606001516001600160a01b03166370a082318b604001602081019061139c9190612034565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141391906121aa565b9050896060013581101561147057715349474e45525f42414c414e43455f4c4f5760701b86868151811061145757634e487b7160e01b600052603260045260246000fd5b60209081029190910101528461146c81612587565b9550505b60208701518751604051636eb1769f60e11b81526001600160a01b039182166004820152306024820152600092919091169063dd62ed3e9060440160206040518083038186803b1580156114c357600080fd5b505afa1580156114d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fb91906121aa565b90508a6080013581101561155a577353454c4c45525f414c4c4f57414e43455f4c4f5760601b87878151811061154157634e487b7160e01b600052603260045260246000fd5b60209081029190910101528561155681612587565b9650505b602088015188516040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a082319060240160206040518083038186803b1580156115a757600080fd5b505afa1580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df91906121aa565b90508b6080013581101561163c577153454c4c45525f42414c414e43455f4c4f5760701b88888151811061162357634e487b7160e01b600052603260045260246000fd5b60209081029190910101528661163881612587565b9750505b50949a95995094975050505050505050565b60008061165d610100846123fe565b9050600061166d610100856125a2565b6001600160a01b0386166000908152600560209081526040808320868452909152902054909150600181831c811614156116ad5760009350505050610846565b6001600160a01b03861660009081526005602090815260408083209583529490529290922060019182901b92909217909155905092915050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b467f00000000000000000000000000000000000000000000000000000000000000001461179b5760405162461bcd60e51b815260206004820152601060248201526f10d210525397d25117d0d2105391d15160821b6044820152606401610458565b60006117a682611bc7565b90506001600160a01b0381166117f25760405162461bcd60e51b815260206004820152601160248201527014d251d3905515549157d2539590531251607a1b6044820152606401610458565b6118026060830160408401612034565b6001600160a01b0316816001600160a01b0316146118595760405162461bcd60e51b815260206004820152601460248201527314d251d3905515549157d35254d3505510d2115160621b6044820152606401610458565b61186781836020013561164e565b6118a85760405162461bcd60e51b81526020600482015260126024820152711393d390d157d053149150511657d554d15160721b6044820152606401610458565b6003830154600160801b90046001600160801b03166080830135111561190c5760405162461bcd60e51b81526020600482015260196024820152784249445f4558434545445f415641494c41424c455f53495a4560381b6044820152606401610458565b8360800151826080013510156119545760405162461bcd60e51b815260206004820152600d60248201526c10925117d513d3d7d4d3505313609a1b6044820152606401610458565b600060808301356119676008600a612455565b6119759060608601356124fd565b61197f91906123fe565b905084606001518110156119c55760405162461bcd60e51b815260206004820152600d60248201526c50524943455f544f4f5f4c4f5760981b6044820152606401610458565b82608001358460030160108282829054906101000a90046001600160801b03166119ef919061251c565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611a488560000151846040016020810190611a2e9190612034565b60208801516001600160a01b031691906080870135611d55565b600080611a5b60c0860160a08701612034565b6001600160a01b031614611af8576000600481611a7e60c0880160a08901612034565b6001600160a01b0316815260208101919091526040016000205490508015611af657612710611ab18260608801356124fd565b611abb91906123fe565b9150611af6611ad06060870160408801612034565b611ae060c0880160a08901612034565b60408a01516001600160a01b0316919085611d55565b505b611b31611b0b6060860160408701612034565b8751611b1b846060890135612544565b60408a01516001600160a01b0316929190611d55565b611b416060850160408601612034565b6001600160a01b031684357f71abc95ed6b8cb4d0cc5eee25c1212bea3ca594e723da5c9facf161f3f5b6bd5602087013560608801356080890135611b8c60c08b0160a08c01612034565b604080519485526020850193909352918301526001600160a01b031660608201526080810185905260a00160405180910390a3505050505050565b600060017f0000000000000000000000000000000000000000000000000000000000000000604051602001611bfb9061227a565b6040516020818303038152906040528051906020012084600001358560200135866040016020810190611c2e9190612034565b60608801356080890135611c4860c08b0160a08c01612034565b60408051602081019890985287019590955260608601939093526001600160a01b03918216608086015260a085015260c08401919091521660e08201526101000160405160208183030381529060405280519060200120604051602001611cc692919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181529190528051602090910120611cee60e0850160c0860161223d565b6040805160008152602081018083529390935260ff9091169082015260e08401356060820152610100840135608082015260a0016020604051602081039080840390855afa158015611d44573d6000803e3d6000fd5b5050604051601f1901519392505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611daf908590611db5565b50505050565b6000611e0a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e879092919063ffffffff16565b805190915015610a615780806020019051810190611e28919061215a565b610a615760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610458565b6060611e968484600085611ea0565b90505b9392505050565b606082471015611f015760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610458565b843b611f4f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610458565b600080866001600160a01b03168587604051611f6b919061225e565b60006040518083038185875af1925050503d8060008114611fa8576040519150601f19603f3d011682016040523d82523d6000602084013e611fad565b606091505b5091509150611fbd828286611fc8565b979650505050505050565b60608315611fd7575081611e99565b825115611fe75782518084602001fd5b8160405162461bcd60e51b81526004016104589190612331565b80356001600160a01b038116811461201857600080fd5b919050565b80356001600160601b038116811461201857600080fd5b600060208284031215612045578081fd5b611e9982612001565b600080600080600060a08688031215612065578081fd5b61206e86612001565b945061207c60208701612001565b935061208a6040870161201d565b92506120986060870161201d565b915060808601356001600160801b03811681146120b3578182fd5b809150509295509295909350565b600080604083850312156120d3578182fd5b6120dc83612001565b946020939093013593505050565b600080602083850312156120fc578182fd5b823567ffffffffffffffff80821115612113578384fd5b818501915085601f830112612126578384fd5b813581811115612134578485fd5b8660208260051b8501011115612148578485fd5b60209290920196919550909350505050565b60006020828403121561216b578081fd5b81518015158114611e99578182fd5b6000610120828403121561218c578081fd5b50919050565b6000602082840312156121a3578081fd5b5035919050565b6000602082840312156121bb578081fd5b5051919050565b6000806000604084860312156121d6578283fd5b83359250602084013567ffffffffffffffff808211156121f4578384fd5b818601915086601f830112612207578384fd5b813581811115612215578485fd5b8760206101208302850101111561222a578485fd5b6020830194508093505050509250925092565b60006020828403121561224e578081fd5b813560ff81168114611e99578182fd5b6000825161227081846020870161255b565b9190910192915050565b63084d2c8560e31b81526e1d5a5b9d0c8d4d881cddd85c12590b608a1b60048201526d1d5a5b9d0c8d4d881b9bdb98d94b60921b6013820152741859191c995cdcc81cda59db995c95d85b1b195d0b605a1b6021820152721d5a5b9d0c8d4d881cd95b1b105b5bdd5b9d0b606a1b6036820152711d5a5b9d0c8d4d88189d5e505b5bdd5b9d0b60721b60498201526f30b2323932b9b9903932b332b93932b960811b605b820152602960f81b606b820152606c0190565b602081526000825180602084015261235081604085016020870161255b565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006040820184835260206040818501528185518084526060860191508287019350845b818110156123d9578451835293830193918301916001016123bd565b5090979650505050505050565b600082198211156123f9576123f96125b6565b500190565b60008261240d5761240d6125cc565b500490565b600181815b8085111561244d578160001904821115612433576124336125b6565b8085161561244057918102915b93841c9390800290612417565b509250929050565b6000611e99838360008261246b57506001610846565b8161247857506000610846565b816001811461248e5760028114612498576124b4565b6001915050610846565b60ff8411156124a9576124a96125b6565b50506001821b610846565b5060208310610133831016604e8410600b84101617156124d7575081810a610846565b6124e18383612412565b80600019048211156124f5576124f56125b6565b029392505050565b6000816000190483118215151615612517576125176125b6565b500290565b60006001600160801b038381169083168181101561253c5761253c6125b6565b039392505050565b600082821015612556576125566125b6565b500390565b60005b8381101561257657818101518382015260200161255e565b83811115611daf5750506000910152565b600060001982141561259b5761259b6125b6565b5060010190565b6000826125b1576125b16125cc565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220903f833e28f0b713a9ca5df381f0bfff7250201699dec3a4d4d65055bdeb125164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063acb8cc4911610071578063acb8cc4914610360578063d5172fcc14610387578063e55156b51461039a578063f2fde38b146103ad578063fbcac9e1146103c057600080fd5b8063715018a61461021c57806375780f4214610224578063796f077b146102445780638da5cb5b1461026b578063a13f1c621461028657600080fd5b80633644e515116100f45780633644e515146101aa578063416f281d146101d157806351bb9b1e146101f857806369fd925f146102005780636c1c56f11461020957600080fd5b806305477ddf1461013157806307a975a1146101465780631647795e1461016c57806320606b701461018f5780632787b5f814610197575b600080fd5b61014461013f366004612192565b6103e1565b005b61015961015436600461204e565b6104cf565b6040519081526020015b60405180910390f35b61017f61017a3660046120c1565b6107f4565b6040519015158152602001610163565b61015961084c565b6101596101a5366004612192565b6108f8565b6101597f000000000000000000000000000000000000000000000000000000000000000081565b6101597f000000000000000000000000000000000000000000000000000000000000000081565b6101596109cc565b61015960025481565b6101446102173660046120ea565b6109db565b610144610a66565b610159610232366004612034565b60046020526000908152604090205481565b6101597fc6a23281a7a642025bdf45d090469ceeec8a143b5bad19e8f545d83149642b8b81565b6001546040516001600160a01b039091168152602001610163565b610301610294366004612192565b6003602081905260009182526040909120805460018201546002830154938301546004909301546001600160a01b0392831694828416946001600160601b03600160a01b94859004811695831694909204909116916001600160801b0380831692600160801b9004169088565b604080516001600160a01b03998a16815297891660208901526001600160601b0396871690880152969093166060860152921660808401526001600160801b0391821660a08401521660c082015260e081019190915261010001610163565b6101597fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6101446103953660046121c2565b610a9c565b6101446103a83660046120c1565b610d3b565b6101446103bb366004612034565b610e2a565b6103d36103ce36600461217a565b610ec5565b604051610163929190612399565b6000818152600360205260409020546001600160a01b031633146104615760405162461bcd60e51b815260206004820152602c60248201527f4f6e6c792073656c6c65722063616e20636c6f7365206f72206f66666572206460448201526b1bd95cdb89dd08195e1a5cdd60a21b60648201526084015b60405180910390fd5b600081815260036020818152604080842080546001600160a01b03191681556001810185905560028101859055928301849055600490920192909255518281527f7f501b3628443cc9556da1d5744140c295120a54f5aa01e220363dd568e84783910160405180910390a150565b60006001600160a01b0386166105315760405162461bcd60e51b815260206004820152602160248201527f6f546f6b656e2063616e6e6f7420626520746865207a65726f206164647265736044820152607360f81b6064820152608401610458565b6001600160a01b0385166105975760405162461bcd60e51b815260206004820152602760248201527f42696464696e67546f6b656e2063616e6e6f7420626520746865207a65726f206044820152666164647265737360c81b6064820152608401610458565b6000846001600160601b0316116105fa5760405162461bcd60e51b815260206004820152602160248201527f4d696e5072696365206d757374206265206c6172676572207468616e207a65726044820152606f60f81b6064820152608401610458565b6000836001600160601b03161161065f5760405162461bcd60e51b815260206004820152602360248201527f4d696e42696453697a65206d757374206265206c6172676572207468616e207a60448201526265726f60e81b6064820152608401610458565b816001600160801b0316836001600160601b031611156106c15760405162461bcd60e51b815260206004820152601d60248201527f4d696e42696453697a65206578636565647320746f74616c2073697a650000006044820152606401610458565b6001600260008282546106d491906123e6565b90915550506002805460008181526003602081905260409182902080546001600160a01b0319163390811782556001600160601b03808a16600160a01b9081026001600160a01b038e81169190911798850198909855908b1602958c1695909517600180830191909155600160801b6001600160801b038916908102179282019290925560040155519092507f61ed224de71f3815c67ff417a9cba223a61831d6223cfd50f3986f55cca81166916107e3918491908a908a908a908a908a909687526001600160a01b03958616602088015293851660408701529190931660608501526001600160601b03928316608085015290911660a08301526001600160801b031660c082015260e00190565b60405180910390a195945050505050565b600080610803610100846123fe565b90506000610813610100856125a2565b6001600160a01b038616600090815260056020908152604080832095835294905292909220546001921c82169091149150505b92915050565b6040516c08a92a06e626488dedac2d2dc5609b1b60208201526b1cdd1c9a5b99c81b985b594b60a21b602d8201526e1cdd1c9a5b99c81d995c9cda5bdb8b608a1b60398201526f1d5a5b9d0c8d4d8818da185a5b92590b60821b60488201527f6164647265737320766572696679696e67436f6e7472616374000000000000006058820152602960f81b60718201526072015b6040516020818303038152906040528051906020012081565b600081815260036020526040812080546001600160a01b03166109545760405162461bcd60e51b815260206004820152601460248201527313d999995c88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610458565b6003810154600160801b90046001600160801b031660008161097757600061097a565b60015b600384015460ff91909116915061099b9083906001600160801b0316612544565b8184600401546109ab9190612544565b6109b9906305f5e1006124fd565b6109c391906123fe565b95945050505050565b6040516020016108df9061227a565b60005b81811015610a61576000838383818110610a0857634e487b7160e01b600052603260045260246000fd5b905060200201359050610a1b338261164e565b15610a4e57604051339082907f8dd3c361eb2366ff27c2db0eb07b9261f1d052570742ab8c9a0c326f37aa576d90600090a35b5080610a5981612587565b9150506109de565b505050565b6001546001600160a01b03163314610a905760405162461bcd60e51b815260040161045890612364565b610a9a60006116e7565b565b60026000541415610aef5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610458565b6002600090815583815260036020526040902080546001600160a01b0316338114610b725760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c792073656c6c65722063616e20736574746c65206f72206f666665722060448201526c191bd95cdb89dd08195e1a5cdd609a1b6064820152608401610458565b6003820154600160801b90046001600160801b0316610bc95760405162461bcd60e51b815260206004820152601360248201527213d999995c88199d5b1b1e481cd95d1d1b1959606a1b6044820152606401610458565b6040805160a0810182526001600160a01b038381168252600185015480821660208401526002860154918216938301939093526001600160601b03600160a01b93849004811660608401529290049091166080820152600090815b85811015610ca757610c5d8286898985818110610c5157634e487b7160e01b600052603260045260246000fd5b90506101200201611739565b868682818110610c7d57634e487b7160e01b600052603260045260246000fd5b905061012002016060013583610c9391906123e6565b925080610c9f81612587565b915050610c24565b506003840154600160801b90046001600160801b03161580610cca576000610ccd565b60015b610cda9060ff1684612544565b856004016000828254610ced91906123e6565b90915550508015610d2c576040518881527f1b5db04ed24662a962854839dba8e5b26c71e843c99221f770571a4ea3ecfdcd9060200160405180910390a15b50506001600055505050505050565b6001546001600160a01b03163314610d655760405162461bcd60e51b815260040161045890612364565b6001600160a01b038216610dc75760405162461bcd60e51b815260206004820152602360248201527f52656665727265722063616e6e6f7420626520746865207a65726f206164647260448201526265737360e81b6064820152608401610458565b6127108110610e0e5760405162461bcd60e51b81526020600482015260136024820152724665652065786365656473206d6178696d756d60681b6044820152606401610458565b6001600160a01b03909116600090815260046020526040902055565b6001546001600160a01b03163314610e545760405162461bcd60e51b815260040161045890612364565b6001600160a01b038116610eb95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610458565b610ec2816116e7565b50565b8035600090815260036020818152604080842081516101008101835281546001600160a01b039081168083526001840154808316968401969096526001600160601b03600160a01b968790048116958401959095526002840154918216606084810191909152959091049093166080820152938101546001600160801b0380821660a0870152600160801b9091041660c08501526004015460e0840152909190610fa85760405162461bcd60e51b815260206004820152601460248201527313d999995c88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610458565b60408051600a80825261016082019092526000916020820161014080368337019050509050600080610fd987611bc7565b90506001600160a01b038116611037577014d251d3905515549157d2539590531251607a1b83838151811061101e57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528161103381612587565b9250505b6110476060880160408901612034565b6001600160a01b0316816001600160a01b0316146110b0577314d251d3905515549157d35254d3505510d2115160621b83838151811061109757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152816110ac81612587565b9250505b6110be8188602001356107f4565b1561111257711393d390d157d053149150511657d554d15160721b8383815181106110f957634e487b7160e01b600052603260045260246000fd5b60209081029190910101528161110e81612587565b9250505b83608001516001600160601b031687608001351015611175576c10925117d513d3d7d4d3505313609a1b83838151811061115c57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528161117181612587565b9250505b8360c001516001600160801b0316876080013511156111e457784249445f4558434545445f415641494c41424c455f53495a4560381b8383815181106111cb57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152816111e081612587565b9250505b600060808801356111f76008600a612455565b6112059060608b01356124fd565b61120f91906123fe565b905084604001516001600160601b0316811015611270576c50524943455f544f4f5f4c4f5760981b84848151811061125757634e487b7160e01b600052603260045260246000fd5b60209081029190910101528261126c81612587565b9350505b600085606001516001600160a01b031663dd62ed3e8a60400160208101906112989190612034565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b1580156112dd57600080fd5b505afa1580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131591906121aa565b9050886060013581101561137457735349474e45525f414c4c4f57414e43455f4c4f5760601b85858151811061135b57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528361137081612587565b9450505b600086606001516001600160a01b03166370a082318b604001602081019061139c9190612034565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141391906121aa565b9050896060013581101561147057715349474e45525f42414c414e43455f4c4f5760701b86868151811061145757634e487b7160e01b600052603260045260246000fd5b60209081029190910101528461146c81612587565b9550505b60208701518751604051636eb1769f60e11b81526001600160a01b039182166004820152306024820152600092919091169063dd62ed3e9060440160206040518083038186803b1580156114c357600080fd5b505afa1580156114d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fb91906121aa565b90508a6080013581101561155a577353454c4c45525f414c4c4f57414e43455f4c4f5760601b87878151811061154157634e487b7160e01b600052603260045260246000fd5b60209081029190910101528561155681612587565b9650505b602088015188516040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a082319060240160206040518083038186803b1580156115a757600080fd5b505afa1580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df91906121aa565b90508b6080013581101561163c577153454c4c45525f42414c414e43455f4c4f5760701b88888151811061162357634e487b7160e01b600052603260045260246000fd5b60209081029190910101528661163881612587565b9750505b50949a95995094975050505050505050565b60008061165d610100846123fe565b9050600061166d610100856125a2565b6001600160a01b0386166000908152600560209081526040808320868452909152902054909150600181831c811614156116ad5760009350505050610846565b6001600160a01b03861660009081526005602090815260408083209583529490529290922060019182901b92909217909155905092915050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b467f00000000000000000000000000000000000000000000000000000000000000001461179b5760405162461bcd60e51b815260206004820152601060248201526f10d210525397d25117d0d2105391d15160821b6044820152606401610458565b60006117a682611bc7565b90506001600160a01b0381166117f25760405162461bcd60e51b815260206004820152601160248201527014d251d3905515549157d2539590531251607a1b6044820152606401610458565b6118026060830160408401612034565b6001600160a01b0316816001600160a01b0316146118595760405162461bcd60e51b815260206004820152601460248201527314d251d3905515549157d35254d3505510d2115160621b6044820152606401610458565b61186781836020013561164e565b6118a85760405162461bcd60e51b81526020600482015260126024820152711393d390d157d053149150511657d554d15160721b6044820152606401610458565b6003830154600160801b90046001600160801b03166080830135111561190c5760405162461bcd60e51b81526020600482015260196024820152784249445f4558434545445f415641494c41424c455f53495a4560381b6044820152606401610458565b8360800151826080013510156119545760405162461bcd60e51b815260206004820152600d60248201526c10925117d513d3d7d4d3505313609a1b6044820152606401610458565b600060808301356119676008600a612455565b6119759060608601356124fd565b61197f91906123fe565b905084606001518110156119c55760405162461bcd60e51b815260206004820152600d60248201526c50524943455f544f4f5f4c4f5760981b6044820152606401610458565b82608001358460030160108282829054906101000a90046001600160801b03166119ef919061251c565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611a488560000151846040016020810190611a2e9190612034565b60208801516001600160a01b031691906080870135611d55565b600080611a5b60c0860160a08701612034565b6001600160a01b031614611af8576000600481611a7e60c0880160a08901612034565b6001600160a01b0316815260208101919091526040016000205490508015611af657612710611ab18260608801356124fd565b611abb91906123fe565b9150611af6611ad06060870160408801612034565b611ae060c0880160a08901612034565b60408a01516001600160a01b0316919085611d55565b505b611b31611b0b6060860160408701612034565b8751611b1b846060890135612544565b60408a01516001600160a01b0316929190611d55565b611b416060850160408601612034565b6001600160a01b031684357f71abc95ed6b8cb4d0cc5eee25c1212bea3ca594e723da5c9facf161f3f5b6bd5602087013560608801356080890135611b8c60c08b0160a08c01612034565b604080519485526020850193909352918301526001600160a01b031660608201526080810185905260a00160405180910390a3505050505050565b600060017f0000000000000000000000000000000000000000000000000000000000000000604051602001611bfb9061227a565b6040516020818303038152906040528051906020012084600001358560200135866040016020810190611c2e9190612034565b60608801356080890135611c4860c08b0160a08c01612034565b60408051602081019890985287019590955260608601939093526001600160a01b03918216608086015260a085015260c08401919091521660e08201526101000160405160208183030381529060405280519060200120604051602001611cc692919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181529190528051602090910120611cee60e0850160c0860161223d565b6040805160008152602081018083529390935260ff9091169082015260e08401356060820152610100840135608082015260a0016020604051602081039080840390855afa158015611d44573d6000803e3d6000fd5b5050604051601f1901519392505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611daf908590611db5565b50505050565b6000611e0a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e879092919063ffffffff16565b805190915015610a615780806020019051810190611e28919061215a565b610a615760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610458565b6060611e968484600085611ea0565b90505b9392505050565b606082471015611f015760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610458565b843b611f4f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610458565b600080866001600160a01b03168587604051611f6b919061225e565b60006040518083038185875af1925050503d8060008114611fa8576040519150601f19603f3d011682016040523d82523d6000602084013e611fad565b606091505b5091509150611fbd828286611fc8565b979650505050505050565b60608315611fd7575081611e99565b825115611fe75782518084602001fd5b8160405162461bcd60e51b81526004016104589190612331565b80356001600160a01b038116811461201857600080fd5b919050565b80356001600160601b038116811461201857600080fd5b600060208284031215612045578081fd5b611e9982612001565b600080600080600060a08688031215612065578081fd5b61206e86612001565b945061207c60208701612001565b935061208a6040870161201d565b92506120986060870161201d565b915060808601356001600160801b03811681146120b3578182fd5b809150509295509295909350565b600080604083850312156120d3578182fd5b6120dc83612001565b946020939093013593505050565b600080602083850312156120fc578182fd5b823567ffffffffffffffff80821115612113578384fd5b818501915085601f830112612126578384fd5b813581811115612134578485fd5b8660208260051b8501011115612148578485fd5b60209290920196919550909350505050565b60006020828403121561216b578081fd5b81518015158114611e99578182fd5b6000610120828403121561218c578081fd5b50919050565b6000602082840312156121a3578081fd5b5035919050565b6000602082840312156121bb578081fd5b5051919050565b6000806000604084860312156121d6578283fd5b83359250602084013567ffffffffffffffff808211156121f4578384fd5b818601915086601f830112612207578384fd5b813581811115612215578485fd5b8760206101208302850101111561222a578485fd5b6020830194508093505050509250925092565b60006020828403121561224e578081fd5b813560ff81168114611e99578182fd5b6000825161227081846020870161255b565b9190910192915050565b63084d2c8560e31b81526e1d5a5b9d0c8d4d881cddd85c12590b608a1b60048201526d1d5a5b9d0c8d4d881b9bdb98d94b60921b6013820152741859191c995cdcc81cda59db995c95d85b1b195d0b605a1b6021820152721d5a5b9d0c8d4d881cd95b1b105b5bdd5b9d0b606a1b6036820152711d5a5b9d0c8d4d88189d5e505b5bdd5b9d0b60721b60498201526f30b2323932b9b9903932b332b93932b960811b605b820152602960f81b606b820152606c0190565b602081526000825180602084015261235081604085016020870161255b565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006040820184835260206040818501528185518084526060860191508287019350845b818110156123d9578451835293830193918301916001016123bd565b5090979650505050505050565b600082198211156123f9576123f96125b6565b500190565b60008261240d5761240d6125cc565b500490565b600181815b8085111561244d578160001904821115612433576124336125b6565b8085161561244057918102915b93841c9390800290612417565b509250929050565b6000611e99838360008261246b57506001610846565b8161247857506000610846565b816001811461248e5760028114612498576124b4565b6001915050610846565b60ff8411156124a9576124a96125b6565b50506001821b610846565b5060208310610133831016604e8410600b84101617156124d7575081810a610846565b6124e18383612412565b80600019048211156124f5576124f56125b6565b029392505050565b6000816000190483118215151615612517576125176125b6565b500290565b60006001600160801b038381169083168181101561253c5761253c6125b6565b039392505050565b600082821015612556576125566125b6565b500390565b60005b8381101561257657818101518382015260200161255e565b83811115611daf5750506000910152565b600060001982141561259b5761259b6125b6565b5060010190565b6000826125b1576125b16125cc565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220903f833e28f0b713a9ca5df381f0bfff7250201699dec3a4d4d65055bdeb125164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "averagePriceForOffer(uint256)": {
        "params": {
          "swapId": "unique identifier of the swap offer"
        }
      },
      "cancelNonce(uint256[])": {
        "details": "Cancelled nonces are marked as usedEmits a Cancel eventOut of gas may occur in arrays of length > 400",
        "params": {
          "nonces": "uint256[] List of nonces to cancel"
        }
      },
      "check((uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32))": {
        "params": {
          "bid": "Bid struct containing bid details"
        },
        "returns": {
          "_0": "tuple of error count and bytes32[] memory array of error messages"
        }
      },
      "closeOffer(uint256)": {
        "params": {
          "swapId": "unique identifier of the swap offer"
        }
      },
      "createOffer(address,address,uint96,uint96,uint128)": {
        "params": {
          "biddingToken": "token asked by seller",
          "minBidSize": "minimum amount of oToken requested in a single bid",
          "minPrice": "minimum price of oToken denominated in biddingToken",
          "oToken": "token offered by seller",
          "totalSize": "amount of oToken offered by seller"
        }
      },
      "nonceUsed(address,uint256)": {
        "params": {
          "nonce": "uint256 Nonce being checked",
          "signer": "address Address of the signer"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(address,uint256)": {
        "params": {
          "fee": "is the fee in percent in 2 decimals",
          "referrer": "is the address of the referrer"
        }
      },
      "settleOffer(uint256,(uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32)[])": {
        "params": {
          "bids": "bids for swaps",
          "swapId": "unique identifier of the swap offer"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_nonceGroups": {
        "details": "The nonce group is computed as nonce / 256, so each group of 256 sequential nonces uses the same keyThe nonce states are encoded as 256 bits, for each nonce in the group 0 means available and 1 means used"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "averagePriceForOffer(uint256)": {
        "notice": "Returns the average settlement price for a swap offer"
      },
      "cancelNonce(uint256[])": {
        "notice": "Cancel one or more nonces"
      },
      "check((uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32))": {
        "notice": "Validates Swap bid for any potential errors"
      },
      "closeOffer(uint256)": {
        "notice": "Close offer"
      },
      "createOffer(address,address,uint96,uint96,uint128)": {
        "notice": "Create a new offer available for swap"
      },
      "nonceUsed(address,uint256)": {
        "notice": "Returns true if the nonce has been used"
      },
      "setFee(address,uint256)": {
        "notice": "Sets the referral fee for a specific referrer"
      },
      "settleOffer(uint256,(uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32)[])": {
        "notice": "Settles the swap offering by iterating through the bids"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1109,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1002,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12842,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "offersCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 12847,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "swapOffers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Offer)3560_storage)"
      },
      {
        "astId": 12851,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "referralFees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12858,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "_nonceGroups",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Offer)3560_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ISwap.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)3560_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Offer)3560_storage": {
        "encoding": "inplace",
        "label": "struct ISwap.Offer",
        "members": [
          {
            "astId": 3545,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3547,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "oToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3549,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "minPrice",
            "offset": 20,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 3551,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "biddingToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3553,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "minBidSize",
            "offset": 20,
            "slot": "2",
            "type": "t_uint96"
          },
          {
            "astId": 3555,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "totalSize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 3557,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "availableSize",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 3559,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "totalSales",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}