{
  "address": "0x13F20ed881f7ED97C5EA34B33C9305D7f7D00fd3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sAVAX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sAVAXVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sAVAX",
      "outputs": [
        {
          "internalType": "contract ISAVAX",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sAVAXVault",
      "outputs": [
        {
          "internalType": "contract IRibbonVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xca1c577c23dba57b795dbd78a44543a43c0ca3bb18bee7512f8f063e68db5d7f",
  "receipt": {
    "to": null,
    "from": "0x004FCF8052D3c7eCb7558ac0068882425a055528",
    "contractAddress": "0x13F20ed881f7ED97C5EA34B33C9305D7f7D00fd3",
    "transactionIndex": 3,
    "gasUsed": "229497",
    "logsBloom": "0x
    "blockHash": "0xa6760bbf0dc0d4b25cc7deb91cb8227c9f6b7cbe1c5f90708882d3681162946e",
    "transactionHash": "0xca1c577c23dba57b795dbd78a44543a43c0ca3bb18bee7512f8f063e68db5d7f",
    "logs": [],
    "blockNumber": 6745008,
    "cumulativeGasUsed": "7151779",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x83eC1001526Da4cbD55a032d17b3B5914bE7c0C8",
    "0x4f62BFd896bD484bC45663DEc5A28B85817E7a0E"
  ],
  "solcInputHash": "8a4a4aef1fe8fdfcb811d32f7d1d2a2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sAVAX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sAVAXVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sAVAX\",\"outputs\":[{\"internalType\":\"contract ISAVAX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sAVAXVault\",\"outputs\":[{\"internalType\":\"contract IRibbonVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/SAVAXDepositHelper.sol\":\"SAVAXDepositHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonVault {\\n    function deposit(uint256 amount) external;\\n\\n    function depositETH() external payable;\\n\\n    function cap() external view returns (uint256);\\n\\n    function depositFor(uint256 amount, address creditor) external;\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n}\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getPremiumInStables(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa58a9aa52abbf9b538dd8562060e0b2e4938b9c216cba85ae999126a4fa2db83\",\"license\":\"MIT\"},\"contracts/interfaces/ISAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISAVAX is IERC20 {\\n    function getSharesByPooledAvax(uint256 avaxAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPooledAvaxByShares(uint256 shareAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function submit() external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x4348d3e58de49dc2bc50cb5794cdc2c38a89bbc6213f457ac4fd011e283e4888\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\n\\n    // Otokens have 8 decimal places.\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Amount locked for scheduled withdrawals;\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\",\"keccak256\":\"0x462aa30f83c322d3129ded8da0d5f8430425a04c8c2d87787f33d7d5c41c1571\",\"license\":\"MIT\"},\"contracts/utils/SAVAXDepositHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {ISAVAX} from \\\"../interfaces/ISAVAX.sol\\\";\\nimport {IRibbonVault} from \\\"../interfaces/IRibbon.sol\\\";\\n\\ncontract SAVAXDepositHelper {\\n    ISAVAX public immutable sAVAX;\\n    IRibbonVault public immutable sAVAXVault;\\n\\n    constructor(address _sAVAX, address _sAVAXVault) {\\n        require(_sAVAX != address(0), \\\"!sAVAX\\\");\\n        require(_sAVAXVault != address(0), \\\"!sAVAXVault\\\");\\n\\n        sAVAX = ISAVAX(_sAVAX);\\n        sAVAXVault = IRibbonVault(_sAVAXVault);\\n    }\\n\\n    function deposit() external payable {\\n        uint256 sAVAXAmount = sAVAX.submit{value: msg.value}();\\n        sAVAX.approve(address(sAVAXVault), sAVAXAmount);\\n        sAVAXVault.depositFor(sAVAXAmount, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xb297f4f753ba21841480f58c66b34c489b2cc617f9fccf8d219c5f67c35f0691\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161048438038061048483398101604081905261002f916100f1565b6001600160a01b0382166100735760405162461bcd60e51b8152602060048201526006602482015265042e682ac82b60d31b60448201526064015b60405180910390fd5b6001600160a01b0381166100b75760405162461bcd60e51b815260206004820152600b60248201526a085cd055905615985d5b1d60aa1b604482015260640161006a565b6001600160601b0319606092831b8116608052911b1660a052610123565b80516001600160a01b03811681146100ec57600080fd5b919050565b60008060408385031215610103578182fd5b61010c836100d5565b915061011a602084016100d5565b90509250929050565b60805160601c60a05160601c61031d61016760003960008181609b015281816101740152610241015260008181604b0152818160cb01526101a6015261031d6000f3fe6080604052600436106100345760003560e01c8063a2a5236c14610039578063caa8c3c714610089578063d0e30db0146100bd575b600080fd5b34801561004557600080fd5b5061006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b34801561009557600080fd5b5061006d7f000000000000000000000000000000000000000000000000000000000000000081565b6100c56100c7565b005b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635bcb2fc6346040518263ffffffff1660e01b81526004016020604051808303818588803b15801561012457600080fd5b505af1158015610138573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061015d91906102cf565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b1580156101ec57600080fd5b505af1158015610200573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022491906102a8565b506040516336efd16f60e01b8152600481018290523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906336efd16f90604401600060405180830381600087803b15801561028d57600080fd5b505af11580156102a1573d6000803e3d6000fd5b5050505050565b6000602082840312156102b9578081fd5b815180151581146102c8578182fd5b9392505050565b6000602082840312156102e0578081fd5b505191905056fea26469706673582212202bf6fb12ce0754786d0b7b6e38f874df4f97caa0ebe07cd314f786cf69a20a6264736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c8063a2a5236c14610039578063caa8c3c714610089578063d0e30db0146100bd575b600080fd5b34801561004557600080fd5b5061006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b34801561009557600080fd5b5061006d7f000000000000000000000000000000000000000000000000000000000000000081565b6100c56100c7565b005b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635bcb2fc6346040518263ffffffff1660e01b81526004016020604051808303818588803b15801561012457600080fd5b505af1158015610138573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061015d91906102cf565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b1580156101ec57600080fd5b505af1158015610200573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022491906102a8565b506040516336efd16f60e01b8152600481018290523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906336efd16f90604401600060405180830381600087803b15801561028d57600080fd5b505af11580156102a1573d6000803e3d6000fd5b5050505050565b6000602082840312156102b9578081fd5b815180151581146102c8578182fd5b9392505050565b6000602082840312156102e0578081fd5b505191905056fea26469706673582212202bf6fb12ce0754786d0b7b6e38f874df4f97caa0ebe07cd314f786cf69a20a6264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}