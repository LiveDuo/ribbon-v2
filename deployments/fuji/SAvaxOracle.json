{
  "address": "0x429c5539a65A50EEAa6743841f9d77fA5266342f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sAVAX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WAVAXOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WAVAXOracle",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sAVAX",
      "outputs": [
        {
          "internalType": "contract ISAVAX",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x960d098676cfabc5ee1cc77826b8e27c9727566debc39a25bb9d4e9823f9ea57",
  "receipt": {
    "to": null,
    "from": "0x004FCF8052D3c7eCb7558ac0068882425a055528",
    "contractAddress": "0x429c5539a65A50EEAa6743841f9d77fA5266342f",
    "transactionIndex": 8,
    "gasUsed": "356249",
    "logsBloom": "0x
    "blockHash": "0x36ece63bca19d4df9f1767fc251d81e60adb4fedc9344153bff903c517f0c665",
    "transactionHash": "0x960d098676cfabc5ee1cc77826b8e27c9727566debc39a25bb9d4e9823f9ea57",
    "logs": [],
    "blockNumber": 6494900,
    "cumulativeGasUsed": "4406654",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x83eC1001526Da4cbD55a032d17b3B5914bE7c0C8",
    "0x5498BB86BC934c8D34FDA08E81D444153d0D06aD"
  ],
  "solcInputHash": "cdf57611370e1dae03162545e4b1545f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sAVAX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WAVAXOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WAVAXOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sAVAX\",\"outputs\":[{\"internalType\":\"contract ISAVAX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/SAvaxOracle.sol\":\"SAvaxOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IPriceOracle {\\n    function decimals() external view returns (uint256 _decimals);\\n\\n    function latestAnswer() external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x348b3c9919f1273777782571f887c055724264107e51cb895888b87b9a716faf\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ISAVAX {\\n    function getSharesByPooledAvax(uint256 avaxAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPooledAvaxByShares(uint256 shareAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function decimals() external view returns (uint256 _decimals);\\n}\\n\",\"keccak256\":\"0xa4b73cd57f189f007b36e25ed9025954c631d3a39554cc3371e7f85e7de958d5\",\"license\":\"MIT\"},\"contracts/oracles/SAvaxOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IPriceOracle} from \\\"../interfaces/IPriceOracle.sol\\\";\\nimport {ISAVAX} from \\\"../interfaces/ISAVAX.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\n\\ncontract SAvaxOracle is IPriceOracle {\\n    using SafeMath for uint256;\\n\\n    AggregatorV3Interface public WAVAXOracle;\\n    ISAVAX public sAVAX;\\n\\n    constructor(address _sAVAX, address _WAVAXOracle) {\\n        require(_sAVAX != address(0), \\\"!sAVAX\\\");\\n        require(_WAVAXOracle != address(0), \\\"!WAVAXOracle\\\");\\n\\n        sAVAX = ISAVAX(_sAVAX);\\n        WAVAXOracle = AggregatorV3Interface(_WAVAXOracle);\\n    }\\n\\n    function _underlyingPriceToSAvaxPrice(uint256 underlyingPrice)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        // Passing 1e18 to getPooledAvaxByShares() gives us the number of AVAX per sAVAX.\\n        uint256 sAvaxPerAvax = sAVAX.getPooledAvaxByShares(1e18);\\n        return sAvaxPerAvax.mul(underlyingPrice).div(1e18);\\n    }\\n\\n    function latestAnswer() external view override returns (uint256) {\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            ,\\n            uint256 timeStamp,\\n            uint80 answeredInRound\\n        ) = WAVAXOracle.latestRoundData();\\n\\n        require(answeredInRound >= roundID, \\\"Stale oracle price\\\");\\n        require(timeStamp != 0, \\\"!timeStamp\\\");\\n        uint256 underlyingPrice = uint256(DSMath.imax(price, 0));\\n        return _underlyingPriceToSAvaxPrice(underlyingPrice);\\n    }\\n\\n    function decimals() external view override returns (uint256) {\\n        return WAVAXOracle.decimals();\\n    }\\n}\\n\",\"keccak256\":\"0x00460e79e9249a92eef6a3216898858240cf324a365415f84a4e1b7b90024dd7\",\"license\":\"UNLICENSED\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\nlibrary DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1c6bb5cff7c83c85792349f61b3f4faf6e22bb02fa95d7af7b269e59a3902b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516105da3803806105da83398101604081905261002f91610105565b6001600160a01b0382166100735760405162461bcd60e51b8152602060048201526006602482015265042e682ac82b60d31b60448201526064015b60405180910390fd5b6001600160a01b0381166100b85760405162461bcd60e51b815260206004820152600c60248201526b2157415641584f7261636c6560a01b604482015260640161006a565b600180546001600160a01b039384166001600160a01b03199182161790915560008054929093169116179055610137565b80516001600160a01b038116811461010057600080fd5b919050565b60008060408385031215610117578182fd5b610120836100e9565b915061012e602084016100e9565b90509250929050565b610494806101466000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063313ce5671461005157806350d25bcd1461006c57806382a67eae14610074578063a2a5236c1461009f575b600080fd5b6100596100b2565b6040519081526020015b60405180910390f35b610059610141565b600054610087906001600160a01b031681565b6040516001600160a01b039091168152602001610063565b600154610087906001600160a01b031681565b60008060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561010157600080fd5b505afa158015610115573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013991906103f2565b60ff16905090565b60008060008060008060009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561019657600080fd5b505afa1580156101aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ce91906103a3565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff1610156102395760405162461bcd60e51b81526020600482015260126024820152715374616c65206f7261636c6520707269636560701b60448201526064015b60405180910390fd5b816102735760405162461bcd60e51b815260206004820152600a60248201526902174696d655374616d760b41b6044820152606401610230565b6000610280846000610295565b905061028b816102ae565b9550505050505090565b6000818312156102a557816102a7565b825b9392505050565b600154604051634a36d6c160e01b8152670de0b6b3a7640000600482015260009182916001600160a01b0390911690634a36d6c19060240160206040518083038186803b1580156102fe57600080fd5b505afa158015610312573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610336919061038b565b90506102a7670de0b6b3a764000061034e8386610354565b90610360565b60006102a78284610433565b60006102a78284610413565b805169ffffffffffffffffffff8116811461038657600080fd5b919050565b60006020828403121561039c578081fd5b5051919050565b600080600080600060a086880312156103ba578081fd5b6103c38661036c565b94506020860151935060408601519250606086015191506103e66080870161036c565b90509295509295909350565b600060208284031215610403578081fd5b815160ff811681146102a7578182fd5b60008261042e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561045957634e487b7160e01b81526011600452602481fd5b50029056fea2646970667358221220af91cecba0d789046aca92780c3517fbdef470129fb656b5121029a937ea3d9d64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063313ce5671461005157806350d25bcd1461006c57806382a67eae14610074578063a2a5236c1461009f575b600080fd5b6100596100b2565b6040519081526020015b60405180910390f35b610059610141565b600054610087906001600160a01b031681565b6040516001600160a01b039091168152602001610063565b600154610087906001600160a01b031681565b60008060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561010157600080fd5b505afa158015610115573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013991906103f2565b60ff16905090565b60008060008060008060009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561019657600080fd5b505afa1580156101aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ce91906103a3565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff1610156102395760405162461bcd60e51b81526020600482015260126024820152715374616c65206f7261636c6520707269636560701b60448201526064015b60405180910390fd5b816102735760405162461bcd60e51b815260206004820152600a60248201526902174696d655374616d760b41b6044820152606401610230565b6000610280846000610295565b905061028b816102ae565b9550505050505090565b6000818312156102a557816102a7565b825b9392505050565b600154604051634a36d6c160e01b8152670de0b6b3a7640000600482015260009182916001600160a01b0390911690634a36d6c19060240160206040518083038186803b1580156102fe57600080fd5b505afa158015610312573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610336919061038b565b90506102a7670de0b6b3a764000061034e8386610354565b90610360565b60006102a78284610433565b60006102a78284610413565b805169ffffffffffffffffffff8116811461038657600080fd5b919050565b60006020828403121561039c578081fd5b5051919050565b600080600080600060a086880312156103ba578081fd5b6103c38661036c565b94506020860151935060408601519250606086015191506103e66080870161036c565b90509295509295909350565b600060208284031215610403578081fd5b815160ff811681146102a7578182fd5b60008261042e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561045957634e487b7160e01b81526011600452602481fd5b50029056fea2646970667358221220af91cecba0d789046aca92780c3517fbdef470129fb656b5121029a937ea3d9d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10941,
        "contract": "contracts/oracles/SAvaxOracle.sol:SAvaxOracle",
        "label": "WAVAXOracle",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 10944,
        "contract": "contracts/oracles/SAvaxOracle.sol:SAvaxOracle",
        "label": "sAVAX",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISAVAX)3307"
      }
    ],
    "types": {
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(ISAVAX)3307": {
        "encoding": "inplace",
        "label": "contract ISAVAX",
        "numberOfBytes": "20"
      }
    }
  }
}